<?php //  //version-5.4 $Id: categorymanager.module, Photon; 28-Nov-2011 $
	
	function csrfVerification()
	{
		session_start();		
		$randomtoken = md5(uniqid(rand(), true));
		$_SESSION['csrfToken'] = $randomtoken;
		return $randomtoken;
	}

	function categorymanager_permission()
	{
		return array(
			'add edit delete category' => array(
				'title' => t('Add / Edit / Delete Category'),
				'description' => t('Permission for Category actions'),
			),
			'add edit delete topic' => array(
				'title' => t('Add / Edit / Delete Sub-Category'),
				'description' => t('Permission for Sub Category actions'),
			),
			'add edit delete subtopic' => array(
				'title' => t('Add / Edit / Delete Topic'),
				'description' => t('Permission for Topic actions'),
			),
			'add edit delete internaltopic' => array(
				'title' => t('Add / Edit / Delete Sub-Topic'),
				'description' => t('Permission for Sub-Topic actions'),
			),
			'upload file to category topic' => array(
				'title' => t('Upload Files to Category / Topic'),
				'description' => t('Permission for uploading files to Category and Topics'),
			),
			'category user access permissions' => array(
				'title' => t('Category / Topic User Access permissions'),
				'description' => t('Permission for category User Access'),
			),
			'view category topic' => array(
				'title' => t('View Category / Topic'),
				'description' => t('Permission for accessing Category and Topic pages'),
			),
		);
	}
	function categorymanager_menu()
	{
		$items = array();
		$items['categorymanager'] = array(
			'title' => 'Category',
			'page callback' => 'category_actions',
			'type' => MENU_CALLBACK,
			'access arguments' => array('view category topic'),
		);
		$items['category'] = array(
			'title' => 'Category',
			'page callback' => 'category_actions',
			'type' => MENU_CALLBACK,
			'access arguments' => array('view category topic'),
		);
		$items['category/%'] = array(
			'title' => 'Category',
			'page callback' => 'category_actions',
			'type' => MENU_CALLBACK,
			'access arguments' => array('view category topic'),
		);
		$items['category/add'] = array(
			'title' => 'Add Category',
			'page callback' => 'category_add_category',
			'type' => MENU_CALLBACK,
			'access arguments' => array('add edit delete category'),
		);
		$items['category/edit/%'] = array(
			'title' => 'Edit Category',
			'page callback' => 'category_edit_category',
			'type' => MENU_CALLBACK,
			'access arguments' => array('add edit delete category'),
		);

		$items['hyperlink/edit/%'] = array(
			'title' => 'Edit Category',
			'page callback' => 'category_edit_hyperlink',
			'type' => MENU_CALLBACK,
			'access arguments' => array('add edit delete category'),
		);

		$items['category/documentorder'] = array(
			'title' => 'Edit Category',
			'page callback' => 'category_documentorder_category',
			'type' => MENU_CALLBACK,
			'access arguments' => array('add edit delete category'),
		);

		$items['category/save'] = array(
			'page callback' => 'category_save_category',
			'type' => MENU_CALLBACK,
			'access arguments' => array('add edit delete category'),
		);
		$items['category/upload'] = array(
			'page callback' => 'category_upload_category',
			'type' => MENU_CALLBACK,
			'access arguments' => array('add edit delete category'),
		);
		$items['category/delete/%'] = array(
			'page callback' => 'category_delete_category',
			'type' => MENU_CALLBACK,
			'access arguments' => array('add edit delete category'),
		);

		$items['hyperlink/delete/%'] = array(
			'page callback' => 'category_delete_hyperlink',
			'type' => MENU_CALLBACK,
			'access arguments' => array('add edit delete category'),
		);
		$items['category/%/topic/%'] = array(
			'title' => 'Sub-Category',
			'page callback' => 'category_topic_actions',
			'type' => MENU_CALLBACK,
			'access arguments' => array('view category topic'),
		);
		$items['category/%/topic/add'] = array(
			'title' => 'Add Sub-Category',
			'page callback' => 'category_add_topic',
			'type' => MENU_CALLBACK,
			'access arguments' => array('add edit delete topic'),
		);
		$items['category/%/hyperlink/add'] = array(
			'title' => 'Add Hyperlink',
			'page callback' => 'category_add_hyperlink',
			'type' => MENU_CALLBACK,
			'access arguments' => array('add edit delete topic'),
		);

		$items['category/%/hyperlink/%/add'] = array(
			'title' => 'Add Hyperlink',
			'page callback' => 'subcategory_add_hyperlink',
			'type' => MENU_CALLBACK,
			'access arguments' => array('add edit delete topic'),
		);

		$items['category/%/hyperlink/topicid/%/subtopic/add'] = array(
			'title' => 'Add Hyperlink',
			'page callback' => 'topic_add_hyperlink',
			'type' => MENU_CALLBACK,
			'access arguments' => array('add edit delete topic'),
		);

		$items['category/%/hyperlink/topicid/%/internaltopic/add'] = array(
			'title' => 'Add Hyperlink',
			'page callback' => 'subtopic_add_hyperlink',
			'type' => MENU_CALLBACK,
			'access arguments' => array('add edit delete topic'),
		);
		$items['category/%/topic/edit/%'] = array(
			'title' => 'Edit Sub-Category',
			'page callback' => 'category_edit_topic',
			'type' => MENU_CALLBACK,
			'access arguments' => array('add edit delete topic'),
		);
		$items['category/%/topic/save'] = array(
			'page callback' => 'category_save_topic',
			'type' => MENU_CALLBACK,
			'access arguments' => array('add edit delete topic'),
		);

		$items['category/%/topic/upload'] = array(
			'page callback' => 'category_upload_topic',
			'type' => MENU_CALLBACK,
			'access arguments' => array('add edit delete topic'),
		);


		$items['category/%/topic/delete/%'] = array(
			'page callback' => 'category_delete_topic',
			'type' => MENU_CALLBACK,
			'access arguments' => array('add edit delete topic'),
		);
		$items['category/%/topic/%/subtopic/%'] = array(
			'title' => 'Category Topic',
			'page callback' => 'category_subtopic_actions',
			'type' => MENU_CALLBACK,
			'access arguments' => array('view category topic'),
		);

		$items['category/%/topic/%/subtopic/add'] = array(
			'title' => 'Add Topic',
			'page callback' => 'category_add_subtopic',
			'type' => MENU_CALLBACK,
			'access arguments' => array('add edit delete subtopic'),
		);
		$items['category/%/topic/%/subtopic/edit/%'] = array(
			'title' => 'Edit Topic',
			'page callback' => 'category_edit_subtopic',
			'type' => MENU_CALLBACK,
			'access arguments' => array('add edit delete subtopic'),
		);
		$items['category/%/topic/%/subtopic/save'] = array(
			'page callback' => 'category_save_subtopic',
			'type' => MENU_CALLBACK,
			'access arguments' => array('add edit delete subtopic'),
		);
		$items['category/%/topic/%/subtopic/delete/%'] = array(
			'page callback' => 'category_delete_subtopic',
			'type' => MENU_CALLBACK,
			'access arguments' => array('add edit delete subtopic'),
		);
		$items['category/%/topic/%/subtopic/upload'] = array(
			'page callback' => 'category_upload_topic',
			'type' => MENU_CALLBACK,
			'access arguments' => array('add edit delete subtopic'),
		);
		$items['category/%/topic/%/subtopic/%/internaltopic'] = array(
			'title' => 'Category Sub-Topic',
			'page callback' => 'category_internaltopic_actions',
			'type' => MENU_CALLBACK,
			'access arguments' => array('view category topic'),
		);
		$items['category/%/topic/%/subtopic/%/internaltopic/add'] = array(
			'title' => 'Add Sub-Topic',
			'page callback' => 'category_add_internaltopic',
			'type' => MENU_CALLBACK,
			'access arguments' => array('add edit delete internaltopic'),
		);
		$items['category/%/topic/%/subtopic/%/internaltopic/edit/%'] = array(
			'title' => 'Edit Sub-Topic',
			'page callback' => 'category_edit_internaltopic',
			'type' => MENU_CALLBACK,
			'access arguments' => array('add edit delete internaltopic'),
		);
		$items['category/%/topic/%/subtopic/%/internaltopic/save'] = array(
			'page callback' => 'category_save_internaltopic',
			'type' => MENU_CALLBACK,
			'access arguments' => array('add edit delete internaltopic'),
		);
		$items['category/%/topic/%/subtopic/%/internaltopic/delete/%'] = array(
			'page callback' => 'category_delete_internaltopic',
			'type' => MENU_CALLBACK,
			'access arguments' => array('add edit delete internaltopic'),
		);
		$items['category/%/topic/%/subtopic/%/internaltopic/upload'] = array(
			'page callback' => 'category_upload_topic',
			'type' => MENU_CALLBACK,
			'access arguments' => array('add edit delete internaltopic'),
		);
		$items['category/useraccess'] = array(
			'page callback' => 'category_useraccess',
			'type' => MENU_CALLBACK,
			'access arguments' => array('category user access permissions'),
		);
		$items['category/openupload'] = array(
			'title' => 'Documents Upload',
			'page callback' => 'category_upload_open',
			'type' => MENU_CALLBACK,
			'access arguments' => array('upload file to category topic'),
		);
		$items['category/uploadfiles'] = array(
			'page callback' => 'category_upload_documents',
			'type' => MENU_CALLBACK,
			'access arguments' => array('upload file to category topic'),
		);

		$items['hyperlink/uploadfiles'] = array(
			'page callback' => 'hyperlink_upload_documents',
			'type' => MENU_CALLBACK,
			'access arguments' => array('upload file to category topic'),
		);

		$items['category/saveupload'] = array(
			'page callback' => 'category_upload_save',
			'type' => MENU_CALLBACK,
			'access arguments' => array('upload file to category topic'),
		);

		$items['hyperlink/saveupload'] = array(
			'page callback' => 'hyperlink_upload_save',
			'type' => MENU_CALLBACK,
			'access arguments' => array('upload file to category topic'),
		);

		$items['category/filedownload'] = array(
			'page callback' => 'category_download_documents',
			'type' => MENU_CALLBACK,
			'access arguments' => array('view category topic'),
		);
		$items['category/docpaging/%'] = array(
			'page callback' => 'category_pagination_documents',
			'type' => MENU_CALLBACK,
			'access arguments' => array('view category topic'),
		);
		$items['category/fileupload'] = array(
			'title' => 'File upload dropbox',
			'page callback' => 'file_upload_dropbox',
			'access callback' => TRUE,
			'type' => MENU_CALLBACK,
		);
		$items['category/dropbox_file_upload_notification'] = array(
			'title' => 'File upload dropbox',
			'page callback' => 'dropbox_file_upload_mail_trigger',
			'access callback' => TRUE,
			'type' => MENU_CALLBACK,
		);
		$items['category/%/topic/%/fileupload'] = array(
			'title' => 'File upload dropbox',
			'page callback' => 'file_upload_dropbox',
			'access callback' => TRUE,
			'type' => MENU_CALLBACK,
		);
		$items['category/%/topic/%/subtopic/%/fileupload'] = array(
			'title' => 'File upload dropbox',
			'page callback' => 'file_upload_dropbox',
			'access callback' => TRUE,
			'type' => MENU_CALLBACK,
		);
		$items['category/%/topic/%/subtopic/%/internaltopic/%/fileupload'] = array(
			'title' => 'File upload dropbox',
			'page callback' => 'file_upload_dropbox',
			'access callback' => TRUE,
			'type' => MENU_CALLBACK,
		);
		$items['category/fileuploaddropbox'] = array(
			'title' => 'File upload dropbox',
			'page callback' => 'file_upload_dropbox_save',
			'access callback' => TRUE,
			'type' => MENU_CALLBACK,
		);
		$items['category/fileupload/%'] = array(
			'title' => 'File upload dropbox',
			'page callback' => 'file_upload_dropbox',
			'access callback' => TRUE,
			'type' => MENU_CALLBACK,
		);
		$items['category/fileupload/submissions'] = array(
			'title' => 'File upload dropbox',
			'page callback' => 'file_submissions_actions',
			'access callback' => TRUE,
			'type' => MENU_CALLBACK,
		);

		$items['category/manageregions'] = array(
			'title'	 => t('Manage Regions'),
			'page callback' => 'category_manageregions',
			'type' => MENU_CALLBACK,
			'access callback' => TRUE,
		);

		$items['userregionsettings'] = array(
			'title'	 => t('User Regions Settings'),
			'page callback' => 'user_regions_settings',
			'type' => MENU_CALLBACK,
			'access callback' => TRUE,
		);

		$items['useremailpreferencessettings'] = array(
			'title'	 => t('User Email Preferences Settings'),
			'page callback' => 'user_emailpreferences_settings',
			'type' => MENU_CALLBACK,
			'access callback' => TRUE,
		);

		$items['supplier_category_access'] = array(
			'title'	 => t('User Supplier Category Access'),
			'page callback' => 'user_suppliercategory_access',
			'type' => MENU_CALLBACK,
			'access callback' => TRUE,
		);

		// VWR settings added by Photon-Sivaranjani
		$items['admin/config/pcm-setting'] = array(
			'title' => t('PCM Settings'),
			'description' => t('General settings'),
			'page callback' => 'drupal_get_form',
			'page arguments' => array('vwr_default_form'),
			'access arguments' => array('administer users'),
			'type' => MENU_NORMAL_ITEM
		);
		//remve files when reset and cancel
		$items['category/removeFiles'] = array(
			'title' => 'scan details remove files ',
			'page callback' => 'scan_details_remove_files',
			'access callback' => TRUE,
			'type' => MENU_CALLBACK,
		);
		
		$items['checked_region'] = array(
			'title' => 'checkbox change',
			'page callback' => 'update_checkbox_region',
			'type' => MENU_CALLBACK,
			'access callback' => TRUE,
		);
		$items['category_region_tab'] = array(
			'title' => 'region tab change',
			'page callback' => 'update_category_region_tab',
			'type' => MENU_CALLBACK,
			'access callback' => TRUE,
		);
		return $items;
	}

function update_checkbox_region(){
	if(isset($_POST['checkedBox']) && !empty($_POST['checkedBox'])){
		$res = json_decode($_POST['checkedBox']);
		$cookieval = implode(",", $res);
		$arr_cookie_options = array (
			'expires' => 0, 
			'path' => '/', 
			'domain' => null, // leading dot for compatibility or use subdomain
			'secure' => false,     // set true for other env
			'httponly' => true,    // or false
			'samesite' => 'Strict' // None || Lax  || Strict
		);
		setcookie("cookieregion_name", $cookieval, $arr_cookie_options);
	}
}

function update_category_region_tab(){
	//var_dump($_POST['checkedTab']);
	if(isset($_POST['checkedTab']) && !empty($_POST['checkedTab'])){
		$res = json_decode($_POST['checkedTab']);
		$arr_cookie_options = array (
			'expires' => 0, 
			'path' => '/', 
			'domain' => null, // leading dot for compatibility or use subdomain
			'secure' => false,     // set true for other env
			'httponly' => true,    // or false
			'samesite' => 'Strict' // None || Lax  || Strict
		);
		//$cookieval = implode(",", $res);
		//setcookie("cookie_currentregion", $res, 0, '/; samesite=strict', null, TRUE, TRUE);
		setcookie("cookie_currentregion", $res, $arr_cookie_options);
		//setcookie("currentregiontab", $res, 0, '/; samesite=strict', null, TRUE, TRUE);
		setcookie("currentregiontab", $res, $arr_cookie_options);
	}
}

	function vwr_default_form()
	{
		$form = array();
		$form['Setting_variables'] =
			array(
				'#type' => 'fieldset',
				'#title' => t('PCM configuration'),
				'#collapsible' => TRUE,
				'#collapsed' => FALSE
			);
		$form['Setting_variables']['enable_live']  =
			array(
				'#type' => 'checkbox',
				'#title' => t('Enable PCM Go Live'),
				'#default_value' => variable_get('enable_live', ''),
			);

		$form['submit'] =
			array(
				'#type' => 'submit',
				'#value' => t('Save Configuration'),
			);
		return $form;
	}

	function vwr_default_form_submit(&$form, &$form_state)
	{
		variable_set('enable_live', $form_state['values']['enable_live']);
		drupal_set_message('PCM configurations saved successfully');
	}

	function user_suppliercategory_access()
	{
/* 		$file_name = "VENDOR_LIST.csv";
		//$file_path = $_SERVER["DOCUMENT_ROOT"]."/supplier_org_users/".$file_name;
		//$file_path = "/apps/python/data/".$file_name;
		$file_path = "/home/prakash.devendhiran/".$file_name;
		$fh = fopen($file_path, 'w') or die("can't open file");
		$headers = ['vendor_id', 'SAP_vendor', 'vendor_desc', 'supplier_org_id', 'supplier_org_name'];
		$res = db_query("
							select 
								v.vendor_id,v.SAP_vendor,v.vendor_desc,so.supplier_org_id,so.supplier_org_name
							from vwr_vendor v join vwr_supplier_organization so on so.supplier_org_id = v.supplier_org_id
							order by v.vendor_id ASC
						");
		fputcsv($fh, $headers);
		$csvrow = '';
		//$command = escapeshellcmd("/apps/python/bin/azure_blob_helper.py put avantor " . $file_name . " " . $file_path);
		while($row = $res->fetchAssoc()){
			$newline = "\n";
			$csvrow.= implode(',',$row).$newline;
			fputcsv($fh,$row); 
		}

		fclose($fh);
		echo 'csv success';
		exit; */
		
		$supplier_pending_insetion_list = array();
		$pending_list_array = db_query("SELECT so.supplier_org_id,v.vendor_id FROM vwr_vendor AS v  INNER JOIN vwr_supplier_organization AS so ON so.supplier_org_id=v.supplier_org_id where so.access_map = 0 group by so.supplier_org_id")->fetchAll();
/* 		foreach ($pending_list_array as $val) {
			$supplier_pending_insetion_list[] = $val->vendor_id;
		} */
		$supplier_pending_insetion_list = [6904];
		$headers = "From:VWR - Supplier Central<VWRsuppliercentral@vwr.com>" . "\n";
		$headers .= "Reply-To: VWRsuppliercentral@vwr.com" . "\n";
		$headers .= 'MIME-Version: 1.0' . "\n";
		$headers .= 'Content-type: text/html; charset=iso-8859-1' . "\n";
		$to = "prakash.devendhiran@avantorsciences.com";
		$mailsubject = "Supplier Access Granted";
		$categoryArray = db_query("select  category_id from {category} where category_id !=76")->fetchAll();
		$categories = [];
		foreach ($categoryArray as $va => $catres) {
			$categories[] = array($catres->category_id, 0);
		}
		$categoryTopic = db_query("select topic_id,category_id from {topic}")->fetchAll();
		foreach ($categoryTopic as $va => $topres) {
			$categories[] = [$topres->category_id, $topres->topic_id];
		}
		if (count($supplier_pending_insetion_list) > 0) {
			$pending_list = implode(",", $supplier_pending_insetion_list);
			db_query("delete from vwr_category_useraccess_mapping where supplier_org_id in ($pending_list)");
			$supplier_pending_insetion_list = db_query("select  v.vendor_id,sr.region_id,sr.supplier_org_id from vwr_vendor v join vwr_supplier_org_regions sr on sr.supplier_org_id = v.supplier_org_id where v.vendor_id in ($pending_list) and sr.status!=0")->fetchAll();
			for ($i = 0; $i < count($categories); $i++) {
				$catids = $categories[$i][0];
				$topicids = $categories[$i][1];
				foreach ($supplier_pending_insetion_list as $key => $val) {
					$usersuppliermappingfields['category_id'] = $catids;
					$usersuppliermappingfields['topic_id'] = $topicids;
					$usersuppliermappingfields['vas_id'] = 0;
					//here must pass vendor_id from vendor table
					$usersuppliermappingfields['supplier_org_id'] = $val->vendor_id;
					$usersuppliermappingfields['mapping'] = 1;
					$usersuppliermappingfields['region_id'] = $val->region_id;
					db_insert('category_useraccess_mapping')->fields($usersuppliermappingfields)->execute();
				}
			}
			$supplier_mapped_array = [];
			foreach ($supplier_pending_insetion_list as $value) {
				$supplier_mapped_array[] = $value->supplier_org_id;
			}
			$supplier_mapped = implode(',', $supplier_mapped_array);
			db_query("update vwr_supplier_organization set access_map = 1 where supplier_org_id in ($supplier_mapped)");
			$message = "There were around" . count($supplier_pending_insetion_list) . "totally";
			mail($to, $mailsubject, $message, $headers);
			echo $message;
			exit;
		} else {
			mail($to, "No New Suppliers", "There were No new Suppliers as of now", $headers);
			echo "No New Suppliers";
			exit;
		}
		exit;
	}

	function category_documentorder_category()
	{
		global $user;
		$userid = $user->uid;
		$list = addslashes(strip_tags(trim($_POST["list"])));
		$separate = explode("&", $list);
		for ($i = 0; $i < count($separate); $i++) {
			$equal = explode('_', $separate[$i]);
			$documentorder = explode("=", $equal[1]);
			$docid = str_replace('[]', '', $documentorder[0]);
			$stentry = $documentorder[1];
			$orderposition = $i + $stentry;

			//This is for personal reference and this can be changed to document order based on per
			//internal user if needed
			$documentuserorderpreferences = db_query("select count(*) from {user_document_order_preferences}
			where file_id=:docid and user_id=:userid", array(':docid' => $docid, ':userid' => $userid))->fetchColumn();
			if ($documentuserorderpreferences == 0) {
				db_query("INSERT into {user_document_order_preferences}(file_id,document_order,user_id)
			VALUES(:docid,:orderposition,:userid)", array(':docid' => $docid, ':orderposition' => $orderposition, ':userid' => $userid));
			} else {
				db_query("UPDATE {user_document_order_preferences} SET document_order=:orderposition where file_id=:docid 
				and user_id=:userid", array(':docid' => $docid, ':orderposition' => $orderposition, ':userid' => $userid));
			}

			//This is for personal reference and this can be changed to document order based on per
			//internal user if needed		
			$documentorderpreferences = db_query("select count(*) from {document_order_preferences}
			where file_id=:docid", array(':docid' => $docid))->fetchColumn();
			if ($documentorderpreferences == 0) {
				db_query("INSERT into {document_order_preferences}(file_id,document_order,user_id)
			VALUES(:docid,:orderposition,:userid)", array(':docid' => $docid, ':orderposition' => $orderposition, ':userid' => $userid));
			} else {
				db_query("UPDATE {document_order_preferences} SET document_order=:orderposition where file_id=:docid", array(':docid' => $docid, ':orderposition' => $orderposition));
			}
		}
	}

	function user_emailpreferences_settings()
	{

		$na_news = addslashes(strip_tags(trim($_POST['na_news'])));
		if ($na_news  == 'undefined') $na_news = 0;
		$na_supply = addslashes(strip_tags(trim($_POST['na_supply'])));
		if ($na_supply  == 'undefined') $na_supply = 0;
		$eu_news = addslashes(strip_tags(trim($_POST['eu_news'])));
		if ($eu_news  == 'undefined') $eu_news = 0;
		$na_quality = addslashes(strip_tags(trim($_POST['na_quality'])));
		if ($na_quality  == 'undefined') $na_quality = 0;

		global $user;

		$preferences = db_query("select count(*) from {supplier_notifications} where user_id=:uid", array(':uid' => $user->uid))->fetchColumn();
		if ($preferences == 1) {

			db_query("UPDATE {supplier_notifications} SET na_news=:na_news,na_supply=:na_supply,eu_news=:eu_news,na_quality=:na_quality where user_id=:uid", array(':na_news' => $na_news, ':na_supply' => $na_supply, ':eu_news' => $eu_news, ':na_quality' => $na_quality, ':uid' => $user->uid));
		} else {
			db_query("INSERT INTO {supplier_notifications} (user_id, na_news,na_supply,eu_news,na_quality) VALUES(:uid,:na_news,:na_supply,:eu_news,:na_quality)", array(':uid' => $user->uid, ':na_news' => $na_news, ':na_supply' => $na_supply, ':eu_news' => $eu_news, ':na_quality' => $na_quality));
		}
		echo "success";
	}

	function user_regions_settings()
	{
		$userregions = explode(',', addslashes(htmlspecialchars($_POST['userregion_id'])));
		$postusertabpreferences = '';
		$postusertabpreferences = addslashes(htmlspecialchars($_POST['defaulttab']));
		$userregionfields = array();
		global $user;
		$dbuserregions = array();
		$dbuserregions = getuserregionsettings();
		$usertabpreferences = getusertabpreference();
		for ($j = 0; $j < count($userregions); $j++) {

			if (!(in_array($userregions[$j], $dbuserregions))) {
				$userregionfields['user_id'] = $user->uid;
				$userregionfields['region_id'] = $userregions[$j];
				$userregionfields['status'] = 1;
				db_insert('user_region_settings')->fields($userregionfields)->execute();
			} else {
				$userregionfields['status'] = 1;
				db_update('user_region_settings')->fields($userregionfields)->condition('user_id', $user->uid)->condition('region_id', $userregions[$j])->execute();
			}
			$regionindex = array_search($userregions[$j], $dbuserregions);
			if ($regionindex) {
				unset($dbuserregions[$regionindex]);
			}
		}
		$userdefaulttabfields = array();
		if (!empty($usertabpreferences)) {
			if ($postusertabpreferences > 0) {

				$userdefaulttabfields['region_id'] = $postusertabpreferences;
				db_update('user_defaulttab_settings')->fields($userdefaulttabfields)->condition('user_id', $user->uid)->execute();
			}
		} else {
			if ($postusertabpreferences > 0) {
				$userdefaulttabfields['user_id'] = $user->uid;
				$userdefaulttabfields['region_id'] = $postusertabpreferences;

				db_insert('user_defaulttab_settings')->fields($userdefaulttabfields)->execute();
			}
		}
		if (!empty($dbuserregions)) {
			foreach ($dbuserregions as $region_id) {
				$userregionfields['status'] = 0;
				db_update('user_region_settings')->fields($userregionfields)->condition('user_id', $user->uid)->condition('region_id', $region_id)->execute();
			}
		}
		echo "success";
	}


	function getAllRegionsList()
	{
		$status_list = db_query("SELECT region_id,region_name,region_shortname,region_status  from {manage_regions}  ORDER by region_id ASC");
		return $status_list;
	}

	function getuserregions()
	{
		global $user;
		$result = db_query("select vwrurs.region_id from {user_region_settings}  as vwrurs 
		INNER JOIN {manage_regions} as vwrmr on vwrmr.region_id=vwrurs.region_id and vwrmr.region_status=1 where vwrurs.status=1 AND vwrurs.user_id=:uid ORDER BY region_id ASC", array(':uid' => $user->uid));
		$userregions = array();
		while ($row = $result->fetchAssoc()) {
			$userregions[] = $row['region_id'];
		}
		return $userregions;
	}
	function getuserregionsettings()
	{
		global $user;
		$result = db_query("select region_id from {user_region_settings} where user_id=:uid", array(':uid' => $user->uid));
		$userregions = array();
		while ($row = $result->fetchAssoc()) {
			$userregions[$row['region_id']] = $row['region_id'];
		}
		return $userregions;
	}
	function get_user_regions()
	{
		$result = '';
		global $user; 
		$result = db_query("select vwrurs.region_id from {user_region_settings}  as vwrurs 
		INNER JOIN {manage_regions} as vwrmr on vwrmr.region_id=vwrurs.region_id and vwrmr.region_status=1 where vwrurs.status=1 AND vwrurs.user_id=:uid ORDER BY region_id ASC", array(':uid' => $user->uid))->fetchAll();
		return $result;
	}
	function get_all_regions()
	{
		$result = '';
		$result = db_query("SELECT region_id,region_name FROM {manage_regions} WHERE region_status=1 ORDER BY region_id ASC")->fetchAll();
		return $result;
	}
	function getusertabpreference()
	{
		global $user;
		$result = db_query("select vwrurs.region_id from {user_defaulttab_settings}  as vwrurs 
			INNER JOIN {manage_regions} as vwrmr on vwrmr.region_id=vwrurs.region_id and vwrmr.region_status=1 where vwrurs.user_id=:uid ORDER BY region_id ASC", array(':uid' => $user->uid));
		$userdefaulttabpreference = array();
		while ($row = $result->fetchAssoc()) {
			$userdefaulttabpreference[] = $row['region_id'];
		}
		return $userdefaulttabpreference;
	}
	function category_manageregions()
	{
		$action = trim(arg(2));
		global $user;
		if ($action == 'save') {
			$new_region = strip_tags(trim($_POST['new_region']));
			$region_all = explode(',', $new_region);
			$auto_id = '';
			foreach ($region_all as $region) {
				if ($region && $region != '') {
					$region_str = explode(':', $region);
					$region_name = trim($region_str[0]);
					$region_shortname = trim($region_str[1]);
					$region_name_dupl = db_query("SELECT region_name FROM {manage_regions} WHERE region_name = :region_name", array(':region_name' => $region_name))->fetchField();
					$region_shortname_dupl = db_query("SELECT region_shortname FROM {manage_regions} WHERE region_shortname = :region_shortname", array(':region_shortname' => $region_shortname))->fetchField();
					if (trim($region_name_dupl)) {
						echo 'regionname-' . htmlspecialchars($region_name_dupl);
						exit;
					} else if (trim($region_shortname_dupl)) {
						echo 'regionshortname-' . htmlspecialchars($region_shortname_dupl);
						exit;
					}
				}
			}



			foreach ($region_all as $region) {
				if ($region && $region != '') {
					$region_str = explode(':', $region);
					$region_name = trim($region_str[0]);
					$region_shortname = trim($region_str[1]);
					if ($region_name && $region_shortname) {
						$editFields = array();
						$editFields['region_name'] = $region_name;
						$editFields['region_shortname'] = $region_shortname;
						$auto_id = db_insert('manage_regions')->fields($editFields)->execute();
					}
				}
			}
			if (db_affected_rows) {
				echo 'success';
			}
		} else if ($action == 'update') {
			$regionId = strip_tags(trim($_POST['regionId']));

			if ($regionId && is_numeric($regionId)) {
				$changeStatus = (strip_tags(trim($_POST['action'])) == 'deactivate') ? 0 : 1;
				$editFields = array();
				$editFields['region_status'] = $changeStatus;

				if (strip_tags($_POST['action']) == 'deactivate') {
					$countactiveregions = db_query("SELECT count(*) FROM {manage_regions} where region_status = 1")->fetchColumn();
					if ($countactiveregions != 1) {
						db_update('manage_regions')->fields($editFields)->condition('region_id', $regionId)->execute();

						if (db_affected_rows) {
							echo 'success';
						}
					} else {
						echo 'denied';
					}
				} else {
					$currentactiveregions = db_query("SELECT count(*) FROM {manage_regions} where region_status = 1")->fetchColumn();
					if ($currentactiveregions != 4) {
						db_update('manage_regions')->fields($editFields)->condition('region_id', $regionId)->execute();
						if (db_affected_rows) {
							echo 'success';
						}
					} else {
						echo 'maximum';
					}
				}
			}
		} else {
			print theme('category_manage_regions', array('data' => $action));
		}
		exit;
	}

	/********Topic**********/
	function category_topic_actions()
	{
		return theme('topic_display_theme', array('data' => '', 'level' => 'topic'));
	}

	function category_add_hyperlink()
	{
		if (has_page_access('create')) {
			$regions = array();
			$categoryregions = array();
			$regions = getcategoryregions(arg(1));
			$categoryregions = getcategoryregions(arg(1));
			print theme('simple_hyperlink_add_edit_theme', array('action' => 'add', 'level' => 'topic', 'regions' => $regions, 'category_regions' => $categoryregions));
		}
		exit;
	}

	function subcategory_add_hyperlink()
	{
		if (has_page_access('create')) {
			$regions = array();
			$categoryregions = array();
			$regions = getcategoryregions(arg(1));
			$categoryregions = getcategoryregions(arg(1));
			print theme('simple_subcategoryhyperlink_add_edit_theme', array('action' => 'add', 'level' => 'topic', 'regions' => $regions, 'category_regions' => $categoryregions));
		}
		exit;
	}

	function topic_add_hyperlink()
	{
		if (has_page_access('create')) {
			$regions = array();
			$categoryregions = array();
			$regions = getcategoryregions(base64_decode(arg(1)));
			$categoryregions = getcategoryregions(base64_decode(arg(1)));
			print theme('simple_topichyperlink_add_edit_theme', array('action' => 'add', 'level' => 'topic', 'regions' => $regions, 'category_regions' => $categoryregions));
		}
		exit;
	}

	function subtopic_add_hyperlink()
	{
		if (has_page_access('create')) {
			$regions = array();
			$categoryregions = array();
			$regions = getcategoryregions(arg(1));
			$categoryregions = getcategoryregions(arg(1));
			print theme('simple_subtopichyperlink_add_edit_theme', array('action' => 'add', 'level' => 'topic', 'regions' => $regions, 'category_regions' => $categoryregions));
		}
		exit;
	}

	function category_add_topic()
	{
		if (has_page_access('create')) {
			$regions = array();
			$categoryregions = array();
			$regions = getcategoryregions(arg(1));
			$categoryregions = getcategoryregions(arg(1));
			print theme('simple_topic_add_edit_theme', array('action' => 'add', 'level' => 'topic', 'regions' => $regions, 'category_regions' => $categoryregions));
		}
		exit;
	}
	function getismultifile($file_id)
	{
		$deletetheuploadfiles = db_query("select region_id from {upload_documents_regions} where file_id in (:file_id) and status =1 ", array(':file_id' => $file_id));
		$fileregionsids = array();
		while ($row = $deletetheuploadfiles->fetchAssoc()) {

			$fileregionsids[$row['region_id']] = $row['region_id'];
		}
		return $fileregionsids;
	}

	function getismultihyperlink($hyperlink_id)
	{
		$deletetheuploadfiles = db_query("select region_id from {hyperlinks_regions} where hyperlink_id in (:hyperlink_id)
		and status =1", array(':hyperlink_id' => $hyperlink_id));
		$fileregionsids = array();
		while ($row = $deletetheuploadfiles->fetchAssoc()) {

			$fileregionsids[$row['region_id']] = $row['region_id'];
		}
		return $fileregionsids;
	}
	function category_edit_topic()
	{
		if (has_page_access('edit')) {
			$regions = array();
			$categoryregions = array();
			$regions = getcategoryregions(arg(1));
			$categoryregions = getsubcategoryregions(arg(4));
			print theme('simple_topic_add_edit_theme', array('action' => 'edit', 'level' => 'topic', 'regions' => $regions, 'category_regions' => $categoryregions));
		}
		exit;
	}
	function category_save_topic()
	{
		global $user;
		$userid = $user->uid;
		$timestamp = time();
		$topic_name = strip_tags(trim($_POST['topic_name']));
		$topic_desc = preg_replace('#<script(.*?)>(.*?)</script>#is', '', $_POST['topic_desc']);
		$topic_multi_desc = explode("~~", $topic_desc);
		$topic_file = strip_tags($_POST['topic_file']);
		$desc_title = strip_tags(trim($_POST['desc_title']));
		$shortname = strip_tags(trim($_POST['shortname']));
		$teaser = strip_tags(trim($_POST['teaser']));
		$expiry_date = strip_tags(strtotime($_POST['expiry_date']));
		$regions = strip_tags($_POST['regions']);
		$region_process = explode(",", $regions);

		$file_id = strip_tags($_POST['file_id']); //fileID return from s3 bucket upload API

		$topic_status = 1;
		$topic_id = 0;
		if (arg(4) && is_numeric(arg(4))) {
			$topic_id = arg(4);
		}
		$cat_id = 0;
		if (arg(1) && is_numeric(arg(1))) {
			$cat_id = arg(1);
		}
		if (!is_cat_topic_active($cat_id, 'category')) {
			echo 'deleted';
			exit;
		}
		$editFields = array();
		if (
			$topic_name && $topic_multi_desc[0] && $teaser && $shortname && $desc_title && $expiry_date && $topic_id && $cat_id
			&& has_page_access('edit')
		) {
			if (!is_cat_topic_active($topic_id, 'topic')) {
				echo 'deleted';
				exit;
			}


			$resultdel = db_query("delete from {subcategory_multi_description} where subcategory_id=:topic_id", array(':topic_id' => $topic_id));
			for ($j = 0; $j < count($topic_multi_desc); $j++) {
				$descregionFields = array();
				$descregionFields['subcategory_id'] = $topic_id;
				$descregionFields['region_id'] = $region_process[$j];
				$descregionFields['description'] = $topic_multi_desc[$j];
				db_insert('subcategory_multi_description')->fields($descregionFields)->execute();
			}

			if ($topic_file) {
				//get the scan result upload v2
				$scanned_result = get_scanned_file($file_id);// call the metadefender result API
				$scanned_status = ($scanned_result['status'] == 0 ? 'SCAN_COMPLETED' :  (($scanned_result['status'] == 255 || $scanned_result['status'] == 254) ? "In Progress" : "SCAN_FAILED"));
				$file = ['file_name'=> $userid.'_'.basename($topic_file),'scan_status' => $scanned_status,'submission_type'=>'topic','file_id'=>$file_id];
				if( $scanned_result['status'] == 0 ) {
					//No threat detected
					$moved = move_file_to_vwr_server($file, $scanned_result, "uploadv2");
					if($moved != 'Copy success!') {
						echo "fail to move to server";
						exit;
					} 
				} else if($scanned_result['status'] == 255  || $scanned_result['status'] == 254){
					//scan in progress no action needed
				} else{
					echo "Status : " . $scanned_result['status'] . " Message : " . $scanned_result['message'];
					exit;
				}
				$editFields['topic_image'] = $userid . '_' . $topic_file;
				//we need to save the file_id received from fileupload API
				$editFields['scan_file_id'] = $file_id;
				$editFields['scan_file_status'] = $scanned_status;

				//scanfields
				$scanFields['file_id'] = $file_id;
				$scanFields['file_name'] = $userid . '_' . $topic_file;
				$scanFields['submission_type'] = 'topic';
				$scanFields['created_date'] = time();
				$scanFields['scan_status'] = $scanned_status;
				$file_auto_id = db_insert('file_scan_details')->fields($scanFields)->execute();
			}
			$editFields['topic_name'] = $topic_name;
			$editFields['short_name'] = $shortname;
			$editFields['teaser_text'] = $teaser;
			$editFields['description_title'] = $desc_title;
			$editFields['topic_description'] = $topic_multi_desc[0];
			$editFields['expiry_date'] = $expiry_date;
			$editFields['topic_status'] = $topic_status;
			$editFields['modified_by'] = $userid;
			$editFields['modified_date'] = $timestamp;
			if ($_POST["display_options"] != "") {
				$editFields['display_options'] = addslashes(strip_tags(trim($_POST["display_options"])));
			}

			

			db_update('topic')->fields($editFields)->condition('topic_id', $topic_id)->execute();


			$newsubcatusermapping = array();
			$subcatexitingregionsarray = array();
			$subcategoryuseraccessmapping = db_query("select * from {content_regions} where category_id=$cat_id and content_id in (:topic_id) and region_id in (:regions) and status=1 and content_type=1", array(':topic_id' => $topic_id, ':regions' => $regions));
			if ($subcategoryuseraccessmapping) {
				foreach ($subcategoryuseraccessmapping as $subcatuserreg) {
					$subcatexitingregionsarray[] = $subcatuserreg->region_id;
				}
			}
			if (!empty($subcatexitingregionsarray)) {
				$resultsubcatnewregions = array_diff($region_process, $subcatexitingregionsarray);
				$subcatexistingregionlist = implode(',', $subcatexitingregionsarray);
				$selsubcategoryuseraccessmapping = db_query("select * from {category_useraccess_mapping} where category_id=$cat_id and topic_id in (:topic_id) and region_id in (:subcatexistingregionlist)", array(':topic_id' => $topic_id, ':subcatexistingregionlist' => $subcatexistingregionlist));

				foreach ($resultsubcatnewregions as $index => $region_id) {

					foreach ($selsubcategoryuseraccessmapping as $subcatuserreg) {
						$newsubcatusermapping = array();
						$newsubcatusermapping['topic_id'] = $subcatuserreg->topic_id;
						$newsubcatusermapping['category_id'] = $subcatuserreg->category_id;
						$newsubcatusermapping['vas_id'] = $subcatuserreg->vas_id;
						$newsubcatusermapping['supplier_org_id'] = $subcatuserreg->supplier_org_id;
						$newsubcatusermapping['mapping'] = $subcatuserreg->mapping;
						$newsubcatusermapping['region_id'] = $region_id;
						$isglobal = 0;
						$isglobal = get_global_supplier($subcatuserreg->supplier_org_id, 1);
						if ($isglobal > 1) {
							db_insert('category_useraccess_mapping')->fields($newsubcatusermapping)->execute();
						}
					}
				}
			}

			if (count($region_process) > 0) {
				$resultregionsset = array();
				$resultregionsset = db_query("SELECT internal_id,region_id FROM 
				{content_regions} where category_id = :cat_id and content_id = :topic_id and content_type=1", array(':cat_id' => $cat_id, ':topic_id' => $topic_id))->fetchAllKeyed(1, 0);
				$existingregions = array_keys($resultregionsset);
				foreach ($region_process as $reginindex => $region_id) {
					$resultset = array();
					$regionFields = array();
					unset($resultregionsset[$region_id]);
					$resultset = db_query("SELECT internal_id FROM {content_regions} where 
					region_id = :region_id && category_id = :cat_id and content_id = :topic_id and content_type=1", array(':region_id' => $region_id, ':cat_id' => $cat_id, ':topic_id' => $topic_id))->fetchColumn();
					if (!empty($resultset)) {
						$regionFields = array();
						$regionFields['status'] = 1;
						db_update('content_regions')->fields($regionFields)->condition('category_id', $cat_id)->condition('region_id', $region_id)->condition('content_id', $topic_id)->execute();
					} else {
						$regionFields['region_id'] = $region_id;
						$regionFields['category_id'] = $cat_id;
						$regionFields['content_id'] = $topic_id;
						$regionFields['status'] = 1;
						$regionFields['content_type'] = 1;
						db_insert('content_regions')->fields($regionFields)->execute();
					}
				}

				if (count($resultregionsset) > 0) {
					foreach ($resultregionsset as $region_id => $category_region_id) {
						$regionFields = array();
						$regionFields['status'] = 0;
						db_update('content_regions')->fields($regionFields)->condition('category_id', $cat_id)->condition('region_id', $region_id)->condition('content_id', $topic_id)->execute();
					}
				}

				$resultontentreg = db_query("SELECT internal_id,region_id FROM 
				{content_regions} where category_id=:cat_id and content_id=:topic_id and content_type=1 and status=1 ", array(':cat_id' => $cat_id, ':topic_id' => $topic_id))->fetchAllKeyed(1, 0);

				$existingprocessregions = array_keys($resultontentreg);

				if (count($existingprocessregions) == 1) {
					foreach ($existingprocessregions as $region_id) {
						db_query("DELETE FROM {category_useraccess_mapping} where topic_id in (:topic_id) and category_id in (:cat_id) and region_id not in (:region_id)", array(':topic_id' => $topic_id, ':cat_id' => $cat_id, ':region_id' => $region_id));
					}
				}
			}
			//Removing the Upload documents when the subcategoey is disassociated
			$selectfiles = db_query("select file_id from {upload_documents} where topic_id in (:topic_id) and cat_id in (:cat_id) and sub_topic_id=0 and internal_topic_id=0", array(':topic_id' => $topic_id, ':cat_id' => $cat_id));
			if ($selectfiles) {
				foreach ($selectfiles as $fl) {
					db_query("update {upload_documents_regions} set status=0 where file_id in (:file_id) and region_id not in (:regions)", array(':file_id' => $fl->file_id, ':regions' => $regions));
				}
			}

			//Removing the Hyperlinks when the subcategoey is disassociated
			$hyperlinkssubcat = db_query("select hyperlink_id from {hyperlinks} where topic_id in (:topic_id) and cat_id in (:cat_id) and sub_topic_id=0 and internal_topic_id=0", array(':topic_id' => $topic_id, ':cat_id' => $cat_id));
			if ($hyperlinkssubcat) {
				foreach ($hyperlinkssubcat as $linksubcat) {
					db_query("update {hyperlinks_regions} set status=0 where hyperlink_id in (:hyperlink_id) and region_id not in (:regions)", array(':hyperlink_id' => $linksubcat->hyperlink_id, ':regions' => $regions));
				}
			}

			//Removing the Dropbox when the subcategoey is disassociated
			$selectdropbox = db_query("select dbox_id from {dropbox_category_mapping} where cat_id in (:cat_id) and topic_id in (:topic_id) and region_id not in (:regions)", array(':cat_id' => $cat_id, ':topic_id' => $topic_id, ':regions' => $regions));
			if ($selectdropbox) {
				foreach ($selectdropbox as $sdbox) {
					db_query("update {dropbox_regions} set status=0 where dropbox_id in (:dbox_id) and region_id not in (:regions)", array(':dbox_id' => $sdbox->dbox_id, ':regions' => $regions));
				}
				db_query("DELETE from {dropbox_category_mapping} where cat_id in (:cat_id) and topic_id in (:topic_id) and region_id not in (:regions)", array(':cat_id' => $cat_id, ':topic_id' => $topic_id, ':regions' => $regions));
			}

			//Removing the User Access when the subcategory is disassociated			
			$selectsubcatuseraccess = db_query("select topic_id  from {category_useraccess} where topic_id  in (:topic_id) and category_id in (:cat_id)", array(':topic_id' => $topic_id, ':cat_id' => $cat_id));
			if ($selectsubcatuseraccess) {
				foreach ($selectsubcatuseraccess as $ssubcatuaccess) {
					db_query("DELETE FROM {category_useraccess} where topic_id in (:topic_id) and region_id not in (:regions) and category_id in (:cat_id)", array(':topic_id' => $ssubcatuaccess->topic_id, ':regions' => $regions, ':cat_id' => $cat_id));
				}
			}


			$topicsgroup = '';
			$topics = db_query("SELECT topic_id, topic_name, short_name, teaser_text, 
				topic_image, expiry_date FROM {topic} where category_id = :cat_id && 
				parent_topic_id in (:topic_id) && topic_status=1 ORDER BY topic_name ASC", array(':cat_id' => $cat_id, ':topic_id' => $topic_id));
			if ($topics) {
				foreach ($topics as $t) {
					$topicsgroup .= $t->topic_id . ",";
					db_query("DELETE from {topic_multi_description} where topic_id in (:topic_id) and region_id not in (:regions)", array(':topic_id' => $t->topic_id, ':regions' => $regions));
					db_query("update {content_regions} set status=0 where content_id in (:topic_id) and content_type=2 and region_id not in (:regions) and category_id in (:cat_id)", array(':topic_id' => $t->topic_id, ':regions' => $regions, ':cat_id' => $cat_id));
					$count = db_query("select * from {content_regions} where category_id in (:cat_id) and content_id in (:topic_id) and status=1 and content_type=2", array(':cat_id' => $cat_id, ':topic_id' => $t->topic_id));
					if ($count->rowCount() == 0) {
						db_query("update {topic} set topic_status=0 where topic_id in (:topic_id)", array(':topic_id' => $t->topic_id));
					}

					//Removing the Upload documents when the subcategory is disassociated
					$selectfiles = db_query("select file_id from {upload_documents} where topic_id in (:topic_id) and cat_id in (:cat_id) and sub_topic_id in (:sub_topic_id) and internal_topic_id=0", array(':topic_id' => $topic_id, ':cat_id' => $cat_id, ':sub_topic_id' => $t->topic_id));
					if ($selectfiles) {
						foreach ($selectfiles as $fl) {
							db_query("update {upload_documents_regions} set status=0 where file_id in (:file_id) and region_id not in (:regions)", array(':file_id' => $fl->file_id, ':regions' => $regions));
						}
					}

					//Removing the Hyperlinks when the subcategoey is disassociated
					$hyperlinkstopic = db_query("select hyperlink_id from {hyperlinks} where topic_id in (:topic_id) and cat_id in (:cat_id) and sub_topic_id in (:sub_topic_id) and internal_topic_id=0", array(':topic_id' => $topic_id, ':cat_id' => $cat_id, ':sub_topic_id' => $t->topic_id));
					if ($hyperlinkstopic) {
						foreach ($hyperlinkstopic as $linktop) {
							db_query("update {hyperlinks_regions} set status=0 where hyperlink_id in (:hyperlink_id) and region_id not in (:regions)", array(':hyperlink_id' => $linktop->hyperlink_id, ':regions' => $regions));
						}
					}

					//Removing the Dropbox when the topic is disassociated
					$selectdropbox = db_query("select dbox_id from {dropbox_category_mapping} where cat_id in (:cat_id) and topic_id in (:topic_id) and region_id not in (:regions)", array(':cat_id' => $cat_id, ':topic_id' => $t->topic_id, ':regions' => $regions));
					if ($selectdropbox) {
						foreach ($selectdropbox as $sdbox) {
							db_query("update {dropbox_regions} set status=0 where dropbox_id in (:dbox_id) and region_id not in (:regions)", array(':dbox_id' => $sdbox->dbox_id, ':regions' => $regions));
						}
						db_query("DELETE from {dropbox_category_mapping} where cat_id in (:cat_id) and topic_id in (:topic_id) and region_id not in (:regions)", array(':cat_id' => $cat_id, ':topic_id' => $t->topic_id, ':regions' => $regions));
					}


					//Removing the User Access when the Topic is disassociated			
					$selecttopicuseraccess = db_query("select topic_id  from {category_useraccess} where topic_id  in (:topic_id) and category_id in (:cat_id)", array(':topic_id' => $t->topic_id, ':cat_id' => $cat_id));
					if ($selecttopicuseraccess) {
						foreach ($selecttopicuseraccess as $stopicuaccess) {
							db_query("DELETE FROM {category_useraccess} where topic_id in (:topic_id) and category_id in (:cat_id) and region_id not in (:regions)", array(':topic_id' => $stopicuaccess->topic_id, ':cat_id' => $cat_id, ':regions' => $regions));
						}
					}
				}
			}

			if ($topicsgroup) {
				$topicsgroupids = substr($topicsgroup, 0, strlen($topicsgroup) - 1);
				$subtopicsundersubcat = db_query("SELECT topic_id, topic_name, short_name, teaser_text, 
				topic_image, expiry_date FROM {topic} where category_id = $cat_id && 
				parent_topic_id in (:topicsgroupids)&& topic_status=1 ORDER BY topic_name ASC", array(':topicsgroupids' => $topicsgroupids));

				if ($subtopicsundersubcat) {
					foreach ($subtopicsundersubcat as $st) {
						db_query("DELETE from {subtopic_multi_description} where subtopic_id in (:topic_id) and region_id not in (:regions)", array(':topic_id' => $st->topic_id, ':regions' => $regions));
						db_query("update {content_regions} set status=0 where content_id in (:topic_id) and content_type=3 and region_id not in (:regions) and category_id in (:cat_id)", array(':topic_id' => $st->topic_id, ':regions' => $regions, ':cat_id' => $cat_id));
						$count = db_query("select * from {content_regions} where category_id in (:cat_id) and content_id in (:topic_id) and status=1 and content_type=3", array(':cat_id' => $cat_id, ':topic_id' => $st->topic_id));
						if ($count->rowCount() == 0) {
							db_query("update {topic} set topic_status=0 where topic_id in (:topic_id)", array(':topic_id' => $st->topic_id));
						}

						//Removing the Upload documents when the subtopic is disassociated
						$selectfiles = db_query("select file_id from {upload_documents} where topic_id in (:topic_id) and cat_id in (:cat_id) and sub_topic_id in (:topicsgroupids) and internal_topic_id in (:internal_topic_id)", array(':topic_id' => $topic_id, ':cat_id' => $cat_id, ':topicsgroupids' => $topicsgroupids, ':internal_topic_id' => $st->topic_id));
						if ($selectfiles) {
							foreach ($selectfiles as $fl) {
								db_query("update {upload_documents_regions} set status=0 where file_id in (:file_id) and region_id not in (:regions)", array(':file_id' => $fl->file_id, ':regions' => $regions));
							}
						}

						//Removing the Hyperlinks when the subcategoey is disassociated
						$hyperlinkssubtopic = db_query("select hyperlink_id from {hyperlinks} where topic_id in (:topic_id) and cat_id in (:cat_id) and sub_topic_id in (:topicsgroupids) and internal_topic_id in (:internal_topic_id)", array(':topic_id' => $topic_id, ':cat_id' => $cat_id, ':topicsgroupids' => $topicsgroupids, ':internal_topic_id' => $st->topic_id));
						if ($hyperlinkssubtopic) {
							foreach ($hyperlinkssubtopic as $linksubtop) {
								db_query("update {hyperlinks_regions} set status=0 where hyperlink_id in (:hyperlink_id) and region_id not in (:regions)", array(':hyperlink_id' => $linksubtop->hyperlink_id, ':regions' => $regions));
							}
						}

						//Removing the Dropbox when the subtopic is disassociated
						$selectdropbox = db_query("select dbox_id from {dropbox_category_mapping} where cat_id in (:cat_id) and topic_id in (:topic_id) and region_id not in (:regions)", array(':cat_id' => $cat_id, ':topic_id' => $st->topic_id, ':regions' => $regions));
						if ($selectdropbox) {
							foreach ($selectdropbox as $sdbox) {
								db_query("update {dropbox_regions} set status=0 where dropbox_id in (:dbox_id) and region_id not in (:regions)", array(':dbox_id' => $sdbox->dbox_id, ':regions' => $regions));
							}
							db_query("DELETE from {dropbox_category_mapping} where cat_id in (:cat_id) and topic_id in (:st->topic_id) and region_id not in (:regions)", array(':cat_id' => $cat_id, ':topic_id' => $st->topic_id, ':regions' => $regions));
						}


						//Removing the User Access when the subtopic is disassociated			
						$selectsubtopicuseraccess = db_query("select topic_id  from {category_useraccess} where topic_id  in (:topic_id) and category_id in (:cat_id)", array(':topic_id' => $st->topic_id, ':cat_id' => $cat_id));
						if ($selectsubtopicuseraccess) {
							foreach ($selectsubtopicuseraccess as $ssubtopicuaccess) {
								db_query("DELETE FROM {category_useraccess} where topic_id in (:topic_id) and category_id in (:cat_id) and region_id not in (:regions)", array(':topic_id' => $ssubtopicuaccess->topic_id, ':cat_id' => $cat_id, ':regions' => $regions));
							}
						}
					}
				}
			}
		} else if ($topic_name && $topic_multi_desc[0] && $teaser && $shortname && $topic_file && $topic_status && $desc_title && $expiry_date && $cat_id && has_page_access('create')) {
			$editFields['topic_name'] = $topic_name;
			$editFields['short_name'] = $shortname;
			$editFields['teaser_text'] = $teaser;
			$editFields['description_title'] = $desc_title;
			$editFields['topic_description'] = $topic_multi_desc[0];
			$editFields['expiry_date'] = $expiry_date;
			$editFields['topic_image'] = $userid . '_' . $topic_file;
			$editFields['topic_status'] = $topic_status;
			$editFields['category_id'] = $cat_id;
			$editFields['created_by'] = $userid;
			$editFields['created_date'] = $timestamp;
			//get the scan result upload v2
			$scanned_result = get_scanned_file($file_id);// call the metadefender result API
			$scanned_status = ($scanned_result['status'] == 0 ? 'SCAN_COMPLETED' :  (($scanned_result['status'] == 255 || $scanned_result['status'] == 254) ? "In Progress" : "SCAN_FAILED"));
			$file = ['file_name'=> $userid.'_'.basename($topic_file),'scan_status' => $scanned_status,'submission_type'=>'topic','file_id'=>$file_id];
			if( $scanned_result['status'] == 0 ) {
				//No threat detected
				$moved = move_file_to_vwr_server($file, $scanned_result, "uploadv2");
				if($moved != 'Copy success!') {
					echo "fail to move to server";
					exit;
				} 
			}else if($scanned_result['status'] == 255  || $scanned_result['status'] == 254){
				//scan in progress no action needed
			} else{
				echo "Status : " . $scanned_result['status'] . " Message : " . $scanned_result['message'];
				exit;
			}
			//we need to save the file_id received from fileupload API
			$editFields['scan_file_id'] = $file_id;
			$editFields['scan_file_status'] = $scanned_status;

			//scanfields
			$scanFields['file_id'] = $file_id;
			$scanFields['file_name'] = $userid . '_' . $topic_file;
			$scanFields['submission_type'] = 'topic';
			$scanFields['created_date'] = time();
			$scanFields['scan_status'] = $scanned_status;
			$file_auto_id = db_insert('file_scan_details')->fields($scanFields)->execute();

			$auto_id = db_insert('topic')->fields($editFields)->execute();

			if ($auto_id > 0) {

				foreach ($region_process as $r) {
					$subregionFields = array();
					$subregionFields['region_id'] = $r;
					$subregionFields['category_id'] = $cat_id;
					$subregionFields['content_id'] = $auto_id;
					$subregionFields['status'] = 1;
					$subregionFields['content_type'] = 1;
					db_insert('content_regions')->fields($subregionFields)->execute();
				}

				for ($j = 0; $j < count($topic_multi_desc); $j++) {
					$descregionFields = array();
					$descregionFields['region_id'] = $region_process[$j];
					$descregionFields['subcategory_id'] = $auto_id;
					$descregionFields['description'] = $topic_multi_desc[$j];
					db_insert('subcategory_multi_description')->fields($descregionFields)->execute();
				}
			}
		} else if (!$expiry_date) {
			echo 'expdate';
			exit;
		}
		if (db_affected_rows) {
			echo "success";
		} else {
			echo "fail";
		}
		exit;
	}




	function category_delete_topic()
	{
		global $user;
		$userid = $user->uid;
		$timestamp = time();
		$topic_id = 0;
		$count = '';
		$category_id = arg(1);
		if (arg(4) && is_numeric(arg(4))) {
			$topic_id = arg(4);
		}
		$topic_status = 0;
		$currentregion = $_COOKIE['currentregiontab'];
		if ($topic_id && has_page_access('edit')) {
			$editFields = array();
			$editFields['topic_status'] = $topic_status;
			$editFields['modified_by'] = $userid;
			$editFields['deleted'] = $timestamp;
			$selectfiles = db_query("select file_id from {upload_documents} where topic_id in (:topic_id) and cat_id in (:category_id) and sub_topic_id=0 and internal_topic_id=0", array(':topic_id' => $topic_id, ':category_id' => $category_id));
			if ($selectfiles) {
				foreach ($selectfiles as $fl) {
					db_query("update {upload_documents_regions} set status=0 where file_id in (:file_id) and region_id=:region_id", array(':file_id' => $fl->file_id, ':region_id' => $currentregion));
				}
			}

			$hyperlinksubcat = db_query("select hyperlink_id from {hyperlinks} where topic_id in (:topic_id) and cat_id in (:category_id) and sub_topic_id=0 and internal_topic_id=0", array(':topic_id' => $topic_id, ':category_id' => $category_id));
			if ($hyperlinksubcat) {
				foreach ($hyperlinksubcat as $flsubcat) {
					db_query("update {hyperlinks_regions} set status=0 where hyperlink_id in (:hyperlink_id) and region_id=:region_id", array(':hyperlink_id' => $flsubcat->hyperlink_id, ':region_id' => $currentregion));
				}
			}

			$selectdropbox = db_query("select dbox_id from {dropbox_category_mapping} where cat_id in (:category_id) and topic_id in (:topic_id) and region_id=:region_id", array(':category_id' => $category_id, ':topic_id' => $topic_id, ':region_id' => $currentregion));
			if ($selectdropbox) {
				foreach ($selectdropbox as $sdbox) {
					db_query("update {dropbox_regions} set status=0 where dropbox_id in (:dbox_id) and region_id=:region_id", array(':dbox_id' => $sdbox->dbox_id, ':region_id' => $currentregion));
				}
				db_query("DELETE FROM {dropbox_category_mapping} where cat_id in (:category_id) and topic_id in (:topic_id) and region_id=:region_id", array(':category_id' => $category_id, ':topic_id' => $topic_id, ':region_id' => $currentregion));
			}

			db_query("DELETE FROM {category_useraccess_mapping}  WHERE topic_id=:topic_id and category_id=:category_id and region_id=:region_id", array(':topic_id' => $topic_id, ':category_id' => $category_id, ':region_id' => $currentregion));
			db_query("DELETE FROM {category_useraccess} WHERE topic_id=:topic_id and category_id=:category_id and region_id=:region_id", array(':topic_id' => $topic_id, ':category_id' => $category_id, ':region_id' => $currentregion));

			db_query("update {content_regions} set status=0 where content_id=:topic_id and content_type=1 and region_id=:region_id", array(':topic_id' => $topic_id, ':region_id' => $currentregion));
			$currentdeactivation = db_query("select * from {content_regions} where (content_id=:topic_id and status=1 and content_type=1)", array(':topic_id' => $topic_id));

			$selectfiles = db_query("select file_id from {upload_documents} where cat_id in (:category_id) and topic_id in (:topic_id) ", array(':category_id' => $category_id, ':topic_id' => $topic_id));
			if ($selectfiles) {
				foreach ($selectfiles as $fl) {
					db_query("update {upload_documents_regions} set status=0 where file_id in (:file_id) and region_id=:region_id", array(':file_id' => $fl->file_id, ':region_id' => $currentregion));
					$multifile = array();
					$multifile = getismultifile($fl->file_id);
					if (empty($multifile)) {
						db_query("update {upload_documents} set file_status=0 where file_id in (:file_id)", array(':file_id' => $fl->file_id,));
					}
				}
			}

			$selecthyperlinkfiles = db_query("select hyperlink_id from {hyperlinks} where cat_id in (:category_id) and topic_id in (:topic_id) ", array(':category_id' => $category_id, ':topic_id' => $topic_id));
			if ($selecthyperlinkfiles) {
				foreach ($selecthyperlinkfiles as $flhyp) {
					db_query("update {hyperlinks_regions} set status=0 where hyperlink_id in (:hyperlink_id) and region_id=:region_id", array(':hyperlink_id' => $flhyp->hyperlink_id, ':region_id' => $currentregion));
					$multifilehyperlinks = array();
					$multifilehyperlinks = getismultihyperlink($flhyp->hyperlink_id);
					if (empty($multifilehyperlinks)) {
						db_query("update {hyperlinks_regions} set file_status=0 where file_id in (:hyperlink_id)", array(':hyperlink_id' => $flhyp->hyperlink_id));
					}
				}
			}


			if ($currentdeactivation->rowCount() == 0) {

				$seldropbox_catmapping = db_query("SELECT * FROM {dropbox_category_mapping} WHERE cat_id=:category_id and topic_id in (:topic_id) and region_id=:region_id", array(':category_id' => $category_id, ':topic_id' => $topic_id, ':region_id' => $currentregion));
				if ($seldropbox_catmapping) {
					db_query("DELETE FROM {dropbox_category_mapping} WHERE cat_id=:category_id and topic_id in (:topic_id) and region_id=:region_id", array(':category_id' => $category_id, ':topic_id' => $topic_id, ':region_id' => $currentregion));
				}

				db_update('topic')->fields($editFields)->condition('topic_id', $topic_id)->execute();
				db_update('topic')->fields($editFields)->condition('parent_topic_id', $topic_id)->execute();

				$selsubcategories = db_query("select content_id from {content_regions} where category_id=:category_id and content_id=:topic_id and content_type=1", array(':category_id' => $category_id, ':topic_id' => $topic_id));
				if ($selsubcategories) {
					foreach ($selsubcategories as $selsubcat) {
						db_query("delete from {subcategory_multi_description} where subcategory_id=:subcategory_id and region_id=:region_id", array(':subcategory_id' => $selsubcat->content_id, ':region_id' => $currentregion));
					}
				}
			} else {
				$topics = db_query("SELECT topic_id FROM vwr_topic WHERE parent_topic_id IN 
				(SELECT topic_id FROM vwr_topic WHERE parent_topic_id=0 AND topic_id=:top_id) 
				UNION
				SELECT topic_id FROM vwr_topic WHERE parent_topic_id IN
				(SELECT topic_id FROM vwr_topic WHERE parent_topic_id IN 
				(SELECT topic_id FROM vwr_topic WHERE parent_topic_id=0 AND topic_id=:topic_id))", array(':top_id' => $topic_id, ':topic_id' => $topic_id));


				$selsubcategories = db_query("select content_id from {content_regions} where category_id=:category_id and content_id=:topic_id and content_type=1", array(':category_id' => $category_id, ':topic_id' => $topic_id));
				if ($selsubcategories) {
					foreach ($selsubcategories as $selsubcat) {
						db_query("delete from {subcategory_multi_description} where subcategory_id=:subcategory_id and region_id=:region_id", array(':subcategory_id' => $selsubcat->content_id, ':region_id' => $currentregion));
					}
				}

				if ($topics) {




					foreach ($topics as $t) {
						db_query("update {content_regions} set status=0 where content_id=:content_id and region_id=:region_id ", array(':content_id' => $t->topic_id, ':region_id' => $currentregion));

						$seldropbox_catmapping = db_query("SELECT * FROM {dropbox_category_mapping} WHERE cat_id=:cat_id and topic_id in (:topic_id) and region_id=:region_id", array(':cat_id' => $category_id, ':topic_id' => $t->topic_id, ':region_id' => $currentregion));
						if ($seldropbox_catmapping) {
							db_query("DELETE FROM {dropbox_category_mapping} WHERE cat_id=:cat_id and topic_id in (:topic_id) and region_id=:region_id", array(':cat_id' => $category_id, ':topic_id' => $t->topic_id, ':region_id' => $currentregion));
						}
						$seltopics = db_query("select topic_id from {topic_multi_description} where topic_id=:topic_id", array(':topic_id' => $t->topic_id));
						if ($seltopics) {
							foreach ($seltopics as $seltop) {
								db_query("delete from {topic_multi_description} where topic_id=:topic_id and region_id=:region_id", array(':topic_id' => $seltop->topic_id, ':region_id' => $currentregion));
							}
						}

						$selsubtopics = db_query("select subtopic_id 	from {subtopic_multi_description} where subtopic_id=:subtopic_id", array(':subtopic_id' => $t->topic_id));
						if ($selsubtopics) {
							foreach ($selsubtopics as $selsubtop) {
								db_query("delete from {subtopic_multi_description} where subtopic_id=:subtopic_id and region_id=:region_id", array(':subtopic_id' => $selsubtop->subtopic_id, ':region_id' => $currentregion));
							}
						}
					}
				}
			}
		}
		if (db_affected_rows) {

			echo "success";
		} else {
			echo "fail";
		}
		exit;
	}

	function category_upload_topic()
	{
		// Applied server side validation of file here..
		$valid_file_type = array(
			'image/jpeg',
			'image/gif',
			'image/png',
			'image/bmp'
		);
		$upTop = $_FILES['topicfile'];
		$duplicateFileCnt =	db_query("select count(*) from {file_scan_details} where file_name = :fname and scan_status = 'Uploaded_to_s3'", [':fname' => $_FILES['topicfile']["name"]])->fetchField();
		if($duplicateFileCnt == 0){
			$response  = validate_file($upTop, $valid_file_type);

			$error_response = [
				'Error in file upload',
				'Upload jpg, gif, png, bmp format images only',
				'Image size should be less than 500MB',
				'S3BucketUpload error',
				'MetadefenderAPI error',
				'Curl error'
			];

			if(!in_array($response["msg"],$error_response)) {
				$scanFields['file_id'] =  $response['msg'];
				$scanFields['file_name'] = $_FILES['topicfile']["name"];
				$scanFields['scan_status'] = 'Uploaded_to_s3';				
				db_insert('file_scan_details')->fields($scanFields)->execute();	
				echo json_encode(['file_name' => $_FILES['topicfile']["name"] , 'message' => $response['msg']]);
			} else {
				$response_message = ($response["statusCode"] != '' ? " Statuscode : ". $response['statusCode'] : "");
				echo json_encode(['file_name' => '', 'message' => $response['msg'] . $response_message]);
			}
		}else{
			echo json_encode(['file_name' => '' , 'message' => 'Duplicate files found,please choose other files']);
		}
	}


	/*********Sub-Topic**********/
	function category_subtopic_actions()
	{
		return theme('subtopic_display_theme', array('data' => '', 'level' => 'subtopic'));
	}

	function category_add_subtopic()
	{
		if (has_page_access('create')) {
			$regions = array();
			$categoryregions = array();
			$regions = getsubcategoryregions(base64_decode(arg(3)));
			$categoryregions = getsubcategoryregions(base64_decode(arg(3)));
			print theme('simple_subtopic_add_edit_theme', array('action' => 'add', 'level' => 'subtopic', 'regions' => $regions, 'category_regions' => $categoryregions));
		}
		exit;
	}

	function category_edit_subtopic()
	{
		if (has_page_access('edit')) {
			$regions = array();
			$categoryregions = array();
			$regions = getsubcategoryregions(arg(3));
			$categoryregions = gettopicregions(arg(6));
			print theme('simple_subtopic_add_edit_theme', array('action' => 'edit', 'level' => 'subtopic', 'regions' => $regions, 'category_regions' => $categoryregions));
		}
		exit;
	}

	function category_save_subtopic()
	{
		global $user;
		$userid = $user->uid;
		$timestamp = time();
		$file_id = strip_tags($_POST['file_id']); //fileID return from s3 bucket upload API
		$topic_name = strip_tags($_POST['topic_name']);


		$topic_desc = preg_replace('#<script(.*?)>(.*?)</script>#is', '', $_POST['topic_desc']);
		$topic_multi_desc = explode("~~", $topic_desc);

		$topic_file = strip_tags($_POST['topic_file']);
		$desc_title = strip_tags($_POST['desc_title']);
		$shortname = strip_tags(trim($_POST['shortname']));
		$teaser = strip_tags(trim($_POST['teaser']));
		$regions = strip_tags($_POST['regions']);
		$region_process = explode(",", $regions);
		$expiry_date = strip_tags(strtotime($_POST['expiry_date']));
		$topic_status = 1;
		$parent_id = $topic_id = $cat_id = 0;
		if (arg(6) && is_numeric(arg(6))) {
			$topic_id = arg(6);
		}
		if (arg(1) && is_numeric(arg(1))) {
			$cat_id = arg(1);
		}
		if (arg(3) && is_numeric(arg(3))) {
			$parent_id = arg(3);
		}
		if (!is_cat_topic_active($cat_id, 'category') || !is_cat_topic_active($parent_id, 'topic')) {
			echo 'deleted';
			exit;
		}
		$editFields = array();
		if ($topic_id && $topic_name && $shortname && $teaser && $topic_multi_desc[0] && $desc_title && $expiry_date && $parent_id && has_page_access('edit')) {
			if (!is_cat_topic_active($topic_id, 'topic')) {
				echo 'deleted';
				exit;
			}

			$resultdel = db_query("delete from {topic_multi_description} where topic_id=:topic_id", array(':topic_id' => $topic_id));
			for ($j = 0; $j < count($topic_multi_desc); $j++) {
				$descregionFields = array();
				$descregionFields['region_id'] = $region_process[$j];
				$descregionFields['topic_id'] = $topic_id;
				$descregionFields['description'] = $topic_multi_desc[$j];
				db_insert('topic_multi_description')->fields($descregionFields)->execute();
			}

			if ($topic_file) {
				//get the scan result upload v2
				$scanned_result = get_scanned_file($file_id);// call the metadefender result API
				$scanned_status = ($scanned_result['status'] == 0 ? 'SCAN_COMPLETED' :  (($scanned_result['status'] == 255 || $scanned_result['status'] == 254) ? "In Progress" : "SCAN_FAILED"));
				$file = ['file_name'=> $userid.'_'.basename($topic_file),'scan_status' => $scanned_status,'submission_type'=>'topic','file_id'=>$file_id];
				if( $scanned_result['status'] == 0 ) {
					//No threat detected
					$moved = move_file_to_vwr_server($file, $scanned_result, "uploadv2");
					if($moved != 'Copy success!') {
						echo "fail to move to server";
						exit;
					} 
				} /* else if($scanned_result['status'] == 255  || $scanned_result['status'] == 254){
					//scan in progress no action needed
				} else{
					echo "Status : " . $scanned_result['status'] . " Message : " . $scanned_result['message'];
					exit;
				} */
				$editFields['topic_image'] = $userid . '_' . $topic_file;
				//we need to save the file_id received from fileupload API
				$editFields['scan_file_id'] = $file_id;
				$editFields['scan_file_status'] = $scanned_status;

				//scanfields
				//$scanFields['file_id'] = $file_id;
				$scanFields['file_name'] = $userid . '_' . $topic_file;
				$scanFields['submission_type'] = 'topic';
				$scanFields['created_date'] = time();
				$scanFields['scan_status'] = $scanned_status;
				db_update('file_scan_details')->fields($scanFields)->condition('file_id', $file_id)->execute();
			}
			$editFields['topic_name'] = $topic_name;
			$editFields['short_name'] = $shortname;
			$editFields['teaser_text'] = $teaser;
			$editFields['description_title'] = $desc_title;
			$editFields['topic_description'] = $topic_multi_desc[0];
			$editFields['expiry_date'] = $expiry_date;
			$editFields['modified_by'] = $userid;
			$editFields['modified_date'] = $timestamp;
			if ($_POST["display_options"] != "") {
				$editFields['display_options'] = $_POST["display_options"];
			}

			

			db_update('topic')->fields($editFields)->condition('topic_id', $topic_id)->execute();


			$topicusermapping = array();
			$topicexitingregionsarray = array();
			$topicuseraccessmapping = db_query("select * from {content_regions} where category_id=:cat_id and content_id in (:topic_id) and region_id in (:regions) and status=1 and content_type=2", array(':cat_id' => $cat_id, ':topic_id' => $topic_id, ':regions' => $regions));
			if ($topicuseraccessmapping) {
				foreach ($topicuseraccessmapping as $topicrreg) {
					$topicexitingregionsarray[] = $topicrreg->region_id;
				}
			}
			if (!empty($topicexitingregionsarray)) {
				$resultnewtopicregions = array_diff($region_process, $topicexitingregionsarray);
				$topicexistingregionlist = implode(',', $topicexitingregionsarray);
				$seltopicuseraccessmapping = db_query("select * from {category_useraccess_mapping} where category_id=$cat_id and topic_id in (:topic_id) and region_id in (:topicexistingregionlist)", array(':topic_id' => $topic_id, ':topicexistingregionlist' => $topicexistingregionlist));

				foreach ($resultnewtopicregions as $index => $region_id) {

					foreach ($seltopicuseraccessmapping as $topicuserreg) {
						$topicusermapping = array();
						$topicusermapping['topic_id'] = $topicuserreg->topic_id;
						$topicusermapping['category_id'] = $topicuserreg->category_id;
						$topicusermapping['vas_id'] = $topicuserreg->vas_id;
						$topicusermapping['supplier_org_id'] = $topicuserreg->supplier_org_id;
						$topicusermapping['mapping'] = $topicuserreg->mapping;
						$topicusermapping['region_id'] = $region_id;
						$isglobal = 0;
						$isglobal = get_global_supplier($topicuserreg->supplier_org_id, 1);
						if ($isglobal > 1) {
							db_insert('category_useraccess_mapping')->fields($topicusermapping)->execute();
						}
					}
				}
			}



			if (count($region_process) > 0) {
				$resultregionsset = array();
				$resultregionsset = db_query("SELECT internal_id,region_id FROM 
				{content_regions} where category_id=:cat_id and content_id=:topic_id and content_type=2", array(':cat_id' => $cat_id, ':topic_id' => $topic_id))->fetchAllKeyed(1, 0);
				$existingregions = array_keys($resultregionsset);
				foreach ($region_process as $reginindex => $region_id) {
					$resultset = array();
					$regionFields = array();
					unset($resultregionsset[$region_id]);
					$resultset = db_query("SELECT internal_id FROM {content_regions} where 
					region_id = :region_id && category_id=:cat_id and content_id=:topic_id and content_type=2", array(':region_id' => $region_id, ':cat_id' => $cat_id, ':topic_id' => $topic_id))->fetchColumn();
					if (!empty($resultset)) {
						$regionFields = array();
						$regionFields['status'] = 1;
						db_update('content_regions')->fields($regionFields)->condition('category_id', $cat_id)->condition('region_id', $region_id)->condition('content_id', $topic_id)->execute();
					} else {
						$regionFields['region_id'] = $region_id;
						$regionFields['category_id'] = $cat_id;
						$regionFields['content_id'] = $topic_id;
						$regionFields['status'] = 1;
						$regionFields['content_type'] = 2;
						db_insert('content_regions')->fields($regionFields)->execute();
					}
				}

				if (count($resultregionsset) > 0) {
					foreach ($resultregionsset as $region_id => $category_region_id) {
						$regionFields = array();
						$regionFields['status'] = 0;
						db_update('content_regions')->fields($regionFields)->condition('category_id', $cat_id)->condition('region_id', $region_id)->condition('content_id', $topic_id)->execute();
					}
				}


				$resultontentreg = db_query("SELECT internal_id,region_id FROM 
				{content_regions} where category_id=:cat_id and content_id=:topic_id and content_type=2 and status=1 ", array(':cat_id' => $cat_id, ':topic_id' => $topic_id))->fetchAllKeyed(1, 0);

				$existingprocessregions = array_keys($resultontentreg);

				if (count($existingprocessregions) == 1) {
					foreach ($existingprocessregions as $region_id) {
						db_query("DELETE FROM {category_useraccess_mapping} where topic_id in (:topic_id) and category_id in (:cat_id) and region_id not in (:region_id)", array(':topic_id' => $topic_id, ':cat_id' => $cat_id, ':region_id' => $region_id));
					}
				}
			}


			//Removing the Upload documents when the subcategoey is disassociated
			$selectfiles = db_query("select file_id from {upload_documents} where topic_id in (:parent_id) and cat_id in (:cat_id) and sub_topic_id in (:topic_id) and internal_topic_id=0", array(':parent_id' => $parent_id, ':cat_id' => $cat_id, ':topic_id' => $topic_id));
			if ($selectfiles) {
				foreach ($selectfiles as $fl) {
					db_query("update {upload_documents_regions} set status=0 where file_id in (:file_id) and region_id not in (:regions)", array(':file_id' => $fl->file_id, ':regions' => $regions));
				}
			}

			//Removing the Dropbox when the subcategoey is disassociated
			$selectdropbox = db_query("select dbox_id from {dropbox_category_mapping} where cat_id in (:cat_id) and topic_id in (:topic_id) and region_id not in (:regions)", array(':cat_id' => $cat_id, ':topic_id' => $topic_id, ':regions' => $regions));
			if ($selectdropbox) {
				foreach ($selectdropbox as $sdbox) {
					db_query("update {dropbox_regions} set status=0 where dropbox_id in (:dbox_id) and region_id not in (:regions)", array(':dbox_id' => $sdbox->dbox_id, ':regions' => $regions));
				}
				db_query("DELETE FROM {dropbox_category_mapping} where cat_id in (:cat_id) and topic_id in (:topic_id) and region_id not in (:regions)", array(':cat_id' => $cat_id, ':topic_id' => $topic_id, ':regions' => $regions));
			}

			//Removing the User Access when the Topic is disassociated			
			$selecttopicuseraccess = db_query("select topic_id  from {category_useraccess} where topic_id in (:topic_id) and category_id in (:cat_id)", array(':topic_id' => $topic_id, ':cat_id' => $cat_id));
			if ($selecttopicuseraccess) {
				foreach ($selecttopicuseraccess as $stopicuaccess) {
					db_query("DELETE FROM {category_useraccess} where topic_id in (:topic_id) and region_id not in (:regions) and category_id in (:cat_id)", array(':topic_id' => $stopicuaccess->topic_id, ':regions' => $regions, ':cat_id' => $cat_id));
				}
			}



			$subtopicsgroup = '';
			$subtopics = db_query("SELECT topic_id, topic_name, short_name, teaser_text, 
				topic_image, expiry_date FROM {topic} where category_id = :cat_id && 
				parent_topic_id in (:topic_id) && topic_status=1 ORDER BY topic_name ASC", array(':cat_id' => $cat_id, ':topic_id' => $topic_id));


			if ($subtopics) {
				foreach ($subtopics as $st) {

					db_query("DELETE FROM {subtopic_multi_description} where subtopic_id in (:topic_id) and region_id not in (:regions)", array(':topic_id' => $st->topic_id, ':regions' => $regions));
					db_query("update {content_regions} set status=0 where content_id in (:topic_id) and content_type=3 and region_id not in (:regions) and category_id in (:cat_id)", array(':topic_id' => $st->topic_id, ':regions' => $regions, ':cat_id' => $cat_id));
					$count = db_query("select * from {content_regions} where category_id in (:cat_id) and content_id in (:topic_id) and status=1 and content_type=3", array(':cat_id' => $cat_id, ':topic_id' => $st->topic_id));
					if ($count->rowCount() == 0) {
						db_query("update {topic} set topic_status=0 where topic_id in (:topic_id)", array(':topic_id' => $st->topic_id));
					}

					//Removing the Upload documents when the subcategory is disassociated
					$selectfiles = db_query("select file_id from {upload_documents} where topic_id in (:parent_id) and cat_id in (:cat_id) and sub_topic_id in (:topic_id) and internal_topic_id in (:internal_topic_id) ", array(':parent_id' => $parent_id, ':cat_id' => $cat_id, ':topic_id' => $topic_id, ':internal_topic_id' => $st->topic_id));
					if ($selectfiles) {
						foreach ($selectfiles as $fl) {
							db_query("update {upload_documents_regions} set status=0 where file_id in (:file_id) and region_id not in (:regions)", array(':file_id' => $fl->file_id, ':regions' => $regions));
						}
					}

					//Removing the Dropbox when the topic is disassociated
					$selectdropbox = db_query("select dbox_id from {dropbox_category_mapping} where cat_id in (:cat_id) and topic_id in (:topic_id) and region_id not in (:regions)", array(':cat_id' => $cat_id, ':topic_id' => $st->topic_id, ':regions' => $regions));
					if ($selectdropbox) {
						foreach ($selectdropbox as $sdbox) {
							db_query("update {dropbox_regions} set status=0 where dropbox_id in (:dbox_id) and region_id not in (:regions)", array(':dbox_id' => $sdbox->dbox_id, ':regions' => $regions));
						}
						db_query("DELETE FROM {dropbox_category_mapping} where cat_id in (:cat_id) and topic_id in (:topic_id) and region_id not in (:regions)", array(':cat_id' => $cat_id, ':topic_id' => $st->topic_id, ':regions' => $regions));
					}


					//Removing the User Access when the SubTopic is disassociated			
					$selectsubtopicuseraccess = db_query("select topic_id  from {category_useraccess} where topic_id  in (:topic_id) and category_id in (:cat_id)", array(':topic_id' => $st->topic_id, ':cat_id' => $cat_id));
					if ($selectsubtopicuseraccess) {
						foreach ($selectsubtopicuseraccess as $sstopicuaccess) {
							db_query("DELETE FROM {category_useraccess} where topic_id in (:topic_id) and category_id in (:cat_id) and region_id not in (:regions)", array(':topic_id' => $sstopicuaccess->topic_id, ':cat_id' => $cat_id, ':regions' => $regions));
						}
					}
				}
			}
		} else if ($topic_name && $shortname && $teaser && $topic_multi_desc[0] && $topic_file && $desc_title && $expiry_date && is_numeric($topic_status) && has_page_access('create')) {
			$editFields['topic_name'] = $topic_name;
			$editFields['short_name'] = $shortname;
			$editFields['teaser_text'] = $teaser;
			$editFields['description_title'] = $desc_title;
			$editFields['topic_description'] = $topic_multi_desc[0];
			$editFields['expiry_date'] = $expiry_date;
			$editFields['topic_image'] = $userid . '_' . $topic_file;
			$editFields['topic_status'] = $topic_status;
			$editFields['parent_topic_id'] = $parent_id;
			$editFields['category_id'] = $cat_id;
			$editFields['created_by'] = $userid;
			$editFields['created_date'] = $timestamp;
			//get the scan result upload v2
			$scanned_result = get_scanned_file($file_id);// call the metadefender result API
			$scanned_status = ($scanned_result['status'] == 0 ? 'SCAN_COMPLETED' :  (($scanned_result['status'] == 255 || $scanned_result['status'] == 254) ? "In Progress" : "SCAN_FAILED"));
			$file = ['file_name'=> $userid.'_'.basename($topic_file),'scan_status' => $scanned_status,'submission_type'=>'topic','file_id'=>$file_id];
			if( $scanned_result['status'] == 0 ) {
				//No threat detected
				$moved = move_file_to_vwr_server($file, $scanned_result, "uploadv2");
				if($moved != 'Copy success!') {
					echo "fail to move to server";
					exit;
				} 
			} else if($scanned_result['status'] == 255  || $scanned_result['status'] == 254){
				//scan in progress no action needed
			} else{
				echo "Status : " . $scanned_result['status'] . " Message : " . $scanned_result['message'];
				exit;
			}
			//we need to save the file_id received from fileupload API
			$editFields['scan_file_id'] = $file_id;
			$editFields['scan_file_status'] = $scanned_status;

			//scanfields
			$scanFields['file_id'] = $file_id;
			$scanFields['file_name'] = $userid . '_' . $topic_file;
			$scanFields['submission_type'] = 'topic';
			$scanFields['created_date'] = time();
			$scanFields['scan_status'] = $scanned_status;
			$file_auto_id = db_insert('file_scan_details')->fields($scanFields)->execute();

			$auto_id = db_insert('topic')->fields($editFields)->execute();
			if ($auto_id > 0) {
				if (count($region_process) > 0) {
					foreach ($region_process as $reginindex => $region_id) {
						$subregionFields = array();
						$subregionFields['region_id'] = $region_id;
						$subregionFields['category_id'] = $cat_id;
						$subregionFields['content_id'] = $auto_id;
						$subregionFields['status'] = 1;
						$subregionFields['content_type'] = 2;
						db_insert('content_regions')->fields($subregionFields)->execute();
					}

					for ($j = 0; $j < count($topic_multi_desc); $j++) {
						$descregionFields = array();
						$descregionFields['region_id'] = $region_process[$j];
						$descregionFields['topic_id'] = $auto_id;
						$descregionFields['description'] = $topic_multi_desc[$j];
						db_insert('topic_multi_description')->fields($descregionFields)->execute();
					}
				}
			}
		} else if (!$expiry_date) {
			echo 'expdate';
			exit;
		}
		if (db_affected_rows) {
			echo "success";
		} else {
			echo "fail";
		}
		exit;
	}

	function category_delete_subtopic()
	{
		global $user;
		$userid = $user->uid;
		$timestamp = time();
		$topic_id = 0;
		if (arg(6) && is_numeric(arg(6))) {
			$topic_id = arg(6);
		}
		$topic_status = 0;
		$category_id = arg(1);
		$subcategory_id = arg(3);
		$currentregion = $_COOKIE['currentregiontab'];

		if ($topic_id && has_page_access('edit')) {
			$editFields = array();
			$editFields['topic_status'] = $topic_status;
			$editFields['modified_by'] = $userid;
			$editFields['deleted'] = $timestamp;


			$selectfiles = db_query("select file_id from {upload_documents} where topic_id in (:subcategory_id) and cat_id in (:category_id) and sub_topic_id in (:topic_id) and internal_topic_id=0", array(':subcategory_id' => $subcategory_id, ':category_id' => $category_id, ':topic_id' => $topic_id));
			if ($selectfiles) {
				foreach ($selectfiles as $fl) {
					db_query("update {upload_documents_regions} set status=0 where file_id in (:file_id) and region_id=:region_id", array(':file_id' => $fl->file_id, ':region_id' => $currentregion));
				}
			}

			$selectdropbox = db_query("select dbox_id from {dropbox_category_mapping} where cat_id in (:category_id) and topic_id in (:topic_id) and region_id=:region_id", array(':category_id' => $category_id, ':topic_id' => $topic_id, ':region_id' => $currentregion));
			if ($selectdropbox) {
				foreach ($selectdropbox as $sdbox) {
					db_query("update {dropbox_regions} set status=0 where dropbox_id in (:dbox_id) and region_id=:region_id", array(':dbox_id' => $sdbox->dbox_id, ':region_id' => $currentregion));
				}
				db_query("DELETE FROM {dropbox_category_mapping} where cat_id in (:category_id) and topic_id in (:topic_id) and region_id=:region_id", array(':category_id' => $category_id, ':topic_id' => $topic_id, ':region_id' => $currentregion));
			}

			db_query("DELETE FROM {category_useraccess_mapping} WHERE category_id=:category_id and topic_id=:topic_id and region_id=:region_id", array(':category_id' => $category_id, ':topic_id' => $topic_id, ':region_id' => $currentregion));
			db_query("DELETE FROM {category_useraccess}  WHERE category_id=:category_id and topic_id=:topic_id and region_id=:region_id", array(':category_id' => $category_id, ':topic_id' => $topic_id, ':region_id' => $currentregion));
			db_query("DELETE FROM {dropbox_category_mapping} WHERE cat_id=:category_id and topic_id in (:topic_id) and region_id=:region_id", array(':category_id' => $category_id, ':topic_id' => $topic_id, ':region_id' => $currentregion));
			$currentdeactivation = db_query("select * from {content_regions} where (content_id=$topic_id and status=1 and content_type=2)");
			if ($currentdeactivation->rowCount() == 1) {
				db_query("update {content_regions} set status=0 where content_id=:topic_id and content_type=2 and region_id=:region_id", array(':topic_id' => $topic_id, ':region_id' => $currentregion));
				db_update('topic')->fields($editFields)->condition('topic_id', $topic_id)->execute();
				db_update('topic')->fields($editFields)->condition('parent_topic_id', $topic_id)->execute();

				$seltopics = db_query("select content_id from {content_regions} where category_id=:category_id and content_id=:topic_id and content_type=2", array(':category_id' => $category_id, ':topic_id' => $topic_id));
				if ($seltopics) {
					foreach ($seltopics as $seltop) {
						db_query("delete from {topic_multi_description} where topic_id=:topic_id and region_id=:region_id", array(':topic_id' => $seltop->content_id, ':region_id' => $currentregion));
					}
				}
			} else {

				$seltopics = db_query("select content_id from {content_regions} where category_id=:category_id and content_id=:topic_id and content_type=2", array(':category_id' => $category_id, ':topic_id' => $topic_id));
				if ($seltopics) {
					foreach ($seltopics as $seltop) {
						db_query("delete from {topic_multi_description} where topic_id=:topic_id and region_id=:region_id", array(':topic_id' => $seltop->content_id, ':region_id' => $currentregion));
					}
				}

				db_query("update {content_regions} set status=0 where content_id=:topic_id and content_type=2 and region_id=:region_id", array(':topic_id' => $seltop->content_id, ':region_id' => $currentregion));
				$topics = db_query("SELECT topic_id from {topic} where category_id = :category_id && 
			parent_topic_id in ($topic_id) && topic_status=1 ORDER BY topic_name ASC", array(':category_id' => $category_id));
				if ($topics) {
					foreach ($topics as $st) {
						db_query("update {content_regions} set status=0 where content_id=:content_id and region_id=:region_id and content_type=3", array(':content_id' => $st->topic_id, ':region_id' => $currentregion));
						$selsubtopics = db_query("select subtopic_id from {subtopic_multi_description} where subtopic_id=:subtopic_id", array(':subtopic_id' => $st->topic_id));
						if ($selsubtopics) {
							foreach ($selsubtopics as $selsubtop) {
								db_query("delete from {subtopic_multi_description} where subtopic_id=:subtopic_id and region_id=:region_id", array(':subtopic_id' => $selsubtop->subtopic_id, ':region_id' => $currentregion));
							}
						}

						db_query("DELETE FROM {dropbox_category_mapping} WHERE cat_id=:category_id and topic_id in (:topic_id) and region_id=:region_id", array(':category_id' => $category_id, ':topic_id' => $st->topic_id, ':region_id' => $currentregion));
					}
				}
				$selectfiles = db_query("select file_id from {upload_documents} where cat_id in (:category_id) and topic_id in (:subcategory_id) and sub_topic_id in (:topic_id) ", array(':category_id' => $category_id, ':subcategory_id' => $subcategory_id, ':topic_id' => $topic_id));
				if ($selectfiles) {
					foreach ($selectfiles as $fl) {
						db_query("update {upload_documents_regions} set status=0 where file_id in (:file_id) and region_id=:region_id", array(':file_id' => $fl->file_id, ':region_id' => $currentregion));
						$multifile = array();
						$multifile = getismultifile($fl->file_id);
						if (empty($multifile)) {
							db_query("update {upload_documents} set file_status=0 where file_id in (:file_id)", array(':file_id' => $fl->file_id));
						}
					}
				}
			}
		}
		if (db_affected_rows) {

			echo "success";
		} else {
			echo "fail";
		}
		exit;
	}

	/************Internal Topic**************/
	function category_internaltopic_actions()
	{
		return theme('internaltopic_display_theme', array('data' => '', 'level' => 'internaltopic'));
	}

	function category_add_internaltopic()
	{
		if (has_page_access('create')) {
			$regions = array();
			$categoryregions = array();
			$regions = gettopicregions(base64_decode(arg(5)));
			$categoryregions = gettopicregions(base64_decode(arg(5)));
			print theme('simple_internaltopic_add_edit_theme', array('action' => 'add', 'level' => 'internaltopic', 'regions' => $regions, 'category_regions' => $categoryregions));
		}
		exit;
	}

	function category_edit_internaltopic()
	{
		if (has_page_access('edit')) {
			$regions = array();
			$categoryregions = array();
			$regions = gettopicregions(arg(5));
			$categoryregions = getsubtopicregions(arg(8));
			print theme('simple_internaltopic_add_edit_theme', array('action' => 'edit', 'level' => 'internaltopic', 'regions' => $regions, 'category_regions' => $categoryregions));
		}
		exit;
	}

	function category_save_internaltopic()
	{
		global $user;
		$userid = $user->uid;
		$timestamp = time();
		$topic_name = strip_tags($_POST['topic_name']);


		$topic_desc = preg_replace('#<script(.*?)>(.*?)</script>#is', '', $_POST['topic_desc']);
		$topic_multi_desc = explode("~~", $topic_desc);


		$topic_file = strip_tags($_POST['topic_file']);
		$desc_title = strip_tags($_POST['desc_title']);
		$shortname = strip_tags(trim($_POST['shortname']));
		$teaser = strip_tags(trim($_POST['teaser']));
		$expiry_date = strip_tags(strtotime($_POST['expiry_date']));
		$topic_status = 1;
		$regions = strip_tags($_POST['regions']);
		$region_process = explode(",", $regions);
		$parent_id = $topic_id = $cat_id = 0;
		$file_id=strip_tags($_POST['file_id']);
		if (arg(8) && is_numeric(arg(8))) {
			$topic_id = arg(8);
		}
		if (arg(1) && is_numeric(arg(1))) {
			$cat_id = arg(1);
		}
		if (arg(5) && is_numeric(arg(5))) {
			$parent_id = arg(5);
		}
		if (!is_cat_topic_active($cat_id, 'category') || !is_cat_topic_active($parent_id, 'topic')) {
			echo 'deleted';
			exit;
		}
		$editFields = array();
		if ($topic_id && $topic_name && $shortname && $teaser && $topic_multi_desc[0] && $desc_title && $expiry_date && $parent_id && has_page_access('edit')) {
			if (!is_cat_topic_active($topic_id, 'topic')) {
				echo 'deleted';
				exit;
			}
			$resultdel = db_query("delete from {subtopic_multi_description} where subtopic_id=:topic_id", array(':topic_id' => $topic_id));
			for ($j = 0; $j < count($topic_multi_desc); $j++) {
				$descregionFields = array();
				$descregionFields['region_id'] = $region_process[$j];
				$descregionFields['subtopic_id'] = $topic_id;
				$descregionFields['description'] = $topic_multi_desc[$j];
				db_insert('subtopic_multi_description')->fields($descregionFields)->execute();
			}

			if ($topic_file) {
				//get the scan result upload v2
				$scanned_result = get_scanned_file($file_id);// call the metadefender result API
				$scanned_status = ($scanned_result['status'] == 0 ? 'SCAN_COMPLETED' :  (($scanned_result['status'] == 255 || $scanned_result['status'] == 254) ? "In Progress" : "SCAN_FAILED"));
				$file = ['file_name'=> $userid.'_'.basename($topic_file),'scan_status' => $scanned_status,'submission_type'=>'topic','file_id'=>$file_id];
				if( $scanned_result['status'] == 0 ) {
					//No threat detected
					$moved = move_file_to_vwr_server($file, $scanned_result, "uploadv2");
					if($moved != 'Copy success!') { 
						echo "fail to move to server";
						exit;
					} 
				} else if($scanned_result['status'] == 255  || $scanned_result['status'] == 254){
					//scan in progress no action needed
				} else{
					echo "Status : " . $scanned_result['status'] . " Message : " . $scanned_result['message'];
					exit;
				}
				$editFields['topic_image'] = $userid . '_' . $topic_file;
				$editFields['scan_file_id'] = $file_id;
				$editFields['scan_file_status'] = $scanned_status;

				//scanfields
				$scanFields['file_id']= $file_id;
				$scanFields['file_name']= $userid.'_'.$topic_file;
				$scanFields['submission_type']= 'topic';
				$scanFields['created_date']= time();
				$scanFields['scan_status'] = $scanned_status;
				$file_auto_id = db_insert('file_scan_details')->fields($scanFields)->execute();
			}
			$editFields['topic_name'] = $topic_name;
			$editFields['short_name'] = $shortname;
			$editFields['teaser_text'] = $teaser;
			$editFields['description_title'] = $desc_title;
			$editFields['topic_description'] = $topic_multi_desc[0];
			$editFields['expiry_date'] = $expiry_date;
			$editFields['modified_by'] = $userid;
			$editFields['modified_date'] = $timestamp;
			if ($_POST["display_options"] != "") {
				$editFields['display_options'] = $_POST["display_options"];
			}
			db_update('topic')->fields($editFields)->condition('topic_id', $topic_id)->execute();


			$newsubtopicusermapping = array();
			$exitingsubtopicregionsarray = array();
			$subtopicuseraccessmapping = db_query("select * from {content_regions} where category_id=:cat_id and content_id in (:topic_id) and region_id in (:regions) and status=1 and content_type=3", array(':topic_id' => $topic_id, ':regions' => $regions, ':cat_id' => $cat_id));
			if ($subtopicuseraccessmapping) {
				foreach ($subtopicuseraccessmapping as $subtopicreg) {
					$exitingsubtopicregionsarray[] = $subtopicreg->region_id;
				}
			}
			if (!empty($exitingsubtopicregionsarray)) {
				$resultnewregions = array_diff($region_process, $exitingsubtopicregionsarray);
				$existingsubtopicregionlist = implode(',', $exitingsubtopicregionsarray);
				$selsubtopicuseraccessmapping = db_query("select * from {category_useraccess_mapping} where category_id=:cat_id and topic_id in (:topic_id) and region_id in (:existingsubtopicregionlist)", array(':cat_id' => $cat_id, ':topic_id' => $topic_id, ':existingsubtopicregionlist' => $existingsubtopicregionlist));

				foreach ($resultnewregions as $index => $region_id) {

					foreach ($selsubtopicuseraccessmapping as $subtopicuserreg) {
						$newsubtopicusermapping = array();
						$newsubtopicusermapping['topic_id'] = $subtopicuserreg->topic_id;
						$newsubtopicusermapping['category_id'] = $subtopicuserreg->category_id;
						$newsubtopicusermapping['vas_id'] = $subtopicuserreg->vas_id;
						$newsubtopicusermapping['supplier_org_id'] = $subtopicuserreg->supplier_org_id;
						$newsubtopicusermapping['mapping'] = $subtopicuserreg->mapping;
						$newsubtopicusermapping['region_id'] = $region_id;
						$isglobal = 0;
						$isglobal = get_global_supplier($subtopicuserreg->supplier_org_id, 1);
						if ($isglobal > 1) {
							db_insert('category_useraccess_mapping')->fields($newsubtopicusermapping)->execute();
						}
					}
				}
			}

			if (count($region_process) > 0) {
				$resultregionsset = array();
				$resultregionsset = db_query("SELECT internal_id,region_id FROM {content_regions} 
				where content_id=:topic_id and content_type=3", array(':topic_id' => $topic_id))->fetchAllKeyed(1, 0);
				$existingregions = array_keys($resultregionsset);
				foreach ($region_process as $reginindex => $region_id) {
					$resultset = array();
					$regionFields = array();
					unset($resultregionsset[$region_id]);
					$resultset = db_query("SELECT internal_id FROM {content_regions} where
					region_id = :region_id && content_id=:topic_id and content_type=3", array(':region_id' => $region_id, ':topic_id' => $topic_id))->fetchColumn();

					if (!empty($resultset)) {
						$regionFields = array();
						$regionFields['status'] = 1;
						$regionFields['content_type'] = 3;
						db_update('content_regions')->fields($regionFields)->condition('content_id', $topic_id)->condition('region_id', $region_id)->execute();
					} else {
						$regionFields['region_id'] = $region_id;
						$regionFields['category_id'] = $cat_id;
						$regionFields['content_id'] = $topic_id;
						$regionFields['status'] = 1;
						$regionFields['content_type'] = 3;
						db_insert('content_regions')->fields($regionFields)->execute();
					}
				}
				if (count($resultregionsset) > 0) {
					foreach ($resultregionsset as $region_id => $category_region_id) {
						$regionFields = array();
						$regionFields['status'] = 0;
						$regionFields['content_type'] = 3;
						db_update('content_regions')->fields($regionFields)->condition('content_id', $topic_id)->condition('region_id', $region_id)->execute();
						$selectfiles = db_query("select file_id from {upload_documents} where cat_id in (:cat_id) and internal_topic_id in (:topic_id)", array(':cat_id' => $cat_id, ':topic_id' => $topic_id));
						if ($selectfiles) {
							foreach ($selectfiles as $fl) {

								db_query("update {upload_documents_regions} set status=0 where file_id in (:file_id) and region_id in (:region_id)", array(':file_id' => $fl->file_id, ':region_id' => $region_id));
							}
						}



						$selectdropbox = db_query("select dbox_id from {dropbox_category_mapping} where cat_id in (:cat_id) and topic_id in (:topic_id) and region_id in (:region_id)", array(':cat_id' => $cat_id, ':topic_id' => $topic_id, ':region_id' => $region_id));
						if ($selectdropbox) {
							foreach ($selectdropbox as $sdbox) {
								db_query("update {dropbox_regions} set status=0 where dropbox_id in (:dbox_id) and region_id in (:region_id)", array(':dbox_id' => $sdbox->dbox_id, ':region_id' => $region_id));
							}
							db_query("DELETE FROM {dropbox_category_mapping} where cat_id in (:cat_id) and topic_id in (:topic_id) and region_id in (:region_id)", array(':cat_id' => $cat_id, ':topic_id' => $topic_id, ':region_id' => $region_id));
						}

						$selecttopicuseraccess = db_query("select topic_id from {category_useraccess} where topic_id in (:topic_id)", array(':topic_id' => $topic_id));
						if ($selecttopicuseraccess) {
							foreach ($selecttopicuseraccess as $stopuaccess) {
								db_query("DELETE FROM {category_useraccess} where topic_id in (:topic_id) and region_id in (:region_id)", array(':topic_id' => $stopuaccess->topic_id, ':region_id' => $region_id));
							}
						}
					}
				}


				$resultontentreg = db_query("SELECT internal_id,region_id FROM 
				{content_regions} where category_id=:cat_id and content_id=:topic_id and content_type=3 and status=1", array(':cat_id' => $cat_id, ':topic_id' => $topic_id))->fetchAllKeyed(1, 0);

				$existingprocessregions = array_keys($resultontentreg);

				if (count($existingprocessregions) == 1) {
					foreach ($existingprocessregions as $region_id) {
						db_query("DELETE FROM {category_useraccess_mapping} where topic_id in (:topic_id) and category_id in (:cat_id) and region_id not in (:region_id)", array(':topic_id' => $topic_id, ':cat_id' => $cat_id, ':region_id' => $region_id));
					}
				}
			}
		} else if ($topic_name && $shortname && $teaser && $topic_multi_desc[0] && $topic_file &&  $desc_title && $expiry_date && $topic_status && $parent_id && has_page_access('create')) {
			$editFields['topic_name'] = $topic_name;
			$editFields['short_name'] = $shortname;
			$editFields['teaser_text'] = $teaser;
			$editFields['description_title'] = $desc_title;
			$editFields['topic_description'] = $topic_multi_desc[0];
			$editFields['expiry_date'] = $expiry_date;
			$editFields['topic_image'] = $userid . '_' . $topic_file;
			$editFields['topic_status'] = $topic_status;
			$editFields['parent_topic_id'] = $parent_id;
			$editFields['category_id'] = $cat_id;
			$editFields['created_by'] = $userid;
			$editFields['created_date'] = $timestamp;
			//get the scan result upload v2
			$scanned_result = get_scanned_file($file_id);// call the metadefender result API
			$scanned_status = ($scanned_result['status'] == 0 ? 'SCAN_COMPLETED' :  (($scanned_result['status'] == 255 || $scanned_result['status'] == 254) ? "In Progress" : "SCAN_FAILED"));
			$file = ['file_name'=> $userid.'_'.basename($topic_file),'scan_status' => $scanned_status,'submission_type'=>'topic','file_id'=>$file_id];
			if( $scanned_result['status'] == 0 ) {
				//No threat detected
				$moved = move_file_to_vwr_server($file, $scanned_result, "uploadv2");
				if($moved != 'Copy success!') {
					echo "fail to move to server";
					exit;
				} 
			}else if($scanned_result['status'] == 255  || $scanned_result['status'] == 254){
				//scan in progress no action needed
			} else{
				echo "Status : " . $scanned_result['status'] . " Message : " . $scanned_result['message'];
				exit;
			}

			//we need to save the file_id received from fileupload API
			$editFields['scan_file_id']= $file_id;
			$editFields['scan_file_status'] = $scanned_status;

			//scanfields
			$scanFields['file_id']= $file_id;
			$scanFields['file_name']= $userid.'_'.$topic_file;
			$scanFields['submission_type']= 'topic';
			$scanFields['created_date']= time();
			$scanFields['scan_status'] = $scanned_status;
			$file_auto_id = db_insert('file_scan_details')->fields($scanFields)->execute();
			
			$auto_id = db_insert('topic')->fields($editFields)->execute();

			if ($auto_id > 0) {
				if (count($region_process) > 0) {
					foreach ($region_process as $reginindex => $region_id) {
						$regionFields = array();
						$regionFields['region_id'] = $region_id;
						$regionFields['category_id'] = $cat_id;
						$regionFields['content_id'] = $auto_id;
						$regionFields['status'] = 1;
						$regionFields['content_type'] = 3;
						db_insert('content_regions')->fields($regionFields)->execute();
					}

					for ($j = 0; $j < count($topic_multi_desc); $j++) {
						$descregionFields = array();
						$descregionFields['region_id'] = $region_process[$j];
						$descregionFields['subtopic_id'] = $auto_id;
						$descregionFields['description'] = $topic_multi_desc[$j];
						db_insert('subtopic_multi_description')->fields($descregionFields)->execute();
					}
				}
			}
		} else if (!$expiry_date) {
			echo 'expdate';
			exit;
		}
		if (db_affected_rows) {
			echo "success";
		} else {
			echo "fail";
		}
		exit;
	}

	function category_delete_internaltopic()
	{
		global $user;
		$userid = $user->uid;
		$topic_id = 0;
		if (arg(8) && is_numeric(arg(8))) {
			$topic_id = arg(8);
		}
		$topic_status = 0;
		$category_id = arg(1);
		$subcategory_id = arg(3);
		$topics_id = arg(5);
		$currentregion = $_COOKIE['currentregiontab'];
		if ($topic_id && has_page_access('edit')) {
			$editFields = array();
			$editFields['topic_status'] = $topic_status;
			$editFields['modified_by'] = $userid;
			$editFields['deleted'] = time();
			db_query("DELETE FROM {category_useraccess_mapping}  WHERE category_id=:category_id and topic_id=:topic_id and region_id=:region_id", array(':category_id' => $category_id, ':topic_id' => $topic_id, ':region_id' => $currentregion));
			db_query("DELETE FROM {category_useraccess}  WHERE category_id=:category_id and topic_id=:topic_id and region_id=:region_id", array(':category_id' => $category_id, ':topic_id' => $topic_id, ':region_id' => $currentregion));

			$selectfiles = db_query("select file_id from {upload_documents} where topic_id in (:subcategory_id) and cat_id in (:category_id) and sub_topic_id in (:topics_id) and internal_topic_id in (:topic_id)", array(':subcategory_id' => $subcategory_id, ':category_id' => $category_id, ':topics_id' => $topics_id, ':topic_id' => $topic_id));
			if ($selectfiles) {
				foreach ($selectfiles as $fl) {
					db_query("update {upload_documents_regions} set status=0 where file_id in (:file_id) and region_id=:region_id", array(':file_id' => $fl->file_id, ':region_id' => $currentregion));
				}
			}

			$selectdropbox = db_query("select dbox_id from {dropbox_category_mapping} where cat_id in (:category_id) and topic_id in (:topic_id) and region_id=:region_id", array(':category_id' => $category_id, ':topic_id' => $topic_id, ':region_id' => $currentregion));
			if ($selectdropbox) {
				
				db_query("DELETE FROM {dropbox_category_mapping} where cat_id in (:category_id) and topic_id in (:topic_id) and region_id=:region_id", array(':category_id' => $category_id, ':topic_id' => $topic_id, ':region_id' => $currentregion));
			}
			db_query("DELETE FROM {dropbox_category_mapping} WHERE cat_id=:cat_id and topic_id in (:topic_id) and region_id=:region_id", array(':cat_id' => $cat_id, ':topic_id' => $topic_id, ':region_id' => $currentregion));
			$currentdeactivation = db_query("select * from {content_regions} where (content_id=:topic_id and status=1 and content_type=3)", array(':topic_id' => $topic_id));

			if ($currentdeactivation->rowCount() == 1) {
				db_query("update {content_regions} set status=0 where content_id=:topic_id and content_type=3 and region_id=:region_id", array(':topic_id' => $topic_id, ':region_id' => $currentregion));
				db_update('topic')->fields($editFields)->condition('topic_id', $topic_id)->execute();
				$selsubtopics = db_query("select content_id from {content_regions} where category_id=:category_id and content_id=:topic_id and content_type=3", array(':category_id' => $category_id, ':topic_id' => $topic_id));
				if ($selsubtopics) {
					foreach ($selsubtopics as $selsubtop) {
						db_query("delete from {subtopic_multi_description} where subtopic_id=:subtopic_id and region_id=:region_id", array(':subtopic_id' => $selsubtop->content_id, ':region_id' => $currentregion));
					}
				}
			} else {
				db_query("update {content_regions} set status=0 where content_id=:topic_id and region_id=:region_id and content_type=3", array(':topic_id' => $topic_id, ':region_id' => $currentregion));

				$selsubtopics = db_query("select content_id from {content_regions} where category_id=:category_id and content_id=:topic_id and content_type=3", array(':category_id' => $category_id, ':topic_id' => $topic_id));
				if ($selsubtopics) {
					foreach ($selsubtopics as $selsubtop) {
						db_query("delete from {subtopic_multi_description} where subtopic_id=:subtopic_id and region_id=:region_id", array(':subtopic_id' => $selsubtop->content_id, ':region_id' => $currentregion));
					}
				}
			}
			$selectfiles = db_query("select file_id from {upload_documents} where cat_id in (:category_id) and topic_id in (:subcategory_id) and sub_topic_id=:sub_topic_id and internal_topic_id = :topic_id", array(':category_id' => $category_id, ':subcategory_id' => $subcategory_id, ':sub_topic_id' => $topics_id, ':topic_id' => $topic_id));
			foreach ($selectfiles as $fl) {
				db_query("update {upload_documents_regions} set status=0 where file_id in (:file_id) and region_id=:region_id", array(':file_id' => $fl->file_id, ':region_id' => $currentregion));
				$multifile = array();
				$multifile = getismultifile($fl->file_id);
				if (empty($multifile)) {
					db_query("update {upload_documents} set file_status=0 where file_id in (:file_id)", array(':file_id' => $fl->file_id));
				}
			}
		}
		if (db_affected_rows) {
			echo "success";
		} else {
			echo "fail";
		}
		exit;
	}

	/************** Dropbox save for uploading files ************/
	function file_upload_dropbox_save()
	{

		if (isset($_POST)) {
			$fc = count($_FILES["files"]["name"]);
			$submission_id = addslashes(strip_tags(trim($_REQUEST['id'])));
			$uploaddir = basename(realpath($_SERVER['DOCUMENT_ROOT'] . base_path() . conf_path() . '/files/docs_dropbox2/' . $submission_id));
			if (!is_dir($uploaddir)) {
				mkdir($uploaddir, 0777, true);
			} else {
				chmod($uploaddir, 0777);
			}
			//get seperate file data
			$multiple_file = [];
			
			$file = $_FILES["files"];

			for ($i = 0; $i < $fc; $i++) {
				$multiple_file[$i]["name"] = $file["name"][$i];
				$multiple_file[$i]["type"] = $file["type"][$i];
				$multiple_file[$i]["tmp_name"] = $file["tmp_name"][$i];
				$multiple_file[$i]["size"] = $file["size"][$i];
			}
			// watchdog("File Upload", "Multiple-1. Files ready for upload <pre>" . print_r($multiple_file, true) . "</pre>");
			$response_list = [];
			foreach ($multiple_file as $single_file) {
				$duplicateFileCnt =	db_query("select count(*) from {file_scan_details} where file_name = :fname and scan_status = 'Uploaded_to_s3'", [':fname' => $single_file['name']])->fetchField();
				if($duplicateFileCnt == 0){
					//implementing server side validation for each file
					$invalid_file_type = array(
						'application/vnd.microsoft.portable-executable',
						'image/svg+xml'
					);
					$response  = validate_doc_file($single_file, $invalid_file_type);
					// watchdog("File Upload", "Multiple-2. File being processed for upload  <pre>" . print_r($single_file, true) . "</pre> Response recieved : $response");

					$error_response = [
						'Error in file upload',
						'Sorry! uploaded file format is invalid',
						'Image size should be less than 500MB',
						'S3BucketUpload error',
						'MetadefenderAPI error',
						'Curl error',
					];

					if (!in_array($response['msg'], $error_response)) {
						$response_list[] = ['file_name' => $single_file["name"], 'message' => $response['msg']];
							$scanFields['file_id'] =  $response['msg'];
							$scanFields['file_name'] = $single_file['name'];
							$scanFields['scan_status'] = 'Uploaded_to_s3';				
							db_insert('file_scan_details')->fields($scanFields)->execute();
					} else {
						$response_message = ($response["statusCode"] != '' ? " Statuscode : ". $response['statusCode'] : "");
						$response_list[] = ['file_name' => '' , 'message' => $response['msg'] . $response_message]; 				
					}
				}else{
					$response_list[] = ['file_name' => '' , 'message' => 'Duplicate files found,please choose other files']; 
				}
			}
			echo json_encode($response_list);
		}
	}

	/*********Category***********/
	function category_actions()
	{
		return theme('category_display_theme', array('data' => ''));
	}

	function category_add_category()
	{
		if (has_page_access('create')) {
			$regions = array();
			$regions = getregions();

			print theme('simple_category_add_edit_theme', array('action' => 'add', 'regions' => $regions, 'category_regions' => array()));
		}
		exit;
	}

	function category_edit_category()
	{
		if (has_page_access('edit')) {
			$regions = array();
			$categoryregions = array();
			$regions = getregions();
			if ((arg(0) == 'category') && (arg(1) == 'edit') && (is_numeric(arg(2)))) {
				$categoryregions = getcategoryregions(arg(2));
			}

			print theme('simple_category_add_edit_theme', array('action' => 'edit', 'regions' => $regions, 'category_regions' => $categoryregions));
		}
		exit;
	}

	function category_edit_hyperlink()
	{
		if (has_page_access('edit')) {
			$regions = array();
			$categoryregions = array();

			if ((arg(0) == 'hyperlink') && (arg(1) == 'edit') && (is_numeric(arg(2)))) {
				if (($_GET["cat_id"] != 0) && ($_GET['top_id'] == 0) && ($_GET['stop_id'] == 0) && ($_GET['itop_id'] == 0)) {
					$regions = getregions();
					$categoryregions = getcategoryregions(addslashes(htmlentities($_GET["cat_id"])));
					print theme('simple_hyperlink_add_edit_theme', array('action' => 'edit', 'regions' => $regions, 'category_regions' => $categoryregions));
				}
				if (($_GET["cat_id"] != 0) && ($_GET['top_id'] != 0) && ($_GET['stop_id'] == 0) && ($_GET['itop_id'] == 0)) {

					$regions = getcategoryregions(addslashes(htmlentities($_GET["cat_id"])));
					$categoryregions = getsubcategoryhyperlinkregions(arg(2));
					print theme('simple_subcategoryhyperlink_add_edit_theme', array('action' => 'edit', 'regions' => $regions, 'category_regions' => $categoryregions));
				}

				if (($_GET["cat_id"] != 0) && ($_GET['top_id'] != 0) && ($_GET['stop_id'] != 0) && ($_GET['itop_id'] == 0)) {
					$regions = getsubcategoryregions(addslashes(htmlentities($_GET["top_id"])));
					$categoryregions = getsubcategoryhyperlinkregions(arg(2));
					print theme('simple_topichyperlink_add_edit_theme', array('action' => 'edit', 'regions' => $regions, 'category_regions' => $categoryregions));
				}

				if (($_GET["cat_id"] != 0) && ($_GET['top_id'] != 0) && ($_GET['stop_id'] != 0) && ($_GET['itop_id'] != 0)) {
					$regions = gettopicregions(addslashes(htmlentities($_GET['stop_id'])));
					$categoryregions = getsubcategoryhyperlinkregions(arg(2));
					print theme('simple_subtopichyperlink_add_edit_theme', array('action' => 'edit', 'regions' => $regions, 'category_regions' => $categoryregions));
				}
			}
		}
		exit;
	}

	function getcontentscurrentregionsettings($content_id, $contenttype)
	{
		global $user;
		$result = db_query("select region_id from {content_regions} where content_id in (:content_id) and content_type=:content_type", array(':content_id' => $content_id, ':content_type' => $contenttype));
		$existingregions = array();
		while ($row = $result->fetchAssoc()) {
			$existingregions[$row['region_id']] = $row['region_id'];
		}
		return $existingregions;
	}

	function category_save_category()
	{
		global $user;
		$userid = $user->uid;
		$timestamp = time();
		$cat_status = 1;
		$cat_name = strip_tags($_POST['cat_name']);
		$cat_multi_desc = preg_replace('#<script(.*?)>(.*?)</script>#is', '', $_POST['cat_desc']);
		$cat_desc = explode("~~", $cat_multi_desc);
		$cat_file = $_POST['cat_file'];
		$regions = strip_tags($_POST['regions']);
		$region_process = explode(",", $regions);
		$desc_title = strip_tags($_POST['desc_title']);
		$expiry_date = strip_tags(strtotime(trim($_POST['expiry_date'])));
		$shortname = strip_tags(trim($_POST['shortname']));
		$cat_id = 0;
		$file_id = strip_tags($_POST['file_id']);
		if (arg(2) && is_numeric(arg(2))) {
			$cat_id = arg(2);
		}
		$editFields = array();
		if ($cat_id && $cat_name && $shortname && $cat_desc[0] && $desc_title && $expiry_date && has_page_access('edit')) {
			if (!is_cat_topic_active($cat_id, 'category')) {
				echo 'deleted';
				exit;
			}

			$resultdel = db_query("delete from {multi_description} where category_id=:cat_id", array(':cat_id' => $cat_id));
			for ($j = 0; $j < count($cat_desc); $j++) {
				$descregionFields = array();
				$descregionFields['region_id'] = $region_process[$j];
				$descregionFields['category_id'] = $cat_id;
				$descregionFields['description'] = $cat_desc[$j];
				db_insert('multi_description')->fields($descregionFields)->execute();
			}

			if ($cat_file) {
				//get the scan result upload v2
				$scanned_result = get_scanned_file($file_id);// call the metadefender result API
				$scanned_status = ($scanned_result['status'] == 0 ? 'SCAN_COMPLETED' :  (($scanned_result['status'] == 255 || $scanned_result['status'] == 254) ? "In Progress" : "SCAN_FAILED"));
				$file = ['file_name'=> $userid.'_'.basename($cat_file),'scan_status' => $scanned_status,'submission_type'=>'category','file_id'=>$file_id];
				if( $scanned_result['status'] == 0 ) {
					//No threat detected
					$moved = move_file_to_vwr_server($file, $scanned_result, "uploadv2");
					/* if($moved != 'Copy success!') { 
						echo "fail to move to server";
						exit;
					}  */
				} /* else if($scanned_result['status'] == 255  || $scanned_result['status'] == 254){
					//scan in progress no action needed
				} else{
					echo "Status : " . $scanned_result['status'] . " Message : " . $scanned_result['message'];
					exit;
				} */
				$editFields['category_image'] = $userid . '_' . $cat_file;
				$editFields['scan_file_id'] = $file_id;
				$editFields['scan_file_status'] = $scanned_status;
				
				//scanfields
				//$scanFields['file_id'] = $file_id;
				//$scanFields['file_name'] = $userid . '_' . $cat_file;
				$scanFields['submission_type'] = 'category';
				$scanFields['created_date'] = time();
				$scanFields['scan_status'] = $scanned_status;
				//$file_auto_id = db_insert('file_scan_details')->fields($scanFields)->execute();
				db_update('file_scan_details')->fields($scanFields)->condition('file_id', $file_id)->execute();
			}
			$editFields['category_name'] = $cat_name;
			$editFields['short_name'] = $shortname;
			$editFields['description_title'] = $desc_title;
			$editFields['category_description'] = $cat_desc[0];
			$editFields['expiry_date'] = $expiry_date;
			$editFields['modified_by'] = $userid;
			$editFields['modified_date'] = $timestamp;
			if ($_POST["display_options"] != "") {
				$editFields['display_options'] = $_POST["display_options"];
			}

			

			db_update('category')->fields($editFields)->condition('category_id', $cat_id)->execute();

			$newcatusermapping = array();
			$exitingregionsarray = array();
			$categoryuseraccessmapping = db_query("select * from {category_regions} where category_id=:cat_id and region_id in (:regions) and status=1 ", array(':cat_id' => $cat_id, ':regions' => $regions));
			if ($categoryuseraccessmapping) {
				foreach ($categoryuseraccessmapping as $catuserreg) {
					$exitingregionsarray[] = $catuserreg->region_id;
				}
			}
			if (!empty($exitingregionsarray)) {
				$resultnewregions = array_diff($region_process, $exitingregionsarray);
				$existingregionlist = implode(',', $exitingregionsarray);
				$selcategoryuseraccessmapping = db_query("select * from {category_useraccess_mapping} where category_id=:cat_id and topic_id=0 and region_id in (:existingregionlist)", array(':cat_id' => $cat_id, ':existingregionlist' => $existingregionlist));

				foreach ($resultnewregions as $index => $region_id) {

					foreach ($selcategoryuseraccessmapping as $catuserreg) {
						$newcatusermapping = array();
						$newcatusermapping['topic_id'] = $catuserreg->topic_id;
						$newcatusermapping['category_id'] = $catuserreg->category_id;
						$newcatusermapping['vas_id'] = $catuserreg->vas_id;
						$newcatusermapping['supplier_org_id'] = $catuserreg->supplier_org_id;
						$newcatusermapping['mapping'] = $catuserreg->mapping;
						$newcatusermapping['region_id'] = $region_id;
						$isglobal = 0;
						$isglobal = get_global_supplier($catuserreg->supplier_org_id, 1);
						if ($isglobal > 1) {
							db_insert('category_useraccess_mapping')->fields($newcatusermapping)->execute();
						}
					}
				}
			}


			$subcategorieslist = '';
			$topicslist = '';
			//Selecting the Subcategories Under categories and changing the tables according to regions
			$selectsubcategories = db_query("select content_id from {content_regions} where category_id in (:cat_id) and content_type=1", array(':cat_id' => $cat_id));
			if ($selectsubcategories) {

				foreach ($selectsubcategories as $subcat) {
					$subcategorieslist = $subcat->content_id . ",";
					//Updating the subcategories status to zero if the region id is unchecked
					db_query("update {content_regions} set status=0 where content_id in (:content_id) and content_type=1 and region_id not in (:regions)", array(':content_id' => $subcat->content_id, ':regions' => $regions));

					$count = db_query("select * from {content_regions} where category_id in ($cat_id) and content_id in (:content_id) and status=1 and content_type=1", array(':content_id' => $subcat->content_id));

					db_query("DELETE from {subcategory_multi_description} where subcategory_id in (:content_id) and region_id not in (:regions)", array(':content_id' => $subcat->content_id, ':regions' => $regions));
					if ($count->rowCount() == 0) {
						db_query("update {topic} set topic_status=0 where topic_id in (:content_id)", array(':content_id' => $subcat->content_id));
					}


					//Removing the Upload documents when the subcategory is disassociated
					$selectfiles = db_query("select file_id from {upload_documents} where topic_id in (:content_id) and cat_id in (:cat_id) and sub_topic_id=0 and internal_topic_id=0", array(':content_id' => $subcat->content_id, ':cat_id' => $cat_id));
					if ($selectfiles) {
						foreach ($selectfiles as $fl) {
							db_query("update {upload_documents_regions} set status=0 where file_id in (:file_id) and region_id not in (:regions)", array(':file_id' => $fl->file_id, ':regions' => $regions));
						}
					}

					$hyperlinkscount = db_query("select * from {hyperlinks} where cat_id in (:cat_id) and topic_id in (:content_id) and sub_topic_id=0 and internal_topic_id=0", array(':cat_id' => $cat_id, ':content_id' => $subcat->content_id));
					if ($hyperlinkscount) {
						foreach ($hyperlinkscount as $hyp) {
							db_query("update {hyperlinks_regions} set status=0 where hyperlink_id in (:hyperlink_id) and region_id not in (:regions)", array(':hyperlink_id' => $hyp->hyperlink_id, ':regions' => $regions));
						}
					}

					//Removing the Dropbox when the subcategory is disassociated
					$selectdropbox = db_query("select dbox_id from {dropbox_category_mapping} where cat_id in (:cat_id) and topic_id in (:content_id) and region_id not in (:regions)", array(':cat_id' => $cat_id, ':content_id' => $subcat->content_id, ':regions' => $regions));
					if ($selectdropbox) {
						foreach ($selectdropbox as $sdbox) {
							db_query("update {dropbox_regions} set status=0 where dropbox_id in (:dbox_id) and region_id not in (:regions)", array(':dbox_id' => $sdbox->dbox_id, ':regions' => $regions));
						}
						db_query("DELETE from {dropbox_category_mapping} where cat_id in (:cat_id) and topic_id in (:content_id) and region_id not in (:regions)", array(':cat_id' => $cat_id, ':content_id' => $subcat->content_id, ':regions' => $regions));
					}

					//Removing the User Access when the subcategory is disassociated			
					$selectsubcatuseraccess = db_query("select topic_id  from {category_useraccess} where topic_id  in (:content_id) and category_id in (:cat_id)", array(':content_id' => $subcat->content_id, ':cat_id' => $cat_id));
					if ($selectsubcatuseraccess) {
						foreach ($selectsubcatuseraccess as $ssubcatuaccess) {
							db_query("DELETE FROM {category_useraccess} where topic_id in (:topic_id) and category_id in (:cat_id) and region_id not in (:regions)", array(':topic_id' => $ssubcatuaccess->topic_id, ':cat_id' => $cat_id, ':regions' => $regions));
						}
					}
				}
			}



			//Selecting the Topics Under categories and changing the tables according to regions
			$selecttopics = db_query("select content_id from {content_regions} where category_id in (:cat_id) and content_type=2", array(':cat_id' => $cat_id));
			if ($selecttopics) {
				$subcategoriesgroup = substr($subcategorieslist, 0, strlen($subcategorieslist) - 1);
				foreach ($selecttopics as $seltop) {
					$topicslist = $seltop->content_id . ",";
					db_query("DELETE from {topic_multi_description} where topic_id in (:content_id) and region_id not in (:regions)", array(':content_id' => $seltop->content_id, ':regions' => $regions));
					//Updating the Topics status to zero if the region id is unchecked
					db_query("update {content_regions} set status=0 where content_id in (:content_id) and content_type=2 and region_id not in (:regions)", array(':content_id' => $seltop->content_id, ':regions' => $regions));
					$count = db_query("select * from {content_regions} where category_id in (:cat_id) and content_id in (:content_id) and status=1 and content_type=2", array(':cat_id' => $cat_id, ':content_id' => $seltop->content_id));
					if ($count->rowCount() == 0) {
						db_query("update {topic} set topic_status=0 where topic_id in (:content_id)", array(':content_id' => $seltop->content_id));
					}


					//Removing the Upload documents when the Topics is disassociated
					$selectfiles = db_query("select file_id from {upload_documents} where topic_id in (:subcategoriesgroup) and cat_id in (:cat_id) and sub_topic_id in (:content_id) and internal_topic_id=0", array(':subcategoriesgroup' => $subcategoriesgroup, ':cat_id' => $cat_id, ':content_id' => $seltop->content_id));
					if ($selectfiles) {
						foreach ($selectfiles as $fl) {
							db_query("update {upload_documents_regions} set status=0 where file_id in (:file_id) and region_id not in (:regions)", array(':file_id' => $fl->file_id, ':regions' => $regions));
						}
					}

					$hyperlinkscounttopics = db_query("select * from {hyperlinks} where cat_id in (:cat_id) and topic_id in (:subcategoriesgroup) and sub_topic_id=(:content_id) and internal_topic_id=0", array(':cat_id' => $cat_id, ':subcategoriesgroup' => $subcategoriesgroup, ':content_id' => $seltop->content_id));
					if ($hyperlinkscounttopics) {
						foreach ($hyperlinkscounttopics as $hypt) {
							db_query("update {hyperlinks_regions} set status=0 where hyperlink_id in (:hyperlink_id) and region_id not in (:regions)", array(':hyperlink_id' => $hyp->hyperlink_id, ':regions' => $regions));
						}
					}


					//Removing the Dropbox when the Topics is disassociated
					$selectdropbox = db_query("select dbox_id from {dropbox_category_mapping} where cat_id in (:cat_id) and topic_id in (:content_id) and region_id not in (:regions)", array(':cat_id' => $cat_id, ':content_id' => $seltop->content_id, ':regions' => $regions));
					if ($selectdropbox) {
						foreach ($selectdropbox as $sdbox) {
							db_query("update {dropbox_regions} set status=0 where dropbox_id in (:dbox_id) and region_id not in (:regions)", array(':dbox_id' => $sdbox->dbox_id, ':regions' => $regions));
						}
						db_query("DELETE from {dropbox_category_mapping} where cat_id in (:cat_id) and topic_id in (:content_id) and region_id not in (:regions)", array(':cat_id' => $cat_id, ':content_id' => $seltop->content_id, ':regions' => $regions));
					}

					//Removing the User Access when the Topics is disassociated			
					$selecttopicuseraccess = db_query("select topic_id  from {category_useraccess} where topic_id  in (:content_id) and category_id in (:cat_id)", array(':content_id' => $seltop->content_id, ':cat_id' => $cat_id));
					if ($selecttopicuseraccess) {
						foreach ($selecttopicuseraccess as $stopicuaccess) {
							db_query("DELETE FROM {category_useraccess} where topic_id in (:topic_id) and region_id not in (:regions) and category_id in (:cat_id)", array(':topic_id' => $stopicuaccess->topic_id, ':regions' => $regions, ':cat_id' => $cat_id));
						}
					}
				}
			}




			//Selecting the Sub Topics Under categories and changing the tables according to regions
			$selectsubtopics = db_query("select content_id from {content_regions} where category_id in (:cat_id) and content_type=3", array(':cat_id' => $cat_id));
			if ($selectsubtopics) {
				$topicsgroup = substr($topicslist, 0, strlen($topicslist) - 1);
				foreach ($selectsubtopics as $selsubtop) {

					db_query("DELETE from {subtopic_multi_description} where subtopic_id in (:content_id) and region_id not in (:regions)", array(':content_id' => $selsubtop->content_id, ':regions' => $regions));
					//Updating the Topics status to zero if the region id is unchecked
					db_query("update {content_regions} set status=0 where content_id in (:content_id) and content_type=3 and region_id not in (:regions)", array(':content_id' => $selsubtop->content_id, ':regions' => $regions));
					$count = db_query("select * from {content_regions} where category_id in (:cat_id) and content_id in (:content_id) and status=1 and content_type=3", array(':cat_id' => $cat_id, ':content_id' => $selsubtop->content_id));
					if ($count->rowCount() == 0) {
						db_query("update {topic} set topic_status=0 where topic_id in (:content_id)", array(':content_id' => $selsubtop->content_id));
					}


					//Removing the Upload documents when the Topics is disassociated
					$selectfiles = db_query("select file_id from {upload_documents} where topic_id in (:subcategoriesgroup) and cat_id in (:cat_id) and sub_topic_id in (:topicsgroup)  and internal_topic_id in (:content_id)", array(':subcategoriesgroup' => $subcategoriesgroup, ':cat_id' => $cat_id, ':topicsgroup' => $topicsgroup, ':content_id' => $selsubtop->content_id));
					if ($selectfiles) {
						foreach ($selectfiles as $fl) {
							db_query("update {upload_documents_regions} set status=0 where file_id in (:file_id) and region_id not in (:regions)", array(':file_id' => $fl->file_id, ':regions' => $regions));
						}
					}

					$hyperlinkscountsubtopics = db_query("select * from {hyperlinks} where cat_id in (:cat_id) and topic_id in (:subcategoriesgroup) and sub_topic_id=(:topicsgroup) and internal_topic_id in (:content_id)", array(':cat_id' => $cat_id, ':subcategoriesgroup' => $subcategoriesgroup, ':topicsgroup' => $topicsgroup, ':content_id' => $selsubtop->content_id));
					if ($hyperlinkscountsubtopics) {
						foreach ($hyperlinkscountsubtopics as $hypsubt) {
							db_query("update {hyperlinks_regions} set status=0 where hyperlink_id in (:hyperlink_id) and region_id not in (:regions)", array(':hyperlink_id' => $hypsubt->hyperlink_id, ':regions' => $regions));
						}
					}


					//Removing the Dropbox when the Topics is disassociated
					$selectdropbox = db_query("select dbox_id from {dropbox_category_mapping} where cat_id in (:cat_id) and topic_id in (:content_id) and region_id not in (:regions)", array(':cat_id' => $cat_id, ':content_id' => $selsubtop->content_id, ':regions' => $regions));
					if ($selectdropbox) {
						foreach ($selectdropbox as $sdbox) {
							db_query("update {dropbox_regions} set status=0 where dropbox_id in (:dbox_id) and region_id not in (:regions)", array(':dbox_id' => $sdbox->dbox_id, ':regions' => $regions));
						}
						db_query("DELETE from {dropbox_category_mapping} where cat_id in (:cat_id) and topic_id in (:content_id) and region_id not in (:regions)", array(':cat_id' => $cat_id, ':content_id' => $selsubtop->content_id, ':regions' => $regions));
					}

					//Removing the User Access when the Topics is disassociated			
					$selectsubtopicuseraccess = db_query("select topic_id  from {category_useraccess} where topic_id  in (:content_id) and category_id in (:cat_id)", array(':content_id' => $selsubtop->content_id, ':cat_id' => $cat_id));
					if ($selectsubtopicuseraccess) {
						foreach ($selectsubtopicuseraccess as $ssubtopicuaccess) {
							db_query("DELETE FROM {category_useraccess} where topic_id in (:topic_id) and region_id not in (:regions) and category_id in (:cat_id)", array(':topic_id' => $ssubtopicuaccess->topic_id, ':regions' => $regions, ':cat_id' => $cat_id));
						}
					}
				}
			}



			if (count($region_process) > 0) {
				$resultregionsset = array();
				$resultregionsset = db_query("SELECT category_region_id,region_id FROM 
				{category_regions} where category_id=:cat_id", array(':cat_id' => $cat_id))->fetchAllKeyed(1, 0);
				$existingregions = array_keys($resultregionsset);
				foreach ($region_process as $reginindex => $region_id) {
					$resultset = array();
					$regionFields = array();
					unset($resultregionsset[$region_id]);
					$resultset = db_query("SELECT category_region_id FROM {category_regions} where 
					region_id = :region_id && category_id=:cat_id", array(':region_id' => $region_id, ':cat_id' => $cat_id))->fetchColumn();
					if (!empty($resultset)) {
						$regionFields = array();
						$regionFields['status'] = 1;
						db_update('category_regions')->fields($regionFields)->condition('category_id', $cat_id)->condition('region_id', $region_id)->execute();
					} else {
						$regionFields['region_id'] = $region_id;
						$regionFields['category_id'] = $cat_id;
						$regionFields['status'] = 1;
						db_insert('category_regions')->fields($regionFields)->execute();
					}
				}

				if (count($resultregionsset) > 0) {
					foreach ($resultregionsset as $region_id => $category_region_id) {
						$regionFields = array();
						$regionFields['status'] = 0;
						db_update('category_regions')->fields($regionFields)->condition('category_id', $cat_id)->condition('region_id', $region_id)->execute();
						$selectfiles = db_query("select file_id from {upload_documents} where cat_id in (:cat_id) and topic_id=0 and sub_topic_id=0 and internal_topic_id=0", array(':cat_id' => $cat_id));
						if ($selectfiles) {
							foreach ($selectfiles as $fl) {
								db_query("update {upload_documents_regions} set status=0 where file_id in (:file_id) and region_id in (:region_id)", array(':file_id' => $fl->file_id, ':region_id' => $region_id));
							}
						}

						$selectdropbox = db_query("select dbox_id from {dropbox_category_mapping} where cat_id in (:cat_id) and topic_id = 0 and region_id in (:region_id)", array(':cat_id' => $cat_id, ':region_id' => $region_id));
						if ($selectdropbox) {
							foreach ($selectdropbox as $sdbox) {
								db_query("update {dropbox_regions} set status=0 where dropbox_id in (:dbox_id) and region_id in (:region_id)", array(':dbox_id' => $sdbox->dbox_id, ':region_id' => $region_id));
							}
							db_query("DELETE from {dropbox_category_mapping} where cat_id in (:cat_id) and topic_id=0 and region_id in (:region_id)", array(':cat_id' => $cat_id, ':region_id' => $region_id));
						}

						$selectcatuseraccess = db_query("select category_id from {category_useraccess} where category_id in (:cat_id)", array(':cat_id' => $cat_id));
						if ($selectcatuseraccess) {
							foreach ($selectcatuseraccess as $scatuaccess) {
								db_query("DELETE FROM {category_useraccess} where category_id in (:category_id) and region_id in (:region_id)", array(':category_id' => $scatuaccess->category_id, ':region_id' => $region_id));
							}
						}

						$selectcatuseraccessmapping = db_query("select category_id  from {category_useraccess_mapping} where category_id  in (:cat_id)", array(':cat_id' => $cat_id));
						if ($selectcatuseraccessmapping) {
							foreach ($selectcatuseraccessmapping as $selectcatuaccessmap) {
								db_query("DELETE FROM {category_useraccess_mapping} where category_id in (:category_id) and region_id in (:region_id)", array(':category_id' => $selectcatuaccessmap->category_id, ':region_id' => $region_id));
							}
						}
					}
				}


				$resultontentreg = db_query("SELECT category_region_id,region_id FROM 
				{category_regions} where category_id=:cat_id and status=1 ", array(':cat_id' => $cat_id))->fetchAllKeyed(1, 0);

				$existingprocessregions = array_keys($resultontentreg);

				if (count($existingprocessregions) == 1) {
					foreach ($existingprocessregions as $region_id) {
						db_query("DELETE FROM {category_useraccess_mapping} where category_id in (:cat_id) and region_id not in (:region_id)", array(':cat_id' => $cat_id, ':region_id' => $region_id));
					}
				}
			}
		} else if ($cat_name && $shortname && $cat_desc[0] && $cat_file && $desc_title &&  $expiry_date && has_page_access('create')) {
			$editFields['category_name'] = $cat_name;
			$editFields['short_name'] = $shortname;
			$editFields['description_title'] = $desc_title;
			$editFields['category_description'] = $cat_desc[0];
			$editFields['category_image'] = $userid . '_' . $cat_file;
			$editFields['expiry_date'] = $expiry_date;
			$editFields['category_status'] = $cat_status;
			$editFields['created_by'] = $userid;
			$editFields['created_date'] = $timestamp;
			//get the scan result 
			$scanned_result = get_scanned_file($file_id);// call the metadefender result API
			$scanned_status = ($scanned_result['status'] == 0 ? 'SCAN_COMPLETED' :  (($scanned_result['status'] == 255 || $scanned_result['status'] == 254) ? "In Progress" : "SCAN_FAILED"));
			$file = ['file_name'=> $userid.'_'.basename($cat_file),'scan_status' => $scanned_status,'submission_type'=>'category','file_id'=>$file_id];
			if( $scanned_result['status'] == 0 ) {
				//No threat detected
				$moved = move_file_to_vwr_server($file, $scanned_result, "uploadv2");
				/* if($moved != 'Copy success!') { 
					echo "fail to move to server";
					exit;
				} */ 
			}/* else if($scanned_result['status'] == 255  || $scanned_result['status'] == 254){
				//scan in progress no action needed
			} else{
				echo "Status : " . $scanned_result['status'] . " Message : " . $scanned_result['message'];
				exit;
			}*/
			$editFields['scan_file_id'] = $file_id;
			$editFields['scan_file_status'] = $scanned_status;

			//scanfields
			//$scanFields['file_id'] = $file_id;
			//$scanFields['file_name'] = $userid . '_' . $cat_file;
			$scanFields['submission_type'] = 'category';
			$scanFields['created_date'] = time();
			$scanFields['scan_status'] = $scanned_status;
			//$file_auto_id = db_insert('file_scan_details')->fields($scanFields)->execute();
			db_update('file_scan_details')->fields($scanFields)->condition('file_id', $file_id)->execute();


			$auto_id = db_insert('category')->fields($editFields)->execute();
			if ($auto_id > 0) {
				if (count($region_process) > 0) {
					foreach ($region_process as $reginindex => $region_id) {
						$regionFields = array();
						$regionFields['region_id'] = $region_id;
						$regionFields['category_id'] = $auto_id;
						$regionFields['status'] = 1;
						db_insert('category_regions')->fields($regionFields)->execute();
					}
				}
				for ($j = 0; $j < count($cat_desc); $j++) {
					$descregionFields = array();
					$descregionFields['region_id'] = $region_process[$j];
					$descregionFields['category_id'] = $auto_id;
					$descregionFields['description'] = $cat_desc[$j];
					db_insert('multi_description')->fields($descregionFields)->execute();
				}
			}
		} else if (!$expiry_date) {
			echo 'expdate';
			exit;
		} else {
			echo 'invalid';
			exit;
		}

		if (db_affected_rows) {
			echo 'success';
		} else {
			echo 'fail';
		}
		exit;
	}
	function category_delete_hyperlink()
	{
		$deletehyperlink = db_query("update {hyperlinks} set hyperlink_status=0 where hyperlink_id=:item_id", array(':item_id' => $_POST[item_id]));
		echo "success";
		exit;
	}
	function category_delete_category()
	{
		global $user;
		$userid = $user->uid;
		$cat_status = 0;
		$cat_id = 0;
		$count = '';
		if (arg(2) && is_numeric(arg(2))) {
			$cat_id = arg(2);
		}


		if ($cat_id && has_page_access('edit')) {
			$editFields = array();
			$editFields['category_status'] = $cat_status;
			$editFields['modified_by'] = $userid;
			$editFields['deleted'] = time();
			$editcategoryFields = array();
			$editcategoryFields['topic_status'] = $cat_status;
			$editcategoryFields['modified_by'] = $userid;
			$editcategoryFields['deleted'] = time();
			$currentregion = $_COOKIE['currentregiontab'];

			//Removing the Upload documents associated with category creation when the region is deleted
			$selectfiles = db_query("select file_id from {upload_documents} where cat_id in (:cat_id) and topic_id =0 and sub_topic_id=0 and internal_topic_id=0", array(':cat_id' => $cat_id));
			if ($selectfiles) {
				foreach ($selectfiles as $fl) {
					db_query("update {upload_documents_regions} set status=0 where file_id in (:file_id) and region_id=:region_id", array(':file_id' => $fl->file_id, ':region_id' => $currentregion));
				}
			}

			$subchilds = db_query("select * from {content_regions} where category_id=:cat_id", array(':cat_id' => $cat_id));
			if ($subchilds) {
				foreach ($subchilds as $subchild) {

					$selectfiles = db_query("select file_id from {upload_documents} where cat_id in (:cat_id) ", array(':cat_id' => $cat_id));
					if ($selectfiles) {
						foreach ($selectfiles as $fl) {


							db_query("update {upload_documents_regions} set status=0 where file_id in (:file_id) and region_id=:region_id", array(':file_id' => $fl->file_id, ':region_id' => $currentregion));
							$multifile = array();
							$multifile = getismultifile($fl->file_id);
							if (empty($multifile)) {

								db_query("update {upload_documents} set file_status=0 where file_id in (:file_id)", array(':file_id' => $fl->file_id,));
							}
						}
					}


					$hyperlinkfiles = db_query("select hyperlink_id from {hyperlinks} where cat_id in (:cat_id) ", array(':cat_id' => $cat_id));
					if ($hyperlinkfiles) {
						foreach ($hyperlinkfiles as $flh) {


							db_query("update {hyperlinks_regions} set status=0 where hyperlink_id in (:hyperlink_id) and region_id=:region_id", array(':hyperlink_id' => $flh->hyperlink_id, ':region_id' => $currentregion));
							$multifilehyperlink = array();
							$multifilehyperlink = getismultihyperlink($flh->hyperlink_id);
							if (empty($multifilehyperlink)) {

								db_query("update {hyperlinks} set hyperlink_status=0 where hyperlink_id in (:hyperlink_id)", array(':hyperlink_id' => $flh->hyperlink_id));
							}
						}
					}
				}
			}

			//Removing the Dropbox when the category is disassociated with region
			$selectdropbox = db_query("select dbox_id from {dropbox_category_mapping} where cat_id in (:cat_id) and region_id=:region_id", array(':cat_id' => $cat_id, ':region_id' => $currentregion));
			if ($selectdropbox) {
				foreach ($selectdropbox as $sdbox) {
					db_query("update {dropbox_regions} set status=0 where dropbox_id in (:dbox_id) and region_id=:region_id", array(':dbox_id' => $sdbox->dbox_id, ':region_id' => $currentregion));
				}
				db_query("DELETE FROM {dropbox_category_mapping} where cat_id in (:cat_id) and region_id=:region_id", array(':cat_id' => $cat_id, ':region_id' => $currentregion));
			}

			//Removing the multi description  associated with category creation when the region is deleted
			$catmultidescription = db_query("select * from {multi_description }  WHERE category_id= :cat_id and region_id=:region_id", array(':cat_id' => $cat_id, ':region_id' => $currentregion));
			if ($catmultidescription->rowCount() == 1) {
				db_query("DELETE FROM {multi_description} WHERE category_id=:cat_id and region_id=:region_id", array(':cat_id' => $cat_id, ':region_id' => $currentregion));
			}

			//Removing the Category mapping with User access associated with category creation when the region is deleted

			db_query("DELETE FROM {category_useraccess_mapping} WHERE category_id=:cat_id and region_id=:region_id", array(':cat_id' => $cat_id, ':region_id' => $currentregion));
			db_query("DELETE FROM {dropbox_category_mapping} WHERE cat_id=:cat_id and topic_id=0 and region_id=:region_id", array(':cat_id' => $cat_id, ':region_id' => $currentregion));

			//Removing the Category User access associated with category creation when the region is deleted
			$categoryuseraccess = db_query("select * from {category_useraccess}  WHERE category_id=:cat_id and region_id=:region_id", array(':cat_id' => $cat_id, ':region_id' => $currentregion));
			if ($categoryuseraccess->rowCount() == 1) {
				db_query("DELETE FROM {category_useraccess} WHERE category_id=:cat_id and region_id=:region_id", array(':cat_id' => $cat_id, ':region_id' => $currentregion));
			}

			$currentdeactivation = db_query("select * from {category_regions} where category_id=:cat_id and status=1", array(':cat_id' => $cat_id));
			if ($currentdeactivation->rowCount() == 1) {

				//Removing the category Id associated with regions when the region is deleted
				db_query("update {category_regions} set status=0 where category_id=:cat_id and region_id=:region_id", array(':cat_id' => $cat_id, ':region_id' => $currentregion));
				db_query("update {content_regions} set status=0 where category_id=:cat_id and region_id=:region_id", array(':cat_id' => $cat_id, ':region_id' => $currentregion));

				//Removing the categories associated with regions when the region is deleted
				db_update('category')->fields($editFields)->condition('category_id', $cat_id)->execute();

				//Removing the subcategories,topics and subtopics associated with regions when the region is deleted
				db_update('topic')->fields($editcategoryFields)->condition('category_id', $cat_id)->execute();

				$selsubcategories = db_query("select content_id from {content_regions} where category_id=:cat_id and content_type=1", array(':cat_id' => $cat_id));
				if ($selsubcategories) {
					foreach ($selsubcategories as $selsubcat) {
						db_query("delete from {subcategory_multi_description} where subcategory_id=:subcategory_id and region_id=:region_id", array(':subcategory_id' => $selsubcat->content_id, ':region_id' => $currentregion));
					}
				}


				$seltopics = db_query("select content_id from {content_regions} where category_id=:cat_id and content_type=2", array(':cat_id' => $cat_id));
				if ($seltopics) {
					foreach ($seltopics as $seltop) {
						db_query("delete from {topic_multi_description} where topic_id=:topic_id and region_id=:region_id", array(':topic_id' => $seltop->content_id, ':region_id' => $currentregion));
					}
				}

				$selsubtopics = db_query("select content_id from {content_regions} where category_id=:cat_id and content_type=3", array(':cat_id' => $cat_id));
				if ($selsubtopics) {
					foreach ($selsubtopics as $selsubtop) {
						db_query("delete from {subtopic_multi_description} where subtopic_id=:subtopic_id and region_id=:region_id", array(':subtopic_id' => $selsubtop->content_id, ':region_id' => $currentregion));
					}
				}
			} else {
				//Removing the category Id associated with regions when the region is deleted		
				db_query("update {category_regions} set status=0 where category_id=:cat_id and region_id=:region_id", array(':cat_id' => $cat_id, ':region_id' => $currentregion));
				db_query("update {content_regions} set status=0 where category_id=:cat_id and region_id=:region_id", array(':cat_id' => $cat_id, ':region_id' => $currentregion));

				$selsubcategories = db_query("select content_id from {content_regions} where category_id=:cat_id and content_type=1", array(':cat_id' => $cat_id));
				if ($selsubcategories) {
					foreach ($selsubcategories as $selsubcat) {
						db_query("delete from {subcategory_multi_description} where subcategory_id=:subcategory_id and region_id=:region_id", array(':subcategory_id' => $selsubcat->content_id, ':region_id' => $currentregion));
					}
				}


				$seltopics = db_query("select content_id from {content_regions} where category_id=:cat_id and content_type=2", array(':cat_id' => $cat_id));
				if ($seltopics) {
					foreach ($seltopics as $seltop) {
						db_query("delete from {topic_multi_description} where topic_id=:topic_id and region_id=:region_id", array(':topic_id' => $seltop->content_id, ':region_id' => $currentregion));
					}
				}

				$selsubtopics = db_query("select content_id from {content_regions} where category_id=:cat_id and content_type=3", array(':cat_id' => $cat_id));
				if ($selsubtopics) {
					foreach ($selsubtopics as $selsubtop) {
						db_query("delete from {subtopic_multi_description} where subtopic_id=:subtopic_id and region_id=:region_id", array(':subtopic_id' => $selsubtop->content_id, ':region_id' => $currentregion));
					}
				}
			}
		}
		if (db_affected_rows) {
			echo "success";
		} else {
			echo "fail";
		}

		exit;
	}
	//metadefender scan
	function category_upload_category()
	{
		$valid_file_type = array(
			'image/jpeg',
			'image/gif',
			'image/png',
			'image/bmp'
		);
		$upCat = $_FILES['categoryfile'];
		$duplicateFileCnt =	db_query("select count(*) from {file_scan_details} where file_name = :fname and scan_status = 'Uploaded_to_s3'", [':fname' => $_FILES['categoryfile']["name"]])->fetchField();
		if($duplicateFileCnt == 0){	
			$response  = validate_file($upCat, $valid_file_type);
			//print_R($response);
			$error_response = [
				'Error in file upload',
				'Upload jpg, gif, png, bmp format images only',
				'Image size should be less than 500MB',
				'S3BucketUpload error',
				'MetadefenderAPI error',
				'Curl error'
			];
			if(!in_array($response["msg"],$error_response)) {
					$scanFields['file_id'] =  $response['msg'];
					$scanFields['file_name'] = $_FILES['categoryfile']["name"];
					$scanFields['scan_status'] = 'Uploaded_to_s3';				
					db_insert('file_scan_details')->fields($scanFields)->execute();
					echo json_encode(['file_name' => $_FILES['categoryfile']["name"] , 'message' => $response['msg']]);
			}else {
				$response_message = ($response["statusCode"] != '' ? " Statuscode : ". $response['statusCode'] : "");
				//echo 'status'.$response["statusCode"];
				echo json_encode(['file_name' => '', 'message' => $response['msg'] . $response_message]);
			}	
		}else{
				echo json_encode(['file_name' => '' , 'message' => 'Duplicate file found,please choose other files']); 
		}
	}
	
	function category_upload_open()
	{
		if (is_vwr_user_role()) {
			print theme('category_upload_documents_theme', array('data' => '', 'level' => ''));
		}
	}

	function category_upload_documents()
	{
		$path = str_replace('"', '', $_REQUEST['path']);
		
		$structure = 'sites/default/files/docs/';
		$timestamp = time();
		$upload_max = getMaxUploadLimit(); //500MB
		$comp_size = 500 * 1048576; // 500MB;
		$upload_max = (is_numeric($upload_max) && $upload_max <= $comp_size) ? $upload_max : $comp_size;
		$current_file_size = intval($_FILES["doc_file"]["size"]);
		if (($upload_max >= $current_file_size) && $current_file_size && is_numeric($current_file_size)) {
			// Applied server side validation of file here..
			$invalid_file_type = array(
				'application/vnd.microsoft.portable-executable',
				'image/svg+xml'
			);
			$duplicateFileCnt =	db_query("select count(*) from {file_scan_details} where file_name = :fname and scan_status = 'Uploaded_to_s3'", [':fname' => $_FILES['doc_file']['name']])->fetchField();
			if($duplicateFileCnt == 0){
				$response  = validate_doc_file($_FILES['doc_file'], $invalid_file_type);

				$error_response = [
					'Error in file upload',
					'Sorry! uploaded file format is invalid',
					'File size should not exceed 500MB',
					'S3BucketUpload error',
					'MetadefenderAPI error',
					'Curl error'
				];

				if(!in_array($response["msg"],$error_response)) {
					$scanFields['file_id'] =  $response['msg'];
					$scanFields['file_name'] = $_FILES['doc_file']["name"];
					$scanFields['scan_status'] = 'Uploaded_to_s3';				
					db_insert('file_scan_details')->fields($scanFields)->execute();	
					echo json_encode(['file_name' => $_FILES['doc_file']["name"] , 'message' => $response['msg']]);
				}else {
					$response_message = ($response["statusCode"] != '' ? " Statuscode : ". $response['statusCode'] : "");
					echo json_encode(['file_name' => '', 'message' => $response['msg'] . $response_message]);
				}
			}else{
					echo json_encode(['file_name' => '' , 'message' => 'Duplicate files found,please choose other files']);
			}
		} else {
			echo 'maxsize';
		}
		exit;
	}


	function hyperlink_upload_documents()
	{
		$path = str_replace('"', '', $_REQUEST['path']);
		
		$structure = 'sites/default/files/docs/';
		$timestamp = time();
		$upload_max = getMaxUploadLimit(); //120MB
		$comp_size = 50 * 1048576; // 50MB;
		$upload_max = (is_numeric($upload_max) && $upload_max <= $comp_size) ? $upload_max : $comp_size;
		$current_file_size = intval($_FILES["hyperlinkfile"]["size"]);

		// Applied server side validation of file here..
		$valid_file_type = array(
			'image/jpeg',
			'image/gif',
			'image/png',
			'image/bmp'
		);
		$upHyp = $_FILES['hyperlinkfile'];
		$response  = validate_file($upHyp, $valid_file_type);

		$error_response = [
			'Error in file upload',
			'Upload jpg, gif, png, bmp format images only',
			'Image size should be less than 500MB',
			'S3BucketUpload error',
			'MetadefenderAPI error',
			'Curl error'
		];

		if(!in_array($response["msg"],$error_response)) {
			echo json_encode(['file_name' => $_FILES['hyperlinkfile']["name"] , 'message' => $response["msg"]]);
		}else{
			$response_message = ($response["statusCode"] != '' ? " Statuscode : ". $response['statusCode'] : "");
			echo json_encode(['file_name' => '', 'message' => $response['msg'] . $response_message]);
		}
		exit;
	}

	function is_cat_topic_active($id, $level)
	{
		$result = '';
		if ($level == 'category') {
			$result = db_query("SELECT category_id FROM {category} where category_id = :id && category_status=1", array(':id' => $id))->fetchColumn();
		} else {
			$result = db_query("SELECT topic_id FROM {topic} where topic_id = :id && topic_status=1", array(':id' => $id))->fetchColumn();
		}
		return $result;
	}

	function getregions()
	{
		$resultset = db_query("SELECT * FROM {manage_regions} where region_status =1");
		$regions = array();
		foreach ($resultset as $row) {
			$regions[$row->region_id] = (array) $row;
		}
		return $regions;
	}
	//check whether the content is available for the selected region
	function Iscategoryregionaccess($category_id, $region_id)
	{

		$resultset = db_query("select region_id from {category_regions} as vwrcr  where vwrcr.status=1 and vwrcr.category_id=:category_id 
								and vwrcr.region_id in (:region_id) ", array(':region_id' => $region_id, ':category_id' => $category_id));


		$contentregions = array();
		while ($row = $resultset->fetchAssoc()) {
			$contentregions[$row['region_id']] = $row['region_id'];
		}
		return $contentregions;
	}
	//check whether the content is available for the selected region
	function Iscontentregionaccess($category_id, $content_id, $region_id)
	{
		$resultset = db_query("select region_id from {content_regions} as vwrcr  where vwrcr.status=1 and vwrcr.category_id=:category_id 
								and vwrcr.region_id in ($region_id) and vwrcr.content_id=:content_id", array(':category_id' => $category_id, ':content_id' => $content_id));
		$contentregions = array();
		while ($row = $resultset->fetchAssoc()) {
			$contentregions[$row['region_id']] = $row['region_id'];
		}
		return $contentregions;
	}
	function getcategoryregions($category_id)
	{

		$resultset = db_query("SELECT * FROM {category_regions} as cr INNER JOIN {manage_regions} as mr on cr.region_id=mr.region_id
	where cr.status =1 and cr.category_id in ($category_id) and mr.region_status=1");


		$categoryregions = array();
		foreach ($resultset as $row) {
			$categoryregions[$row->region_id] = (array) $row;
		}
		return $categoryregions;
	}

	function gethyperlinkcategoryregions($hyperlink_id)
	{

		$resultset = db_query("SELECT * FROM {hyperlinks_regions} as hr INNER JOIN {manage_regions} as mr 
	on hr.region_id=mr.region_id
	where hr.status =1 and hr.hyperlink_id in ($hyperlink_id) and mr.region_status=1");


		$categoryregions = array();
		while ($row = $resultset->fetchAssoc()) {
			$categoryregions[$row['region_id']] = $row;
		}
		return $categoryregions;
	}
	function getdiffsupplierorgs($category_id, $topic_id, $supplier_org_list, $region_id)
	{

		$resultset = db_query("select DISTINCT vwrcum.supplier_org_id FROM vwr_category_useraccess_mapping as vwrcum 
								where vwrcum.supplier_org_id not in ($supplier_org_list) and vwrcum.region_id =:region_id and vwrcum.category_id =:category_id and vwrcum.topic_id=:topic_id", array(':region_id' => $region_id, ':category_id' => $category_id, ':topic_id' => $topic_id));


		$supplierorgs = array();
		foreach ($resultset as $row) {
			$supplierorgs[$row['supplier_org_id']] = $row['supplier_org_id'];
		}
		return $supplierorgs;
	}

	function getsubcategoryregions($subcategory_id)
	{
		$resultset = db_query("SELECT * FROM {content_regions} as cr INNER JOIN {manage_regions} as mr on cr.region_id=mr.region_id
		where cr.status =1 and cr.content_id in ($subcategory_id) and mr.region_status=1 and cr.content_type=1");
		$subcategoryregions = array();
		foreach ($resultset as $row) {
			$subcategoryregions[$row->region_id] = (array) $row;
		}
		return $subcategoryregions;
	}

	function getsubcategoryhyperlinkregions($hyperlinkid)
	{

		$resultset = db_query("SELECT * FROM {hyperlinks_regions} as hr INNER JOIN {manage_regions} as mr on 
		hr.region_id=mr.region_id
		where hr.status =1 and hr.hyperlink_id in ($hyperlinkid) and mr.region_status=1");
		$subcategoryregions = array();
		foreach ($resultset as $row) {
			$subcategoryregions[$row->region_id] = (array) $row;
		}
		return $subcategoryregions;
	}
	function getcontentregionsforuseraccess($category_id, $topic_id)
	{
		if ($category_id > 0 && $topic_id == 0) {
			$resultset = db_query("SELECT * FROM {category_regions} as cr INNER JOIN {manage_regions} as mr on cr.region_id=mr.region_id
				where cr.status =1 and cr.category_id in ($category_id) and mr.region_status=1");
		} else {
			$resultset = db_query("SELECT * FROM {content_regions} as cr INNER JOIN {manage_regions} as mr on cr.region_id=mr.region_id
		where cr.status =1 and cr.content_id in ($topic_id) and mr.region_status=1 ");
		}
		$contentregions = array();
		while ($row = $resultset->fetchAssoc()) {
			$contentregions[$row['region_id']] = $row['region_id'];
		}
		return $contentregions;
	}
	function gettopicregions($topic_id)
	{
		$resultset = db_query("SELECT * FROM {content_regions} as cr INNER JOIN {manage_regions} as mr on cr.region_id=mr.region_id
		where cr.status =1 and cr.content_id in ($topic_id) and mr.region_status=1 and cr.content_type=2");


		$topicregions = array();
		foreach ($resultset as $row) {
			$topicregions[$row->region_id] = (array) $row;
		}
		return $topicregions;
	}

	function getsubtopicregions($subtopic_id)
	{
		$resultset = db_query("SELECT * FROM {content_regions} as cr INNER JOIN {manage_regions} as mr on cr.region_id=mr.region_id
		where cr.status =1 and cr.content_id in ($subtopic_id) and mr.region_status=1 and cr.content_type=3");

		$subtopicregions = array();
		foreach ($resultset as $row) {
			$subtopicregions[$row->region_id] = (array) $row;
		}
		return $subtopicregions;
	}
	function checkDupFiletitle($ftitle, $fid, $qry_str)
	{
		$available = '';
		$query_param = [];
		if ($ftitle) {
			if ($fid && $fid > 1 && $qry_str == '') {
				$record = db_query("SELECT cat_id, topic_id, sub_topic_id, internal_topic_id FROM {upload_documents} where file_id = :fid && file_status=1", array(':fid' => $fid))->fetchObject();
				$file_param = [':cat_id' => $record->cat_id, ':topic_id' => $record->topic_id, ':sub_topic_id' => $record->sub_topic_id, ':internal_topic_id' => $record->internal_topic_id];
				$query_param = array_merge($file_param, [':file_title' => $ftitle, ':fid' => $fid]);
			}
			if ($qry_str != '') {
				$query_param = array_merge($qry_str, [':file_title' => $ftitle, ':fid' => $fid]);
			}
			$available = db_query("SELECT file_title FROM {upload_documents} where file_title = :file_title && file_id != :fid && cat_id=:cat_id && topic_id=:topic_id && sub_topic_id=:sub_topic_id && internal_topic_id=:internal_topic_id && file_status=1", $query_param)->fetchColumn();
		}
		return $available;
	}

	function checkDupFileHyperlinktitle($ftitle, $fid, $qry_str)
	{
		$available = '';
		$query_param = [];
		if ($ftitle) {
			if ($fid && $fid > 1 && $qry_str == '') {
				$record = db_query("SELECT cat_id, topic_id, sub_topic_id, internal_topic_id  
				FROM {hyperlinks} where hyperlink_id = :fid && hyperlink_status=1", array(':fid' => $fid))->fetchObject();
				$file_param = [':cat_id' => $record->cat_id, ':topic_id' => $record->topic_id, ':sub_topic_id' => $record->sub_topic_id, ':internal_topic_id' => $record->internal_topic_id];
				$query_param = array_merge($file_param, [':file_title' => $ftitle, ':fid' => $fid]);
			}
			if ($qry_str != '') {
				$query_param = array_merge($qry_str, [':file_title' => $ftitle, ':fid' => $fid]);
			}
			$available = db_query("SELECT hyperlink_name FROM {hyperlinks} where 
				hyperlink_name = :file_title && hyperlink_id != :fid && cat_id=:cat_id && topic_id=:topic_id && sub_topic_id=:sub_topic_id && internal_topic_id=:internal_topic_id && hyperlink_status=1", $query_param)->fetchColumn();
		}
		return $available;
	}

	function hyperlink_upload_save()
	{
		$timestamp = time();
		global $user;
		$userid = $user->uid;
		$file_id = strip_tags($_POST['file_id']);
		$level = strip_tags($_POST['level']);
		$cat_id = addslashes(strip_tags(trim($_POST["cat_id"])));
		$top_id = addslashes(strip_tags(trim($_POST["top_id"])));
		$stop_id = addslashes(strip_tags(trim($_POST["stop_id"])));
		$itop_id = addslashes(strip_tags(trim($_POST["itop_id"])));
		$hyperlinkname = addslashes(strip_tags($_POST["hyperlinkname"]));
		$hyperlinkURL = addslashes(strip_tags(trim($_POST['hyperlinkURL'])));
		$hyperlinkteasertext = addslashes(strip_tags(trim($_POST['hyperlinkteasertext'])));
		$hyperlinkfile = addslashes(strip_tags(trim($_POST['hyperlinkfile'])));
		$region_process = explode(",", $_POST['regions']);
		$level_id = addslashes(strip_tags($_POST["hyperlink_id"]));
		$auto_id = $fid = 0;
		if (arg(2) == 'delete' && arg(3) && is_numeric(arg(3)) && strip_tags($_POST['fid'])) {
			$fid = strip_tags(trim($_POST['fid']));
			$editFields['hyperlink_status'] = 0;
			$editFields['deleted'] = 0;
			db_update('hyperlinks')->fields($editFields)->condition('hyperlink_id', $fid)->execute();
			$regionmappingFields = array();
			$regionmappingFields['status'] = 0;
			for ($k = 0; $k < count($region_process); $k++) {
				db_update('hyperlinks_regions')->fields($regionmappingFields)->condition('hyperlink_id', $fid)->execute();
			}
		} else if (is_numeric($_POST["hyperlink_id"])) {

			$fid = arg(2);
			if ($hyperlinkname && $hyperlinkURL && $hyperlinkteasertext && $hyperlinkfile) {
				if (!checkDupFileHyperlinktitle($hyperlinkname, strip_tags(trim($_POST["hyperlink_id"])), '')) {
					$editFields['hyperlink_name'] = $hyperlinkname;
					$editFields['hyperlink_url'] = $hyperlinkURL;
					$editFields['hyperlink_teasertext'] = $hyperlinkteasertext;
					$editFields['hyperlink_image'] = $hyperlinkfile;
					$editFields['modified_by'] = $userid;
					$editFields['modified_date'] = $timestamp;
					$editFields['created_by'] = $userid;
					$editFields['created_date'] = $timestamp;
					$editFields['cat_id'] = $cat_id;
					$editFields['deleted'] = 0;
					$editFields['topic_id'] = $top_id;
					$editFields['sub_topic_id'] = $stop_id;
					$editFields['internal_topic_id'] = $itop_id;
					//get the scan result 
					$scanned_result = get_scanned_file($file_id);//
					$scanned_status = ($scanned_result['status'] == 0 ? 'SCAN_COMPLETED' :  (($scanned_result['status'] == 255 || $scanned_result['status'] == 254) ? "In Progress" : "SCAN_FAILED"));
					$file = ['file_name'=> basename($hyperlinkfile),'scan_status' => $scanned_status,'submission_type'=>'hyperlinks','file_id'=>$file_id];
					if( $scanned_result['status'] == 0 ) {
						//No threat detected
						$moved = move_file_to_vwr_server($file, $scanned_result, "uploadv2");
						if($moved != 'Copy success!') {
							echo "fail to move to server";
							exit;
						} 
					} else if($scanned_result['status'] == 255  || $scanned_result['status'] == 254){
							//scan in progress no action needed
						} else{
							echo "Status : " . $scanned_result['status'] . " Message : " . $scanned_result['message'];
							exit;
						}
					//we need to save the file_id received from fileupload API
					$editFields['scan_file_id'] = $file_id;
					$editFields['scan_file_status'] = $scanned_status;

					//scanfields
					$scanFields['file_id'] = $file_id;
					$scanFields['file_name'] = $hyperlinkfile;
					$scanFields['submission_type'] = 'hyperlinks';
					$scanFields['created_date'] = time();
					$scanFields['scan_status'] = $scanned_status;
					$file_auto_id = db_insert('file_scan_details')->fields($scanFields)->execute();

					db_update('hyperlinks')->fields($editFields)->condition('hyperlink_id', $_POST["hyperlink_id"])->execute();
					db_query("delete from {hyperlinks_regions} where hyperlink_id=:hyperlink_id", array(':hyperlink_id' => $_POST[hyperlink_id]));
					for ($k = 0; $k < count($region_process); $k++) {
						$regionmappingFields = array();
						$regionmappingFields['region_id'] = $region_process[$k];
						$regionmappingFields['hyperlink_id'] = $_POST["hyperlink_id"];
						$regionmappingFields['status'] = 1;
						db_insert('hyperlinks_regions')->fields($regionmappingFields)->execute();
					}
				} else {
					echo 'duplicate';
					exit;
				}
			}
		} else {
			$file_name = $_POST['hyperlinkfile'];
			$file_ext = strtolower(trim(substr(strrchr($file_name, '.'), 1)));
			$image_exts = array('gif', 'jpg', 'jpeg', 'png', 'tiff');
			$doc_exts = array('doc', 'docx', 'odt', 'xls', 'ppt');

			if (in_array($file_ext, $image_exts)) {
				$file_ext = 'image';
			} else if (in_array($file_ext, $doc_exts)) {
				$file_ext = 'docs';
			}
			$cat_id = $topic_id = $subtopic_id = $internaltopic_id = 0;
			$cat_id = addslashes(strip_tags($_POST['cat_id']));
			$top_id = addslashes(strip_tags($_POST['top_id'])) ? addslashes(strip_tags($_POST['top_id'])) : 0;
			$stop_id = strip_tags($_POST['stop_id']) ? addslashes(strip_tags($_POST['stop_id'])) : 0;
			$itop_id = strip_tags($_POST['itop_id']) ? addslashes(strip_tags($_POST['itop_id'])) : 0;

			if ($hyperlinkname && $hyperlinkURL && $hyperlinkteasertext && $hyperlinkfile) {
				$qry_str = [':cat_id' => $cat_id, ':topic_id' => $top_id, ':sub_topic_id' => $stop_id, ':internal_topic_id' => $itop_id];
				if (!checkDupFileHyperlinktitle($hyperlinkname, $fid, $qry_str)) {
					$editFields['hyperlink_name'] = $hyperlinkname;
					$editFields['hyperlink_url'] = $hyperlinkURL;
					$editFields['hyperlink_teasertext'] = $hyperlinkteasertext;
					$editFields['hyperlink_image'] = $hyperlinkfile;
					$editFields['modified_by'] = $userid;
					$editFields['modified_date'] = $timestamp;
					$editFields['created_by'] = $userid;
					$editFields['deleted'] = 0;
					$editFields['created_date'] = $timestamp;
					$editFields['cat_id'] = $cat_id;
					$editFields['topic_id'] = $top_id;
					$editFields['sub_topic_id'] = $stop_id;
					$editFields['internal_topic_id'] = $itop_id;
					//get the scan result 
					$scanned_result = get_scanned_file($file_id);//
					$scanned_status = ($scanned_result['status'] == 0 ? 'SCAN_COMPLETED' :  (($scanned_result['status'] == 255 || $scanned_result['status'] == 254) ? "In Progress" : "SCAN_FAILED"));
					$file = ['file_name'=> basename($hyperlinkfile),'scan_status' => $scanned_status,'submission_type'=>'hyperlinks','file_id'=>$file_id];
					if( $scanned_result['status'] == 0 ) {
						$moved = move_file_to_vwr_server($file, $scanned_result, "uploadv2");
						if($moved != 'Copy success!') {
							echo "fail to move to server";
							exit;
						} 
					}else if($scanned_result['status'] == 255  || $scanned_result['status'] == 254){
						//scan in progress no action needed
					} else{
						echo "Status : " . $scanned_result['status'] . " Message : " . $scanned_result['message'];
						exit;
					}
					//we need to save the file_id received from fileupload API
					$editFields['scan_file_id'] = $file_id;
					$editFields['scan_file_status'] = $scanned_status;

					//scanfields
					$scanFields['file_id'] = $file_id;
					$scanFields['file_name'] = $hyperlinkfile;
					$scanFields['submission_type'] = 'hyperlinks';
					$scanFields['created_date'] = time();
					$scanFields['scan_status'] = $scanned_status;
					$file_auto_id = db_insert('file_scan_details')->fields($scanFields)->execute();

					$auto_id = db_insert('hyperlinks')->fields($editFields)->execute();
					$regionmappingFields = array();
					for ($j = 0; $j < count($region_process); $j++) {
						$regionmappingFields = array();
						$regionmappingFields['region_id'] = $region_process[$j];
						$regionmappingFields['hyperlink_id'] = $auto_id;
						$regionmappingFields['status'] = 1;
						db_insert('hyperlinks_regions')->fields($regionmappingFields)->execute();
					}
				} else {
					echo 'duplicate';
					exit;
				}
			}
		}

		if (db_affected_rows) {
			echo 'success';
		} else {
			echo 'fail';
		}
		exit;
	}

	function category_upload_save()
	{
		$timestamp = time();
		global $user;
		$userid = $user->uid;
		$level = strip_tags($_POST['level']);
		$level_id = strip_tags($_POST["cat_topic_id"]);
		$file_title = strip_tags(trim($_POST['doc_title']));
		$keywords = strip_tags(trim($_POST['doc_keyword']));
		$description = strip_tags(trim($_POST['doc_desc']));
		$expiry_date = strip_tags(strtotime(trim($_POST['expiry_date'])));
		$region_process = explode(",", $_POST['region_id']);
		$file_id = strip_tags($_POST['file_id']);

		$auto_id = $fid = 0;
		if (arg(2) == 'delete' && arg(3) && is_numeric(arg(3)) && strip_tags($_POST['fid'])) {
			$fid = strip_tags(trim($_POST['fid']));
			$editFields['file_status'] = 0;
			$editFields['deleted'] = $timestamp;
			db_update('upload_documents')->fields($editFields)->condition('file_id', $fid)->execute();
			$regionmappingFields = array();
			$regionmappingFields['status'] = 0;
			for ($k = 0; $k < count($region_process); $k++) {
				db_update('upload_documents_regions')->fields($regionmappingFields)->condition('file_id', $fid)->execute();
			}
		} else if (arg(2) && is_numeric(arg(2))) {
			if (!is_cat_topic_active($level_id, $level)) {
				echo 'deleted';
				exit;
			}
			$fid = arg(2);
			if ($file_title && $keywords && $expiry_date) {
				if (!checkDupFiletitle($file_title, $fid, '')) {
					$editFields['file_title'] = $file_title;
					$editFields['keyword'] = $keywords;
					$editFields['description'] = $description;
					$editFields['expiry_date'] = $expiry_date;
					$editFields['modified_by'] = $userid;
					$editFields['modified_date'] = $timestamp;
					db_update('upload_documents')->fields($editFields)->condition('file_id', $fid)->execute();
					db_query("delete from {upload_documents_regions} where file_id=:fid", array(':fid' => $fid));
					for ($k = 0; $k < count($region_process); $k++) {
						$regionmappingFields = array();
						$regionmappingFields['region_id'] = $region_process[$k];
						$regionmappingFields['file_id'] = $fid;
						$regionmappingFields['status'] = 1;
						db_insert('upload_documents_regions')->fields($regionmappingFields)->execute();
					}
				} else {
					echo 'duplicate';
					exit;
				}
			} else if (!$expiry_date) {
				echo 'expdate';
				exit;
			}
		} else {
			if (!is_cat_topic_active($level_id, $level)) {
				echo 'deleted';
				exit;
			}
			$file_name = $_POST['doc_file'];
			$file_ext = strtolower(trim(substr(strrchr($file_name, '.'), 1)));
			$image_exts = array('gif', 'jpg', 'jpeg', 'png', 'tiff');
			$doc_exts = array('doc', 'docx', 'odt', 'xls', 'ppt');

			if (in_array($file_ext, $image_exts)) {
				$file_ext = 'image';
			} else if (in_array($file_ext, $doc_exts)) {
				$file_ext = 'docs';
			}
			$cat_id = $topic_id = $subtopic_id = $internaltopic_id = 0;
			$cat_id = strip_tags($_POST['cat_id']);
			$top_id = strip_tags($_POST['top_id']) ? strip_tags($_POST['top_id']) : 0;
			$stop_id = strip_tags($_POST['stop_id']) ? strip_tags($_POST['stop_id']) : 0;
			$itop_id = strip_tags($_POST['itop_id']) ? strip_tags($_POST['itop_id']) : 0;

			if ($file_name && $keywords && $file_title && $expiry_date && $cat_id) {
				$qry_str = [':cat_id' => $cat_id, ':topic_id' => $top_id, ':sub_topic_id' => $stop_id, ':internal_topic_id' => $itop_id];
				if (!checkDupFiletitle($file_title, $fid, $qry_str)) {
					$editFields['file_name'] = $file_name;
					$editFields['file_title'] = $file_title;
					$editFields['keyword'] = $keywords;
					$editFields['description'] = $description;
					$editFields['expiry_date'] = $expiry_date;
					$editFields['cat_id'] = $cat_id;
					$editFields['topic_id'] = $top_id;
					$editFields['sub_topic_id'] = $stop_id;
					$editFields['internal_topic_id'] = $itop_id;
					$editFields['file_type'] = $file_ext;
					$editFields['created_by'] = $userid;
					$editFields['created_date'] = $timestamp;
					//get the scan result 
					$scanned_result = get_scanned_file($file_id);//
					$scanned_status = ($scanned_result['status'] == 0 ? 'SCAN_COMPLETED' :  (($scanned_result['status'] == 255 || $scanned_result['status'] == 254) ? "In Progress" : "SCAN_FAILED"));
					$file = ['file_name'=> basename($_POST['doc_file']),'scan_status' => $scanned_status,'submission_type'=>'upload_documents','file_id'=>$file_id];
					if( $scanned_result['status'] == 0 ) {
						//No threat detected
						$moved = move_file_to_vwr_server($file, $scanned_result, "uploadv2");
						if($moved != 'Copy success!') {
							echo "fail to move to server";
							exit;
						}
					} /* else if($scanned_result['status'] == 255  || $scanned_result['status'] == 254){
						//scan in progress no action needed
					} else{
						echo "Status : " . $scanned_result['status'] . " Message : " . $scanned_result['message'];
						exit;
					} */
					$editFields['scan_file_id'] = $file_id;
					$editFields['scan_file_status'] = $scanned_status;

					//scanfields
					//$scanFields['file_id'] = $file_id;
					//$scanFields['file_name'] = $file_name;
					$scanFields['submission_type'] = 'upload_documents';
					$scanFields['created_date'] = time();
					$scanFields['scan_status'] = $scanned_status;
					//$file_auto_id = db_insert('file_scan_details')->fields($scanFields)->execute();
					db_update('file_scan_details')->fields($scanFields)->condition('file_id', $file_id)->execute();

					$auto_id = db_insert('upload_documents')->fields($editFields)->execute();
					$regionmappingFields = array();
					for ($j = 0; $j < count($region_process); $j++) {
						$regionmappingFields = array();
						$regionmappingFields['region_id'] = $region_process[$j];
						$regionmappingFields['file_id'] = $auto_id;
						$regionmappingFields['status'] = 1;
						db_insert('upload_documents_regions')->fields($regionmappingFields)->execute();
					}
				} else {
					echo 'duplicate';
					exit;
				}
			} else if (!$expiry_date) {
				echo 'expdate';
				exit;
			}
		}

		if (db_affected_rows) {
			echo 'success';
		} else {
			echo 'fail';
		}
		exit;
	}

	function category_download_documents()
	{
		if (arg(2) && is_numeric(arg(2))) {
			$fid = arg(2);
			global $user;
			$file_name = db_query("SELECT file_name from {upload_documents} where file_id=:fid && file_status=1", array(':fid' => $fid))->fetchColumn();
			if ($file_name) {
				
				$structure = 'sites/default/files/docs/';
				$file_name = str_replace("&amp;", "&", $file_name);
				$file = $structure . $file_name;
				if (file_exists($file)) {
					$google_analytics = variable_get('google_analytics_UA');
	?>
					<script type="text/javascript">
						var _gaq = _gaq || [];
						_gaq.push(['_setAccount', '<?php echo $google_analytics; ?>']);
						_gaq.push(['_trackPageview', 'File Download - ' + <?php echo htmlspecialchars($file_name); ?>]);

						(function() {
							var ga = document.createElement('script');
							ga.type = 'text/javascript';
							ga.async = true;
							ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
							var s = document.getElementsByTagName('script')[0];
							s.parentNode.insertBefore(ga, s);
						})();
					</script>
	<?php
					$file_name = substr($file_name, (stripos($file_name, '_')+(stripos($file_name, '_') != '' ? 1 : '')), strlen($file_name)); 
					$file_name = str_replace(";", "", $file_name);
					header('Content-Description: File Transfer');
					header('Content-Type: application/octet-stream');
					header('Content-Disposition: attachment; filename=' . basename(str_replace(" ", "", $file_name)));
					header('Content-Transfer-Encoding: binary');
					header('Expires: 0');
					header('Cache-Control: must-revalidate, post-check=0, pre-check=0');
					header('Pragma: public');
					header('Content-Length: ' . filesize($file));
					ob_clean();
					flush();
					@readfile($file);
				} else {
					$redirect = '';
					if ($_REQUEST['redirect']) {
						$redirect = trim($_REQUEST['redirect']);
					}
					drupal_goto($redirect);
				}
				exit;
			}
		}
	}

	function category_pagination_documents()
	{
		$query_str = $result = $doc_list = $action = '';
		$query_param = [];
		global $user;
		$fcount = $cat_id = $topic_id = $subtopic_id = $internaltopic_id = $fid = 0;
		$cat_topic_id = addslashes(htmlentities(trim($_POST['ct_id'])));
		$level = addslashes(htmlentities(trim($_POST['level'])));
		$tot_rec = addslashes(htmlentities(trim($_POST['tot_rec'])));
		$region_id = addslashes(htmlentities(trim($_POST['region_id'])));
		$start = $starter = 0;
		if (strip_tags($_POST['start_entry']) && is_numeric(strip_tags($_POST['start_entry']))) {
			$starter = addslashes(htmlentities(trim($_POST['start_entry'])));
		}
		$ender = $end = 5;
		if (strip_tags($_POST['last_entry']) && is_numeric(strip_tags($_POST['last_entry']))) {
			$ender = addslashes(htmlentities(trim($_POST['last_entry'])));
		}
		if ($_POST['action']) {
			$action = strip_tags(trim($_POST['action']));
			if ($action == 'next') {
				$start = $ender;
			} else if ($action == 'prev') {
				$ender = $start = $starter - ($end + 1);
			} else if ($action == 'first') {
				$ender = $start = 0;
			} else if ($action == 'last') {
				$start = $tot_rec - ($tot_rec % $end);
				if ($start >= $tot_rec) {
					$start = $tot_rec - 5;
				}
			} else if ($action == 'viewall') {
				$ender = $start = 0;
				$end = $tot_rec;
			}
		}
		if ($cat_topic_id && is_numeric($cat_topic_id)) {
			if ($level == 'category') {
				$cat_id = $cat_topic_id;
				$query_str .= "ud.cat_id=:cat_id AND ud.topic_id=0 AND ud.sub_topic_id=0 AND ud.internal_topic_id=0";
				$query_param = array_merge($query_param, [':cat_id' => $cat_id]);
			} else if ($level == 'topic') {
				$topic_id = $cat_topic_id;
				$query_str .= "ud.cat_id>0 AND ud.topic_id=:topic_id AND ud.sub_topic_id=0 AND ud.internal_topic_id=0";
				$query_param = array_merge($query_param, [':topic_id' => $topic_id]);
			} else if ($level == 'subtopic') {
				$subtopic_id = $cat_topic_id;
				$query_str .= "ud.cat_id>0 AND ud.topic_id>0 && ud.sub_topic_id=:subtopic_id && ud.internal_topic_id=0";
				$query_param = array_merge($query_param, [':subtopic_id' => $subtopic_id]);
			} else if ($level == 'internaltopic') {
				$internaltopic_id = $cat_topic_id;
				$query_str .= "ud.cat_id>0 && ud.topic_id>0 && ud.sub_topic_id>0 && ud.internal_topic_id=:internaltopic_id";
				$query_param = array_merge($query_param, [':internaltopic_id' => $internaltopic_id]);
			}
		}
		$countorder = db_query("select count(*) from {document_order_preferences} where user_id=:uid", array(':uid' => $user->uid))->fetchColumn();


		if ($region_id > 0) {			
			$currentregquery = "INNER JOIN {upload_documents_regions} as vwrdr on vwrdr.file_id = ud.file_id	
			LEFT JOIN {document_order_preferences} dop ON  vwrdr.file_id = dop.file_id
			INNER JOIN {manage_regions} as vwrmr on vwrmr.region_id=vwrdr.region_id 
			and vwrdr.region_id in (:region_id) and vwrdr.status=1 and vwrmr.region_status=1";
			$query_param = array_merge($query_param, [':region_id' => $region_id]);
		}

		if ($query_str != '') {
			$timestamp = strtotime(date("d-m-Y"));
			if (is_vwr_user_role()) {
				
				$doc_list = db_query("SELECT ud.file_id, ud.file_title, ud.file_name, 
				ud.file_type, ud.expiry_date from {upload_documents} as ud 
				$currentregquery where
				ud.file_status=1 && $query_str
				group by ud.file_id			
				ORDER BY ISNULL(dop.document_order),dop.document_order,ud.file_id DESC limit $start, $end", $query_param);
			} else {
				$query_param = array_merge($query_param, [':ts' => $timestamp]);
				$doc_list = db_query("SELECT ud.file_id, ud.file_title, ud.file_name, ud.file_type, 
				ud.expiry_date from {upload_documents} as ud $currentregquery where 
				ud.file_status=1 && $query_str 
				&& ud.expiry_date>=:ts group by ud.file_id
				ORDER BY ISNULL(dop.document_order),dop.document_order,ud.file_id 
				DESC limit $start, $end", $query_param);
			}
		}
		if ($doc_list) {
			$themepath = base_path() . drupal_get_path('theme', 'vwr') . '/';
			$edit_access = has_page_access('edit');
			$orderposition = $_POST["start_entry"] + 5;
			foreach ($doc_list as $file) {
				$fcount++;

				$fid = $file->file_id;
				$file_type = $file->file_type;
				$image_icon = getFiletypeImage($file->file_name);
				if (is_vwr_user_role()) {
					$sortclass = "class='ui-state-default'";
					$sortul = "class='sortable'";
				}


				$classexpiry = (date("m/d/Y", $file->expiry_date) < (date("m/d/Y"))) ? 'doc_title_exp' : 'doc_title_downl';
				$result .= '<li ' . $sortclass . ' id=itemorder_' . $fid . '_' . $orderposition . '>
						<span class="file_ic"><img src="' . $themepath . 'images/' . $image_icon . '" width="18" height="19" alt="' . $file_type . '" /><span onClick="downloadUploadDocuments(' . $cat_topic_id . ', \'' . $level . '\', ' . $fid . ');" class="' . $classexpiry . '">' . $file->file_title . '</span></span>
						<span class="filedwn">';
				if (is_vwr_user_role()) {
					$result .= "<img style='width:20px;height:20px;' src=" . base_path() . drupal_get_path('module', 'categorymanager') . "/css/images/dragarrow.jpg>";
				}
				$result .= '<a href="javascript:void(0);" onClick="downloadUploadDocuments(' . $cat_topic_id . ', \'' . $level . '\', ' . $fid . ');"><img src="' . $themepath . 'images/ico_6.png" width="18" height="19" alt="download" /></a>';

				if (user_access('add edit delete category') && user_access('upload file to category topic') && $edit_access) {
					$result .= '<a href="javascript:void(0);" onClick="editUploadDocuments(' . $cat_topic_id . ', \'' . $level . '\', ' . $fid . ');"><img src="' . $themepath . 'images/ico_7.png" width="18" height="19" alt="Edit" /></a>
							<a href="javascript:void(0);" onClick="updateDocuments(' . $cat_topic_id . ', \'' . $level . '\', ' . $fid . ', \'delete\');"><img src="' . $themepath . 'images/ico_8.png" width="18" height="19" alt="Delete" /></a>';
				}
				$result .=	'</span></li> ';
				
			}
		}

		$doc_starter = $start + 1;
		$doc_ender = $ender + $fcount;
		$doc_ender = ($tot_rec < $doc_ender) ? $tot_rec : $doc_ender;
		$doc_ender = ($doc_starter > $doc_ender) ? $doc_starter + $fcount : $doc_ender;
		$result .= '<input type="hidden" id="doc_show_count" value="' . $fcount . '" > <input type="hidden" id="doc_starter" value="' . $doc_starter . '" > <input type="hidden" id="doc_ender" value="' . $doc_ender . '" >';

		print $result;
		exit;
	}

	function getFiletypeImage($image)
	{
		$file_ext = strtolower(trim(substr(strrchr($image, '.'), 1)));
		$excel_exts = array('xls', 'xlsx', 'xl', 'csv');
		$doc_exts = array('doc', 'docx', 'odt', 'dox', 'docs', 'odm', 'dot', 'odf');

		$txt_exts = array('txt', 'xml', 'sql', 'java', 'js', 'css', 'sh', 'rb', 'info', 'module');
		$imgo_exts = array('cur', 'ani', 'jfif', 'exif', 'pns', 'jps', 'raw', 'pcx', 'svg', '3d',  'art', 'arr', 'ico', 'icon', 'img', 'pic', 'pix', 'tif', 'zif', 'cd', '3dt', 'cag', 'gpx', 'tab', 'mm', 'jng', 'max', 'pct', 'tga', 'xpm', 'max', 'mng', 'pc1', 'pcf', 'pc', 'pcx', 'eps', 'odg', 'wmf', '3dm', 'ac', 'aoi', 'obj', 'a', '');
		$zip_exts = array('tar', 'gz', 'zip', 'rar', 'gzip', 'arc', '7z', 'z', 'jar', 'war');
		$media_exts = array('mpeg', 'wav', 'wv', 'wma', 'mp1', 'mp2', 'mp3', 'mp4', 'mp5', 'mpc', 'ra', 'flv', 'avi', 'mpeg', 'm4v', 'mov', 'ogg', 'swf', 'wmv', 'mswmm', 'mus', 'pod', 'webm', 'mpa', 'm3a', 'm4a', '3gp', 'vob', 'mpg', 'av');

		$html_exts = array('html', 'htm', 'mhtml', 'asp', 'jsp', 'php');
		$image_icon = 'other_s.png';
		if (in_array($file_ext, $excel_exts)) {
			$image_icon = 'excel_s.png';
		} else if (in_array($file_ext, $doc_exts)) {
			$image_icon = 'word_s.png';
		} else if (in_array($file_ext, $html_exts)) {
			$image_icon = 'html_s.png';
		} else if (in_array($file_ext, $zip_exts)) {
			$image_icon = 'zip_s.png';
		} else if (in_array($file_ext, $media_exts)) {
			$image_icon = 'av_s.png';
		} else if ($file_ext == 'pdf') {
			$image_icon = 'pdf_s.png';
		} else if ($file_ext == 'psd') {
			$image_icon = 'psd_s.png';
		} else if ($file_ext == 'ppt') {
			$image_icon = 'ppt_s.png';
		} else if ($file_ext == 'ai') {
			$image_icon = 'ai_s.png';
		} else if ($file_ext == 'eps') {
			$image_icon = 'eps_icon_s.png';
		} else if (in_array($file_ext, $txt_exts) || $file_ext == 'txt') {
			$image_icon = 'txt_s.png';
		} else if ($file_ext == 'tiff') {
			$image_icon = 'tiff_s.png';
		} else if ($file_ext == 'png') {
			$image_icon = 'png_s.png';
		} else if ($file_ext == 'gif') {
			$image_icon = 'gif_s.png';
		} else if ($file_ext == 'bmp') {
			$image_icon = 'bmp_s.png';
		} else if ($file_ext == 'jpg' || $file_ext == 'jpeg') {
			$image_icon = 'jpg_s.png';
		} else if (in_array($file_ext, $imgo_exts) || is_numeric($file_ext)) {
			$image_icon = 'imgo_s.png';
		}
		return $image_icon;
	}

	function checkDropbox_access($cat_id, $topic_id)
	{
		$timestamp = strtotime(date("m/d/Y"));
		$drpbx_ids = db_query("SELECT d.id FROM {dropbox} d, {dropbox_category_mapping} dc where d.allusers_page = 1 AND d.end_date >= :end_date AND d.id = dc.dbox_id AND dc.cat_id = :cat_id AND dc.topic_id = :topic_id", array(':end_date' => $timestamp, ':cat_id' => $cat_id, ':topic_id' => $topic_id))->fetchCol();
		$dropbox_category = '';
		if ($drpbx_ids) {
			$drpbx_id_str = implode(",", $drpbx_ids);
			if ($drpbx_id_str) {
				$dropbox_category = db_query("SELECT dbox_id, cat_id, topic_id FROM {dropbox_category_mapping} WHERE dbox_id IN (:drpbx_id_str)", array(':drpbx_id_str' => $drpbx_id_str));
				db_query("DELETE FROM {dropbox_supplier_access} WHERE dropbox_id IN (:drpbx_id_str)", array(':drpbx_id_str' => $drpbx_id_str));
			}
		}
		$flag_insert = 0;
		if ($dropbox_category) {
			foreach ($dropbox_category as $drp_cats) {
				$cat_supplier_mapping = db_query("SELECT * FROM {category_useraccess_mapping} WHERE category_id=:category_id AND topic_id=:topic_id AND mapping =1", array(':category_id' => $drp_cats->cat_id, ':topic_id' => $drp_cats->topic_id));
				foreach ($cat_supplier_mapping as $supplier_mapping) {
					db_query("DELETE FROM {dropbox_supplier_access} WHERE dropbox_id = :dropbox_id AND supplier_org_id = :supplier_org_id", array(':dropbox_id' => $drp_cats->dbox_id, ':supplier_org_id' => $supplier_mapping->supplier_org_id));
					db_query("INSERT INTO {dropbox_supplier_access} (`dropbox_id`, `supplier_org_id`, `mapping`) VALUES (:dbox_id,:supplier_org_id, '1' )", array(':dbox_id' => $drp_cats->dbox_id, ':supplier_org_id' => $supplier_mapping->supplier_org_id));
					$flag_insert++;
				}
			}
		}
		if (db_affected_rows && $flag_insert) {
			return true;
		}
		return false;
	}

	function getRelatedSupplierOrgIds($supplier_org_id)
	{

		$sorg_master_id = db_query("SELECT DISTINCT supplier_org_id FROM {vendor} WHERE vendor_id = :vendor_id", array('vendor_id' => $supplier_org_id))->fetchColumn(); //get_supplier_name($supplier_org_id);
		$result_supplier = array();
		if ($sorg_master_id && is_numeric(addslashes($sorg_master_id))) {
			$result_supplier = db_query("SELECT DISTINCT vendor_id FROM {vendor} WHERE supplier_org_id = :supplier_org_id  AND deleted = 0 ", array(':supplier_org_id' => addslashes($sorg_master_id)))->fetchCol();
		}
		return $result_supplier;
	}

	function getRelatedVASIds($vas_id)
	{
		$result_vas_tier = db_query("SELECT vas_tier_id FROM {vas_tier} WHERE vas_tier_name IN (SELECT DISTINCT vas_tier_name FROM {vas_tier} WHERE vas_tier_id = :vas_id)", array(':vas_id' => $vas_id))->fetchCol();
		return $result_vas_tier;
	}

	function category_useraccess()
	{
		if (has_page_access('create') || has_page_access('edit')) {
			if (arg(2) == 'save') {
				$currentregiontab = 0;
				if (isset($_COOKIE['currentregiontab'])) {
					$currentregiontab = addslashes(strip_tags(trim($_COOKIE['currentregiontab'])));
				}
				$cat_id = strip_tags(trim($_POST['cat_id']));
				$topic_id = strip_tags(trim($_POST['topic_id']));
				$vas_id = strip_tags($_POST['vas_values']);
				$supplier_id = strip_tags($_POST['supplier_values']);
				$continue = strip_tags(trim($_POST['continue']));
				$iterator1 = 0;
				$split_vas_values = explode(",", $vas_id); //UserAccess mapping with Vas/Supplier Org
				$insert_vas_query = "INSERT INTO {category_useraccess} (category_id, topic_id, vas_id,region_id) VALUES ";
				$vas_tr_now = array();
				$sub_vas_tiers = checkSubVasTier($cat_id, $topic_id, $currentregiontab);
				/* Vas-tier saving */
				db_query("DELETE FROM {category_useraccess} WHERE category_id=:cat_id && topic_id=:topic_id and region_id=:region_id", array(':cat_id' => $cat_id, ':topic_id' => $topic_id, ':region_id' => $currentregiontab));
				foreach ($split_vas_values as $vas_value) { //Vas Values Insertion
					if (is_numeric($vas_value) && $vas_value) {
						db_query("$insert_vas_query (:cat_id, :topic_id, :vas_value,:currentregiontab)", [':cat_id' => $cat_id, ':topic_id' => $topic_id, ':vas_value' => $vas_value, ':currentregiontab' => $currentregiontab]);
						$vas_tr_now[] = $vas_value;
					}
				}

				$split_supplier_values = explode(",", $supplier_id);
				$iterator2 = 0;
				$insert_sup_query = "INSERT INTO {category_useraccess_mapping} (category_id, topic_id, supplier_org_id,region_id) VALUES ";
				$sup_org_now = array();
				$sub_sup_orgs = checkSubSupplierOrgs($cat_id, $topic_id, $currentregiontab);
				$globalsuppliers = array();
				foreach ($split_supplier_values as $supplier_value) { //Supplier Mapping Insertion
					if (is_numeric($supplier_value) && $supplier_value) {
						if ($iterator2++ != 0) {
						}
						$sup_org_now[] = $supplier_value;
					}
				}


				$diff_vas = array_diff($sub_vas_tiers, $vas_tr_now);
				$diff_orgs = array_diff($sub_sup_orgs, $sup_org_now);

				$level = strip_tags(trim($_POST['level']));
				if ((count($diff_vas) || count($diff_orgs)) && !$continue && $level != 'internaltopic') {
					
					if (count($diff_orgs)) {
						foreach ($diff_orgs as $sorg_differed) {
							$rel_sorg_array = getRelatedSupplierOrgIds($sorg_differed);
							if (count($rel_sorg_array)) {
								$diff_rel_suborgs = array_diff($rel_sorg_array, $sub_sup_orgs);
								$diff_rel_orgs = array_diff($rel_sorg_array, $sup_org_now);
								if (count($diff_rel_orgs) == count($rel_sorg_array)) {
									echo 'confirm';
									exit;
								} else if (count($diff_rel_suborgs) == count($rel_sorg_array)) {
									echo 'confirm1';
									exit;
								}
							} else {
								echo 'confirm2';
								exit;
							}
						}
					} else {
						echo 'confirm3';
						exit;
					}
				}

				if (!empty($sup_org_now)) {
					$suplimp_org_list = implode(",", $sup_org_now);
					$diffsupplier_orgs = array();
					$diffsupplier_orgs = getdiffsupplierorgs($cat_id, $topic_id, $suplimp_org_list, $currentregiontab);
					if (count($sup_org_now) > 1) {
						if ($topic_id) {
							foreach ($sup_org_now as $supindex => $supplier_org_id) {
								$isglobal = 0;
								$isglobal = get_global_supplier($supplier_org_id, 1);
								if ($isglobal > 1) {

									db_query("DELETE FROM {category_useraccess_mapping} WHERE category_id=:cat_id and topic_id =:topic_id and supplier_org_id  in (:supplier_org_id)", array(':cat_id' => $cat_id, ':topic_id' => $topic_id, ':supplier_org_id' => $supplier_org_id));
								}
							}
							if (!empty($diffsupplier_orgs)) {
								$supllist = implode(',', $diffsupplier_orgs);
								db_query("DELETE FROM {category_useraccess_mapping} WHERE category_id=:cat_id and topic_id =:topic_id and supplier_org_id  in (:supllist)", array(':cat_id' => $cat_id, ':topic_id' => $topic_id, ':supllist' => $supllist));
							}
						} else {
							foreach ($sup_org_now as $supindex => $supplier_org_id) {

								$isglobal = 0;
								$isglobal = get_global_supplier($supplier_org_id, 1);
								if ($isglobal > 1) {

									db_query("DELETE FROM {category_useraccess_mapping} WHERE category_id=:cat_id and topic_id=0 and supplier_org_id  in (:supplier_org_id)", array(':cat_id' => $cat_id, ':supplier_org_id' => $supplier_org_id));
								}
							}
							if (!empty($diffsupplier_orgs)) {
								$supllist = implode(',', $diffsupplier_orgs);
								db_query("DELETE FROM {category_useraccess_mapping} WHERE category_id=:cat_id and supplier_org_id  in (:supllist)", array(':cat_id' => $cat_id, ':supllist' => $supllist));
							}
						}
					} else if (count($sup_org_now) == 1) {
						if ($topic_id) {
							$dbresultset = db_query("select category_id,topic_id,supplier_org_id from {category_useraccess_mapping} where category_id=:cat_id and topic_id=:topic_id", array(':cat_id' => $cat_id, ':topic_id' => $topic_id));
							while ($row = $dbresultset->fetchAssoc()) {
								$isglobal = 0;
								$isglobal = get_global_supplier($row['supplier_org_id'], 1);
								if ($isglobal > 1) {
									db_query("DELETE FROM {category_useraccess_mapping} WHERE category_id=:category_id and topic_id=:topic_id and supplier_org_id=:supplier_org_id", array(':category_id' => $row['category_id'], ':topic_id' => $row['topic_id'], ':supplier_org_id' => $row['supplier_org_id']));
								}
							}
						} else {
							$dbresultset = db_query("select category_id,topic_id,supplier_org_id from {category_useraccess_mapping} where category_id=:cat_id ", array(':cat_id' => $cat_id));
							while ($row = $dbresultset->fetchAssoc()) {
								$isglobal = 0;
								$isglobal = get_global_supplier($row['supplier_org_id'], 1);
								if ($isglobal > 1) {
									db_query("DELETE FROM {category_useraccess_mapping} WHERE category_id=:category_id and supplier_org_id=:supplier_org_id", array(':category_id' => $row['category_id'], ':supplier_org_id' => $row['supplier_org_id']));
								}
							}
						}
					}
				} else {

					if ($topic_id) {

						$dbresultset = db_query("select category_id,topic_id,supplier_org_id from {category_useraccess_mapping} where category_id=:cat_id and topic_id=:topic_id", array(':cat_id' => $cat_id, ':topic_id' => $topic_id));
						while ($row = $dbresultset->fetchAssoc()) {
							$isglobal = 0;
							$isglobal = get_global_supplier($row['supplier_org_id'], 1);
							if ($isglobal > 1) {
								db_query("DELETE FROM {category_useraccess_mapping} WHERE category_id = :category_id and topic_id = :topic_id and supplier_org_id=:supplier_org_id", array(':category_id' => $row['category_id'], ':topic_id' => $row['topic_id'], ':supplier_org_id' => $row['supplier_org_id']));
							}
						}
					} else {
						$dbresultset = db_query("select category_id,topic_id,supplier_org_id from {category_useraccess_mapping} where category_id=:cat_id ", array(':cat_id' => $cat_id));
						while ($row = $dbresultset->fetchAssoc()) {
							$isglobal = 0;
							$isglobal = get_global_supplier($row['supplier_org_id'], 1);
							if ($isglobal > 1) {
								db_query("DELETE FROM {category_useraccess_mapping} WHERE category_id = :category_id and supplier_org_id = :supplier_org_id", array(':category_id' => $row['category_id'], ':supplier_org_id' => $row['supplier_org_id']));
							}
						}
					}
				}

				$del_topics = '';
				if ($level != 'category' && $topic_id > 0) {
					$del_topics = getChildSuplTopics($cat_id, $topic_id, $level);
				}
				if (count($diff_vas)) {
					$diff_vast_lst = implode(",", $diff_vas);
					if ($topic_id == 0 && $level == 'category') {
						db_query("DELETE FROM {category_useraccess} WHERE category_id=:cat_id && vas_id IN (:diff_vast_lst) and region_id=:region_id", array(':cat_id' => $cat_id, ':diff_vast_lst' => $diff_vast_lst, ':region_id' => $currentregiontab));
					} else {
						if (is_array($del_topics)) {
							$topic_cond = " AND category_id = :cat_id AND topic_id IN (:topic_param) ";
							db_query("DELETE FROM {category_useraccess} WHERE vas_id IN (:diff_vast_lst) $topic_cond and region_id=:region_id", array(':diff_vast_lst' => $diff_vast_lst, ':region_id' => $currentregiontab, ':cat_id' => $cat_id, ':topic_param' => $del_topics));
						}
					}
				}

				/* Supplier org saving */
				db_query("DELETE FROM {category_useraccess_mapping} WHERE category_id=:cat_id && topic_id=:topic_id and region_id=:region_id", array(':cat_id' => $cat_id, ':topic_id' => $topic_id, ':region_id' => $currentregiontab));
				if (!empty($globalsuppliers)) {
					foreach ($globalsuppliers as $suppliersarray) {
						db_query("DELETE FROM {category_useraccess_mapping} WHERE category_id=:cat_id && topic_id=:topic_id and region_id=:region_id and supplier_org_id=:supplier_org_id", array(':cat_id' => $suppliersarray['cat_id'], ':topic_id' => $suppliersarray['topic_id'], ':region_id' => $suppliersarray['region_id'], ':supplier_org_id' => $suppliersarray['vendor_id']));
					}
				}
				if ($iterator2) {
					// inserts supl_orgs here
					foreach ($split_supplier_values as $supplier_value) { //Supplier Mapping Insertion
						if (is_numeric($supplier_value) && $supplier_value) {

							db_query($insert_sup_query . "(:cat_id, :topic_id, :supplier_value,:currentregiontab)", [':cat_id' => $cat_id, ':topic_id' => $topic_id, ':supplier_value' => $supplier_value, ':currentregiontab' => $currentregiontab]);
							$isglobal = 0;
							$isglobal = get_global_supplier($supplier_value, 1);
							if ($isglobal > 1) {
								$contentregions = array();
								$contentregions = getcontentregionsforuseraccess($cat_id, $topic_id);

								if (count($contentregions) > 1) {
									foreach ($contentregions as $region_id => $regionarray) {
										if ($currentregiontab != $region_id) {
											db_query($insert_sup_query . "(:cat_id, :topic_id, :supplier_value,:currentregiontab)", [':cat_id' => $cat_id, ':topic_id' => $topic_id, ':supplier_value' => $supplier_value, ':currentregiontab' => $region_id]);
										}
									}
								}
							}
						}
					}
				}

				if (count($diff_orgs) && db_affected_rows) {
					$diff_suporg_lst = implode(",", $diff_orgs);
					if ($topic_id == 0 && $level == 'category') {
						db_query("DELETE FROM {category_useraccess_mapping} WHERE category_id=:cat_id && supplier_org_id IN (:diff_suporg_lst) and region_id=:region_id", array(':cat_id' => $cat_id, ':diff_suporg_lst' => $diff_suporg_lst, ':region_id' => $currentregiontab));

						if (!empty($diff_orgs)) {
							foreach ($diff_orgs as $vendor_id) {
								$isglobal = 0;
								$isglobal = get_global_supplier($vendor_id, 1);
								if ($isglobal > 1) {
									$contentregions = array();
									$contentregions = getcontentregionsforuseraccess($cat_id, 0);
									if (count($contentregions) > 1) {
										foreach ($contentregions as $region_id => $regionarray) {
											db_query("DELETE FROM {category_useraccess_mapping} WHERE category_id=:cat_id && topic_id=0 and region_id=:region_id and supplier_org_id=:supplier_org_id", array(':cat_id' => $cat_id, ':region_id' => $region_id, ':supplier_org_id' => $vendor_id));
										}
									}
								}
							}
						}
					} else {
						if (is_array($del_topics)) {
							$topic_cond = " AND category_id = :cat_id AND topic_id IN (:topic_param) ";
							db_query("DELETE FROM {category_useraccess_mapping} WHERE supplier_org_id IN (:diff_suporg_lst) $topic_cond and region_id=:region_id", array(':diff_suporg_lst' => $diff_suporg_lst, ':region_id' => $currentregiontab, ':cat_id' => $cat_id, ':topic_param' => $del_topics));
							if (!empty($diff_orgs)) {
								foreach ($diff_orgs as $vendor_id) {
									$isglobal = 0;
									$isglobal = get_global_supplier($vendor_id, 1);
									if ($isglobal > 1) {
										$contentregions = array();
										$contentregions = getcontentregionsforuseraccess($cat_id, 0);
										if (count($contentregions) > 1) {
											foreach ($contentregions as $region_id => $regionarray) {
												db_query("DELETE FROM {category_useraccess_mapping} WHERE region_id=:region_id and supplier_org_id=:supplier_org_id $topic_cond", array(':region_id' => $region_id, ':supplier_org_id' => $vendor_id, ':cat_id' => $cat_id, ':topic_param' => $del_topics));
											}
										}
									}
								}
							}
						}
					}
				}

				/* dropbox useraccess manage*/
				$drpbx_suppl_mapper = checkDropbox_access($cat_id, $topic_id);

				if (db_affected_rows && ((count($diff_vas) || count($diff_orgs)) && $del_topics)) {
					echo 'successful';
					exit;
				}
				if (db_affected_rows) {
					echo 'success';
					exit;
				}
			} else if (!arg(2)) {
				
				$cat_id = trim($_POST['cat_id']);
				$topic_id = trim($_POST['topic_id']);
				$level = trim($_POST['level']);
				$parent_id = trim($_POST['parent_id']);
				$parent_level = 'category_id';

				if (isset($_COOKIE['currentregiontab'])) {
					$currentregiontab = $_COOKIE['currentregiontab'];
					$supplierorg_namequery = ", CONCAT(sm.supplier_org_name,'--', vwrmr.region_shortname) as supplier_org_name ";
				}
				$supplierorg_namequery = ", sm.supplier_org_name ";
				$activeregions = array();
				$activeregionsprocess = array();
				$activeregions = getregioninfo();
				$activeregionsprocess = array_flip($activeregions);

				$isglobalsupplierslist = array();
				$supplierslist = array();
				$isglobalsupplierslist = executestoreprocedureis_global_supplier();
				$supplierslist = executestoreproceduresupplierslist();
				$vendors = executestoreprocedurevas_vendors($currentregiontab);
				$selected_vas_values = executestoreprocedureselected_vas_values($currentregiontab, $cat_id, $topic_id);
				$selected_supplier_names = executestoreprocedureselected_supplier_names($topic_id, $cat_id, $currentregiontab);
				$selected_supplier_values = executestoreprocedureselected_supplier_values($topic_id, $cat_id, $currentregiontab);
				if ($cat_id && $level != 'category' && $topic_id > 0) {

					if ($level != 'topic') {
						$parent_level = 'topic_id';
					}
					$iscategory = 'notcategory';
					$result_vas = executestoreprocedurevas($parent_id, $parent_level, $iscategory);
					$result_supplier_org = categoryexecutestoreprocedure($parent_id, $parent_level, $iscategory);
				} else {
					$iscategory = 'category';
					$result_vas = executestoreprocedurevas($parent_id, $parent_level, $iscategory);
					$result_supplier_org = categoryexecutestoreprocedure($parent_id, $parent_level, $iscategory);
				}
				print theme('category_useraccess_theme', array('data' => '', 'level' => '', 'vendors' => $vendors, 'result_supplier_org' => $result_supplier_org, 'result_vas' => $result_vas, 'selected_vas_values' => $selected_vas_values, 'isglobalsupplierslist' => $isglobalsupplierslist, 'supplierslist' => $supplierslist, 'selected_supplier_names' => $selected_supplier_names, 'selected_supplier_values' => $selected_supplier_values, 'activeregionsprocess' => $activeregionsprocess));
			}
		}
	}

	function checkSubVasTier($cat_id, $topic_id, $region_id = 0)
	{
		$qry_str = '';
		if ($topic_id) {
			$qry_str = " parent_topic_id=:topic_id && ";
			$query_param = [':topic_id' => $topic_id, ':cat_id1' => $cat_id, ':cat_id2' => $cat_id];
		}
		$currentregionquery = "";
		if ($region_id) {
			$currentregionquery = " INNER JOIN {manage_regions} as vwrmr on vwrmr.region_id=vwrcu.region_id and  vwrmr.region_status=1 and vwrmr.region_id in (:region_id) ";
			$query_param = [':region_id' => $region_id, ':cat_id1' => $cat_id, ':cat_id2' => $cat_id];
		}
		if (($topic_id) && ($region_id)) {
			$query_param = [':region_id' => $region_id, ':topic_id' => $topic_id, ':cat_id1' => $cat_id, ':cat_id2' => $cat_id];
		}

		$vas_tier_in = db_query("SELECT DISTINCT vwrcu.vas_id FROM {category_useraccess} as vwrcu $currentregionquery WHERE vwrcu.topic_id IN (SELECT topic_id FROM {topic} WHERE $qry_str category_id=:cat_id1 && topic_status=1) && vwrcu.category_id=:cat_id2", $query_param)->fetchCol();

		return $vas_tier_in;
	}

	function checkSubSupplierOrgs($cat_id, $topic_id, $region_id = 0)
	{
		$qry_str = '';
		if ($topic_id) {
			$qry_str = " parent_topic_id=:topic_id && ";
			$query_param = [':topic_id' => $topic_id, ':cat_id1' => $cat_id, ':cat_id2' => $cat_id];
		}
		$currentregionquery = "";
		if ($region_id) {
			$currentregionquery = " INNER JOIN {manage_regions} as vwrmr on vwrmr.region_id=vwrcum.region_id and vwrmr.region_status=1 and vwrmr.region_id in (:region_id) ";
			$query_param = [':region_id' => $region_id, ':cat_id1' => $cat_id, ':cat_id2' => $cat_id];
		}

		if (($topic_id) && ($region_id)) {
			$query_param = [':region_id' => $region_id, ':topic_id' => $topic_id, ':cat_id1' => $cat_id, ':cat_id2' => $cat_id];
		}

		$sup_org_in = db_query("SELECT DISTINCT vwrcum.supplier_org_id FROM {category_useraccess_mapping} as vwrcum $currentregionquery WHERE vwrcum.topic_id IN (SELECT topic_id FROM {topic} WHERE $qry_str category_id=:cat_id1 && topic_status=1) && vwrcum.mapping=1 && vwrcum.category_id=:cat_id2", $query_param)->fetchCol();
		return $sup_org_in;
	}

	function getChildSuplTopics($cat_id, $topic_id, $level)
	{
		$qry_str = '';
		$topic_arr = [];
		$top_id = 0;
		if ($topic_id) {
			$top_id = db_query("SELECT topic_id FROM {topic} WHERE parent_topic_id=:topic_id && category_id=:cat_id && topic_status=1", array(':topic_id' => $topic_id, ':cat_id' => $cat_id))->fetchCol();
		}
		if ($top_id) {
			$it1 = 0;
			foreach ($top_id as $topic) {
				if ($it1++ == 0 	|| $qry_str == '') {
					$qry_str .= " && ";
				} else {
					$qry_str .= " || ";
				}
				$qry_str .= " (category_id=$cat_id && topic_id = $topic) ";
				$topic_arr[] = $topic;
				$t_id = db_query("SELECT topic_id FROM {topic} WHERE parent_topic_id=:topic && category_id=:cat_id && topic_status=1", array(':topic' => $topic, ':cat_id' => $cat_id))->fetchCol();
				if ($t_id) {
					foreach ($t_id as $id) {
						$qry_str .= " || (category_id=$cat_id && topic_id = $id) ";
						$topic_arr[] = $id;
					}
				}
			}
		}
		return trim($qry_str) ? $topic_arr : '';
	}

	function check_vwr_dropbox_access($dropbox_id)
	{
		global $user;
		$uid = $user->uid;
		$dropbox_map = array();
		if (is_vwr_user_role()) {
			return true;
		} else {

			$dropbox_map = db_query("SELECT u.uid FROM {users_info} As u  where u.uid=$uid && u.supplier_org_name IN (SELECT s.supplier_org_id FROM {vendor} as s, {dropbox_supplier_access} as d WHERE s.vendor_id=d.supplier_org_id && d.mapping=1 && dropbox_id=:dropbox_id && s.deleted='0')", array(':dropbox_id' => $dropbox_id))->fetchCol();
		}
		if (in_array($uid, $dropbox_map)) {
			return true;
		}
		return false;
	}

	function check_category_topic_access($cat_id, $topic_id, $region_id = 0)
	{
		global $user;

		if (is_vwr_user_role()) {
			return true;
		}
		$uid = $user->uid;
		$cookieprocessregions = '';

		if (!isset($_COOKIE['cookieregion_name'])) {
			$cookieprocessregions = addslashes(htmlspecialchars(trim($_SESSION['region_name'])));
		} else {
			$cookieprocessregions = addslashes(htmlspecialchars(trim($_COOKIE['cookieregion_name'])));
		}
		if ($region_id) {
			$cookieprocessregions = $region_id;
		}

		$supplier_org_name = db_query("select supplier_org_name from {users_info} where uid=:uid", array(':uid' => $uid))->fetchColumn();
		if(is_numeric($supplier_org_name)){
			$supplier_orgId ="'$supplier_org_name'";
		}
		$userid = db_query("SELECT count(s.supplier_org_id) FROM {vendor} as s join {category_useraccess_mapping} as 
		c on s.vendor_id=c.supplier_org_id where c.mapping=1 && c.category_id=:cat_id && 
		c.topic_id=:topic_id && s.deleted=0 and c.region_id in ($cookieprocessregions) and 
		s.supplier_org_id =$supplier_orgId", array(':cat_id' => $cat_id, ':topic_id' => $topic_id))->fetchColumn();
		if ($userid && is_numeric($userid)) {
			return true;
		}
		if ($cat_id && $topic_id == 0) {
			$userid = db_query("SELECT count(s.supplier_org_id) FROM {vendor} as s join 
			{category_useraccess_mapping} as c on s.vendor_id=c.supplier_org_id 
			where c.mapping=1 && c.category_id=:cat_id && s.deleted=0 and c.region_id 
			in ($cookieprocessregions) and 	s.supplier_org_id =$supplier_orgId", array(':cat_id' => $cat_id))->fetchColumn();
			if ($userid && is_numeric($userid)) {
				return true;
			}
		}
		return false;
	}
	function get_subcategorybyid($category_id, $region)
	{
		$result = '';
		$timestamp = strtotime(date("d-m-Y"));
		$topicdetails = db_query("select category_id from {topic} where parent_topic_id=0 and topic_status=1 and topic_id=:category_id", array(':category_id' => $category_id))->fetchField(0);
		if ($topicdetails > 0) {
			$currentregion = "AND catreg.region_id in (:region)";
			$selectall = "group by catreg.category_id";
			if (is_vwr_user_role()) {


				$result = db_query("SELECT cat.category_id,cat.short_name,
		cat.category_name FROM {category} AS cat INNER JOIN {category_regions} AS 
		catreg ON catreg.category_id=cat.category_id $currentregion 
		WHERE cat.category_status=1 AND catreg.status=1 AND cat.category_id =:topicdetails $selectall ORDER BY cat.category_name ASC", array(':region' => $region, ':topicdetails' => $topicdetails))->fetchAllKeyed(0, 1);
			} else {


				$result = db_query("SELECT cat.category_id,cat.short_name,
		cat.category_name FROM {category} AS cat INNER JOIN {category_regions}
		AS catreg ON catreg.category_id=cat.category_id  $currentregion 
		WHERE cat.category_status=1 && cat.expiry_date>=:expiry_date AND cat.category_id = :topicdetails $selectall ORDER BY cat.category_name ASC", array(':region' => $region, ':expiry_date' => $timestamp, ':topicdetails' => $topicdetails))->fetchAllKeyed(0, 1);
			}
		}


		return $result;
	}
	function getregionsbycategories($category_id)
	{
		$regiondetails = db_query("select region_id from {category_regions} where category_id =:category_id and status=1 order by region_id", array(':category_id' => $category_id));
		return $regiondetails;
	}

	function getcontentregions($content_id, $content_type = 1)
	{
		$regiondetails = db_query("SELECT vwrcr.region_id FROM {topic} as vwrt INNER JOIN {content_regions} as vwrcr on vwrcr.content_id=vwrt.topic_id and vwrcr.status=1 and vwrcr.content_type = :content_type where vwrt.topic_status =1 and vwrt.topic_id in ($content_id) order by region_id", array(':content_type' => $content_type));
		return $regiondetails;
	}

	function getregionnamebyid($region_id)
	{
		$regionnamedetails = db_query("select region_name,region_id from {manage_regions} where region_id =:region_id and region_status=1", array(':region_id' => $region_id));
		return $regionnamedetails;
	}

	function get_categorybyid($category_id, $region)
	{
		$result = '';
		$timestamp = strtotime(date("d-m-Y"));
		$currentregion = "AND catreg.region_id in (:region)";
		$selectall = "group by catreg.category_id";
		if (is_vwr_user_role()) {

			$result = db_query("SELECT cat.category_id,cat.short_name,
		cat.category_name FROM {category} AS cat INNER JOIN {category_regions} AS 
		catreg ON catreg.category_id=cat.category_id $currentregion 
		WHERE cat.category_status=1 AND catreg.status=1 AND cat.category_id =:category_id $selectall ORDER BY cat.category_name ASC", array(':region' => $region, ':category_id' => $category_id))->fetchAllKeyed(0, 1);
		} else {
			$result = db_query("SELECT cat.category_id,cat.short_name,
		cat.category_name FROM {category} AS cat INNER JOIN {category_regions}
		AS catreg ON catreg.category_id=cat.category_id  $currentregion 
		WHERE cat.category_status=1 && cat.expiry_date>=:expiry_date AND cat.category_id =:category_id $selectall ORDER BY cat.category_name ASC", array(':region' => $region, ':expiry_date' => $timestamp, ':category_id' => $category_id))->fetchAllKeyed(0, 1);
		}


		return $result;
	}
	function get_all_categories($region)
	{
		$result = '';
		$timestamp = strtotime(date("d-m-Y"));
		$currentregion = " AND catreg.region_id in ($region) AND catreg.status = 1 ";
		$selectall = "group by catreg.category_id";
		if (is_vwr_user_role()) {
			$result = db_query("SELECT cat.category_id,cat.short_name,
			cat.category_name FROM {category} AS cat INNER JOIN {category_regions} AS 
			catreg ON catreg.category_id=cat.category_id $currentregion 
			INNER JOIN {manage_regions} AS vwrmr ON vwrmr.region_id = catreg.region_id AND vwrmr.region_status = 1
			WHERE cat.category_status = 1 AND catreg.status = 1 $selectall ORDER BY cat.category_name ASC")->fetchAll();
		} 
		else {
			$result = db_query("SELECT cat.category_id,cat.short_name,
			cat.category_name FROM {category} AS cat INNER JOIN {category_regions}
			AS catreg ON catreg.category_id=cat.category_id  $currentregion 
			INNER JOIN {manage_regions} AS vwrmr ON vwrmr.region_id=catreg.region_id AND vwrmr.region_status=1
			WHERE cat.category_status=1 && cat.expiry_date>=:expiry_date $selectall ORDER BY cat.category_name ASC", array(':expiry_date' => $timestamp))->fetchAll();
		}
		return $result;
	}

	function get_all_topics($cat_id, $parent_id, $flag, $region_id = 0, $content_type = 0)
	{
		$cat_topics = '';
		$timestamp = strtotime(date("d-m-Y"));
		$currentregquery = '';
		$groupbytopicid = '';
		if ($region_id > 0 && $content_type > 0) {
			//echo "get_all_topics($cat_id, $parent_id, $flag, $region_id = 0, $content_type = 0)";
			if ($flag == 0) {
				$currentregquery = " INNER JOIN {content_regions} as vwrcr on 
				vwrcr.category_id=vwrt.category_id and  vwrcr.status=1 and vwrcr.category_id in ($cat_id) and vwrcr.content_type in ($content_type) and vwrcr.region_id in ($region_id) INNER JOIN {manage_regions} as vwrmr on vwrmr.region_id=vwrcr.region_id and vwrmr.region_status=1 ";
				$groupbytopicid = " group by vwrt.topic_id ";
			} else {
				$currentregquery = " INNER JOIN {content_regions} as vwrcr on 
				vwrcr.content_id=vwrt.topic_id and  vwrcr.status=1 and vwrcr.category_id in ($cat_id) and vwrcr.content_type in ($content_type) and vwrcr.region_id in ($region_id) INNER JOIN {manage_regions} as vwrmr on vwrmr.region_id=vwrcr.region_id and vwrmr.region_status=1 ";
				$groupbytopicid = " group by vwrt.topic_id ";
			}
		}
		if (is_vwr_user_role() && $flag) {
			$cat_topics = db_query("SELECT vwrt.topic_id, vwrt.topic_name, vwrt.short_name, vwrt.teaser_text, 
			vwrt.topic_image, vwrt.expiry_date,vwrt.display_options, vwrt.scan_file_id, vwrt.scan_file_status FROM {topic} as vwrt 
			$currentregquery where vwrt.category_id = :cat_id && vwrt.parent_topic_id=:parent_id && 
			vwrt.topic_status=1 $groupbytopicid ORDER BY topic_name ASC", array(':cat_id' => $cat_id, ':parent_id' => $parent_id))->fetchAll();
		} else {
			if ($flag == 0) {
				$cat_topics = db_query("SELECT vwrt.topic_id, vwrt.short_name, 
				vwrt.topic_name, vwrt.expiry_date,vwrt.display_options, 
				vwrt.topic_image, vwrt.scan_file_id, vwrt.scan_file_status FROM {topic} as vwrt $currentregquery 
				where vwrt.category_id = :cat_id && vwrt.parent_topic_id=:parent_id && 
				vwrt.topic_status=1 && vwrt.expiry_date>=:expiry_date $groupbytopicid 
				ORDER BY topic_name ASC", array(':cat_id' => $cat_id, ':parent_id' => $parent_id, ':expiry_date' => $timestamp))->fetchAll();
			} else {
				$cat_topics = db_query("SELECT vwrt.topic_id, vwrt.topic_name, vwrt.short_name, vwrt.teaser_text, vwrt.topic_image, vwrt.expiry_date,vwrt.display_options FROM {topic} as vwrt $currentregquery where vwrt.category_id = $cat_id && vwrt.parent_topic_id=$parent_id && vwrt.topic_status=1 && vwrt.expiry_date>=$timestamp $groupbytopicid ORDER BY topic_name ASC")->fetchAll();
			}
		}
		return $cat_topics;
	}


	function get_all_hyperlinks($cat_id, $subcat_id, $topic_id, $subtopic_id, $region_id = 0)
	{
		$cat_topics = '';
		$timestamp = strtotime(date("d-m-Y"));
		$currentregquery = '';
		$groupbytopicid = '';
		$currentregquery = " INNER JOIN {hyperlinks_regions} as vhr on 
		vh.hyperlink_id=vhr.hyperlink_id and  vh.hyperlink_status=1 and vh.cat_id in ($cat_id)
		and vhr.region_id in ($region_id) INNER JOIN {manage_regions} as vwrmr on 
		vwrmr.region_id=vhr.region_id and vwrmr.region_status=1 ";
		$groupbytopicid = " group by vh.hyperlink_id ";
		$cat_topics = db_query("SELECT * FROM {hyperlinks} as vh 
		$currentregquery where vh.cat_id = :cat_id && vh.topic_id=:subcat_id && 
		vh.sub_topic_id=:topic_id and vh.internal_topic_id=:subtopic_id and
		vh.hyperlink_status=1 $groupbytopicid ORDER BY vh.hyperlink_id ASC", array(':cat_id' => $cat_id, ':subcat_id' => $subcat_id, ':topic_id' => $topic_id, ':subtopic_id' => $subtopic_id));
		return $cat_topics;
	}

	function get_related_dropbox($cat_id, $topic_id, $sorder, $region_id = 0)
	{
		$timestamp = strtotime(date("d-m-Y"));
		$dropbox_list = '';
		if ($region_id > 0) {
			$currentregquery = "INNER JOIN {dropbox_regions} as vwdr on  
		vwdr.dropbox_id =vwrd.id and vwdr.region_id in ($region_id) and
		vwdr.status=1 INNER JOIN {manage_regions} as vwrmr on vwrmr.region_id=vwdr.region_id and 
		vwrmr.region_status=1";
		}
		if ($sorder == 'expired') {
			if (is_vwr_user_role()) {
				$dropbox_list = db_query("SELECT vwrd.id, vwrd.title, vwrd.end_date, 
				vwrd.allusers_page from {dropbox} as vwrd $currentregquery 
				where vwrd.id IN (SELECT dbox_id FROM {dropbox_category_mapping} 
				where cat_id = :cat_id && topic_id=:topic_id and region_id in ($region_id)) && vwrd.deleted=0 && 
				vwrd.end_date< :end_date && vwrd.start_date<= :start_date GROUP 
				BY vwrd.title ORDER BY title", array(':cat_id' => $cat_id, ':topic_id' => $topic_id, ':end_date' => $timestamp, ':start_date' => $timestamp));
			}
		} else {


			$dropbox_list = db_query("SELECT vwrd.id, vwrd.title, 
			vwrd.end_date, vwrd.allusers_page from {dropbox} as 
			vwrd $currentregquery where vwrd.id IN (SELECT dbox_id FROM 
			{dropbox_category_mapping} where cat_id = :cat_id && topic_id=:topic_id and region_id in ($region_id)) &&
			vwrd.deleted=0 && vwrd.end_date>= :end_date && vwrd.start_date<= :start_date 
			GROUP BY vwrd.title ORDER BY title ", array(':cat_id' => $cat_id, ':topic_id' => $topic_id, ':end_date' => $timestamp, ':start_date' => $timestamp));
		}

		return $dropbox_list;
	}

	function get_topic_display_info($cat_id, $topic_id, $parent_id)
	{
		$result = '';
		$timestamp = strtotime(date("d-m-Y"));
		if (is_vwr_user_role()) {
			$result = db_query("SELECT display_options,topic_name, short_name, teaser_text, description_title, topic_description, topic_image, expiry_date, scan_file_id, scan_file_status FROM {topic} where topic_id = :topic_id && parent_topic_id=:parent_id && category_id=:cat_id && topic_status=1",[':topic_id' => $topic_id, ':parent_id' => $parent_id, ':cat_id' => $cat_id]);
			foreach($result as $rs){
				$result->display_options  = $rs->display_options;
				$result->topic_name  = $rs->topic_name;
				$result->short_name  = $rs->short_name;
				$result->teaser_text  = $rs->teaser_text;
				$result->description_title  = $rs->description_title;
				$result->topic_description  = $rs->topic_description;
				$result->topic_image  = $rs->topic_image;
				$result->expiry_date  = $rs->expiry_date;
				$result->scan_file_id = $rs->scan_file_id;
				$result->scan_file_status  = $rs->scan_file_status;
			}		
		} else if (check_category_topic_access($cat_id, $topic_id)) {
			$result = db_query("SELECT display_options,topic_name, short_name, teaser_text, description_title, topic_description, topic_image, expiry_date, scan_file_id, scan_file_status FROM {topic} where topic_id = :topic_id && parent_topic_id=:parent_id && category_id=:cat_id && topic_status=1 && expiry_date>=:timestamp",[':topic_id' => $topic_id, ':parent_id' => $parent_id, ':cat_id' => $cat_id,':timestamp' => $timestamp]);
			foreach($result as $rs){	
				$result->display_options  = $rs->display_options;
				$result->topic_name  = $rs->topic_name;
				$result->short_name  = $rs->short_name;
				$result->teaser_text  = $rs->teaser_text;
				$result->description_title  = $rs->description_title;
				$result->topic_description  = $rs->topic_description;
				$result->topic_image  = $rs->topic_image;
				$result->expiry_date  = $rs->expiry_date;
				$result->scan_file_id = $rs->scan_file_id;
				$result->scan_file_status  = $rs->scan_file_status;
			}
		}
		return $result;
	}

	function is_vwr_user_role()
	{
		global $user;
		if (in_array('administrator', $user->roles) || in_array('vwr admin', $user->roles) || in_array('vwr internal', $user->roles)) {
			return true;
		}
		return false;
	}

	function is_user_supplier($uid)
	{
		$user_uid = db_query("SELECT name FROM {role} AS r LEFT JOIN {users_roles} AS ur ON ur.rid = r.rid WHERE ur.uid = :uid", array(':uid' => $uid))->fetchColumn();
		if ($user_uid == "supplier") {
			return true;
		} else {
			return false;
		}
	}

	function has_page_access($action)
	{
		global $user;
		$uid = $user->uid;
		$vwraccess = array();
		if (in_array('administrator', $user->roles) || in_array('vwr admin', $user->roles)) {
			return true;
		} else if (in_array('vwr internal', $user->roles)) {
			if ($action == 'create') {
				$vwraccess = db_query("SELECT uid FROM {user_permission_internal} WHERE uid=$uid && permission_id IN (SELECT permission_id FROM {permission_list_internal} WHERE permission_title='Create New Page' && deleted=0)")->fetchCol();
			} else if ($action == 'edit') {
				$vwraccess = db_query("SELECT uid FROM {user_permission_internal} WHERE uid=$uid && permission_id IN (SELECT permission_id FROM {permission_list_internal} WHERE permission_title='Edit/Modify Page' && deleted=0)")->fetchCol();
			} else if ($action == 'dropbox') {
				$vwraccess = db_query("SELECT uid FROM {user_permission_internal} WHERE uid=$uid && permission_id IN (SELECT permission_id FROM {permission_list_internal} WHERE permission_title='Create/Edit Drop Box' && deleted=0)")->fetchCol();
			} else if ($action == 'submissions') {
				$vwraccess = db_query("SELECT uid FROM {user_permission_internal} WHERE uid=$uid && permission_id IN (SELECT permission_id FROM {permission_list_internal} WHERE permission_title='Delete the Submissions/Files' && deleted=0)")->fetchCol();
			} else if ($action == 'status') {
				$vwraccess = db_query("SELECT uid FROM {user_permission_internal} WHERE uid=$uid && permission_id IN (SELECT permission_id FROM {permission_list_internal} WHERE permission_title='Create Status' && deleted=0)")->fetchCol();
			} else if ($action == 'homepage') {
				$vwraccess = db_query("SELECT uid FROM {user_permission_internal} WHERE uid=$uid && permission_id IN (SELECT permission_id FROM {permission_list_internal} WHERE permission_title='Update Log-In Homepage' && deleted=0)")->fetchCol();
			} else if ($action == 'confirm/update') {
				$vwraccess = db_query("SELECT uid FROM {user_permission_internal} WHERE uid=$uid && permission_id IN (SELECT permission_id FROM {permission_list_internal} WHERE permission_title='Confirm/Update User Profiles' && deleted=0)")->fetchCol();
			} else if ($action == 'supplierAttr') {
				$vwraccess = db_query("SELECT uid FROM {user_permission_internal} WHERE uid=$uid && permission_id IN (SELECT permission_id FROM {permission_list_internal} WHERE permission_title='Create/Update Supplier Attributes' && deleted=0)")->fetchCol();
			} else if ($action == 'move_submissions') {
				$vwraccess = db_query("SELECT uid FROM {user_permission_internal} WHERE uid=$uid && permission_id IN (SELECT permission_id FROM {permission_list_internal} WHERE permission_title='Move Submissions' && deleted=0)")->fetchCol();
			} else if ($action == 'create_libraries') {
				$vwraccess = db_query("SELECT uid FROM {user_permission_internal} WHERE uid=$uid && permission_id IN (SELECT permission_id FROM {permission_list_internal} WHERE permission_title='Create Libraries' && deleted=0)")->fetchCol();
			}
			if (in_array($user->uid, $vwraccess)) {
				return true;
			}
		}
		return false;
	}

	function get_docs_totalcount($cat_id, $top_id, $stop_id, $itop_id, $region_id = 0)
	{
		$total_docs = '';
		$timestamp = strtotime(date("d-m-Y"));
		global $user;
		if ($region_id > 0) {
			$curentregquery = " INNER JOIN {upload_documents_regions} as vwrdr 
			on vwrdr.file_id = ud.file_id 
			INNER JOIN {manage_regions} as vwrmr on 		
			vwrmr.region_id=vwrdr.region_id		
			and vwrdr.region_id in ($region_id) and vwrdr.status=1 and vwrmr.region_status=1";
		}

		if (is_vwr_user_role()) {
			$total_docs = db_query("SELECT count(ud.file_id) from {upload_documents} as ud $curentregquery 
			where ud.file_status=1 && ud.cat_id=:cat_id && ud.topic_id=:top_id && 
			ud.sub_topic_id=:stop_id && ud.internal_topic_id=:itop_id", array(':cat_id' => $cat_id, ':top_id' => $top_id, ':stop_id' => $stop_id, ':itop_id' => $itop_id))->fetchColumn();
		} else {

			$total_docs = db_query("SELECT count(ud.file_id) from {upload_documents} as 
			ud $curentregquery where ud.file_status=1 && ud.cat_id=:cat_id && ud.topic_id=:top_id && 
			ud.sub_topic_id=:stop_id && ud.internal_topic_id=:itop_id && ud.expiry_date>=:expiry_date", array(':cat_id' => $cat_id, ':top_id' => $top_id, ':stop_id' => $stop_id, ':itop_id' => $itop_id, ':expiry_date' => $timestamp))->fetchColumn();
		}
		return $total_docs;
	}

	function get_docs_intial($cat_id, $top_id, $stop_id, $itop_id, $region_id = 0)
	{
		global $user;
		$doc_list = '';
		$timestamp = strtotime(date("d-m-Y"));
		$end = 5;

		if ($region_id > 0) {

			$curentregquery = "INNER JOIN {upload_documents_regions} as vwrdr on vwrdr.file_id = ud.file_id	
			left JOIN {document_order_preferences} dop ON  vwrdr.file_id = dop.file_id
			INNER JOIN {manage_regions} as vwrmr on vwrmr.region_id=vwrdr.region_id 
			and vwrdr.region_id in ($region_id) and vwrdr.status=1 and vwrmr.region_status=1";
		}

		if (is_vwr_user_role()) {

			$doc_list = db_query("SELECT ud.file_id, ud.file_title, ud.file_name, 
			ud.file_type, ud.expiry_date, ud.scan_file_id, ud.scan_file_status 
			from {upload_documents} as 
			ud $curentregquery  where ud.file_status=1 && 
			ud.cat_id=:cat_id && ud.topic_id=:top_id && ud.sub_topic_id=:stop_id && ud.internal_topic_id=:itop_id
			group by ud.file_id
			ORDER BY ISNULL(dop.document_order),dop.document_order,ud.file_id DESC 
			limit 0, $end", array(':cat_id' => $cat_id, ':top_id' => $top_id, ':stop_id' => $stop_id, ':itop_id' => $itop_id));
		} else {
			$doc_list = db_query("SELECT ud.file_id, ud.file_title, ud.file_name, 
			ud.file_type, ud.expiry_date, ud.scan_file_id, ud.scan_file_status from {upload_documents} as ud $curentregquery 
			where ud.file_status=1 && ud.cat_id=:cat_id && ud.topic_id=:top_id && 
			ud.sub_topic_id=:stop_id && ud.internal_topic_id=:itop_id && ud.expiry_date >= :expiry_date
			group by ud.file_id		
			ORDER BY ISNULL(dop.document_order),dop.document_order,ud.file_id DESC limit 0, $end", array(':cat_id' => $cat_id, ':top_id' => $top_id, ':stop_id' => $stop_id, ':itop_id' => $itop_id, ':expiry_date' => $timestamp));
		}
		return $doc_list;
	}

	function getDropboxName()
	{
		$select_title = "Dropbox";
		if (!is_vwr_user_role()) {
			$select_title = db_query("SELECT title FROM {dropbox_instructions} WHERE flag=1 ORDER BY id DESC")->fetchColumn();
		}
		return $select_title ? $select_title : 'Dropbox';
	}

	function createFolder($path, $mode)
	{
		
		$structure = 'sites/default/files/' . $path;
		if (!file_exists($structure)) {
			if (mkdir($structure, 0777, true)) {
				chmod($structure, 0777);
				return true;
			}
		}
		return false;
	}

	function scan_details_remove_files(){
		if(isset($_REQUEST['fid']) && !empty($_REQUEST['fid'])){
			$file_id =explode(",",addslashes(htmlentities($_REQUEST["fid"])));
			$fileids = "'" . implode("', '", $file_id) ."'";
			db_query("delete from {file_scan_details} where file_id in ($fileids)");
			echo 'removed files';
		}
	}
	/**** File upload dropbox ***/
	function file_upload_dropbox()
	{

		if(user_is_logged_in()){
			if ($_REQUEST["action"] == "uploading") {
				//csrf token 
				$token = isset($_SESSION['csrfToken']) ? $_SESSION['csrfToken'] : "";
				if ($token && $_POST['token'] === $token) {
					unset($_SESSION['csrfToken']);
				} else {
					echo json_encode(['msg' => "Invalid form submit"]);
					exit();
				}
				global $user;
				$dbid = strip_tags(addslashes($_REQUEST['dropbox_id']));
				$catid = strip_tags(addslashes($_REQUEST['cat_id']));
				$topid = strip_tags(addslashes($_REQUEST['top_id']));
				$subtopic_id = strip_tags(addslashes($_REQUEST['subtopic_id']));
				$internaltopic_id = strip_tags(addslashes($_REQUEST['internaltopic_id']));
				$file_id=explode(",",strip_tags(addslashes($_POST["file_id"])));
				$file_name=explode(",",strip_tags(addslashes($_POST["file_name"])));

				if ($topid == 'undefined') {
					$topid = "0";
				}
				if ($subtopic_id == 'undefined') {
					$subtopic_id = "0";
				}
				if ($internaltopic_id == 'undefined') {
					$internaltopic_id = "0";
				}

				
				$structure_dp = 'sites/default/files/docs_dropbox/';
				if (!file_exists($structure_dp)) {
					$created = createFolder('docs_dropbox', '');
				}
				$created_by = $user->uid;
				$created_date = time();
				$from = strip_tags($_REQUEST['from_email']);
				

				//$title = htmlspecialchars($_REQUEST['title'],ENT_QUOTES);
				$title = strip_tags(addslashes($_REQUEST['title']));
				$message_desc = preg_replace('#<script(.*?)>(.*?)</script>#is', '', $_POST['message_desc']);
				$vendor_no = strip_tags(addslashes($_REQUEST['vendor_no']));
				$ticket = db_query("SELECT MAX(`submission_id`) FROM {dropbox_files}")->fetchField();
				$ticket_counter = ($ticket == 0) ? 1000 : ($ticket + 1);
				$submission_id = $ticket_counter;
				$status_default = db_query("SELECT status_id FROM {manage_status} WHERE status_name='Received'")->fetchColumn();
				$status_default = $status_default ? $status_default : 'Recvd';
				if ($created_by) 
					{
						db_query("INSERT INTO {dropbox_files}(`dbox_id`, `cat_id`, `top_id`,`subtop_id`,`internal_id`,`from`,`title`,`message`,`file`,`vendor_no`,`created_by`,`created_date`,`deleted`,`submission_id`,`status`) VALUES (:dbid,:catid,:topid,:subtopic_id,:internaltopic_id,:from,:title,:message_desc,'',:vendor_no,:created_by,:created_date,0,:submission_id, :status_default)", array(':dbid' => $dbid, ':catid' => $catid, ':topid' => $topid, ':subtopic_id' => $subtopic_id, ':internaltopic_id' => $internaltopic_id, ':from' => $from, ':title' => $title, ':message_desc' => $message_desc, ':vendor_no' => $vendor_no, ':created_by' => $created_by, ':created_date' => $created_date, ':submission_id' => $submission_id, ':status_default' => $status_default));
						//submit the file data against submission_id to submission_files and file_scan_details table
						for($i = 0 ; $i < count($file_id) ; $i++) {
							//insert files submission
							$editFields = array();
							$editFields['submission_id']= $submission_id;
							$editFields['file_name']= $file_name[$i]; //need to sent
							$editFields['source']= 'submission';
							$editFields['comment_id']= 0;
							$editFields['deleted']= 0;
							//get the scan result 
							$scanned_result = get_scanned_file($file_id[$i]);//
							$scanned_status = ($scanned_result['status'] == 0 ? 'SCAN_COMPLETED' :  (($scanned_result['status'] == 255 || $scanned_result['status'] == 254) ? "In Progress" : "SCAN_FAILED"));
							$file = ['file_name'=> $file_name[$i],'scan_status' => $scanned_status,'submission_type'=>'submission_files','file_id'=>$file_id[$i],'submission_id'=>$submission_id];
								if( $scanned_result['status'] == 0 ) {
								//No threat detected
									$moved = move_file_to_vwr_server($file, $scanned_result, "uploadv2");
								}	
							/* if( $scanned_result['status'] == 0 ) {
								//No threat detected
								$moved = move_file_to_vwr_server($file, $scanned_result, "uploadv2");
								if($moved != 'Copy success!') {
									echo json_encode(['msg' => "fail to move to server"]);
								}
							}else if($scanned_result['status'] == 255  || $scanned_result['status'] == 254){
								//scan in progress no action needed
							} else{
								echo json_encode(['msg' => "Status : " . $scanned_result['status'] . " Message : " . $scanned_result['message']]);
							}  */

							//scan fields
							$editFields['scan_file_id']= $file_id[$i]; //need to sent
							$editFields['scan_file_status']= $scanned_status;
							$auto_file_id = db_insert('submission_files')->fields($editFields)->execute();

							//scanfields
							//$scanFields['file_id']= $file_id[$i]; //need to sent
							//$scanFields['file_name']= $file_name[$i]; //need to sent
							$scanFields['submission_type']= 'submission_files';
							$scanFields['created_date']= time();
							$scanFields['scan_status'] = $scanned_status;
							//$file_auto_id = db_insert('file_scan_details')->fields($scanFields)->execute();
							db_update('file_scan_details')->fields($scanFields)->condition('file_id', $file_id[$i])->execute();
						}
						echo json_encode(['msg' => $submission_id,'enSubID' => base64_encode($submission_id)]);
					} else {
						echo json_encode(['msg' => "login"]);
					}
			} else {
				print theme('file_upload_dropbox');
			}
		}else {
			drupal_goto("<front>");
		}
	}

	function dropbox_file_email($dropbox_id, $dropbox_name, $file, $message_values, $user_values)
	{
		$path = drupal_get_path('theme', 'vwr');
		$subject = "Dropbox " . $dropbox_name . " - " . $message_values['subject_line'];
		$body_message = file_get_contents($path . '/email_templates/' . $file);
		$body_message = str_replace("base_path", 'http://' . $_SERVER['HTTP_HOST'] . base_path() . $path, $body_message);
		$body_message = str_replace("(dropbox_name)", $dropbox_name, $body_message);
		$body_message = str_replace("(title)", $message_values['subject_line'], $body_message);
		$body_message = str_replace("(from)", $message_values['supplier_name'], $body_message);
		$body_message = str_replace("(email)", $message_values['email'], $body_message);
		$body_message = str_replace("(user_message)", $message_values['user_message'], $body_message);
		$body_message = str_replace("(expiry_date)", $message_values['expiry_date'], $body_message);

		
		foreach ($user_values as $username => $useremail) {
			if (email_notify_check($useremail)) {
				$url = 'http://' . $_SERVER['HTTP_HOST'] . base_path() . 'vwrServices/showdropboxfiles/' . base64_encode($dropbox_id) . '/' . $message_values['created_date'];
				if (is_numeric($username)) {
					$body = str_replace("(user_name)", '', $body_message);
				} else {
					$body = str_replace("(user_name)", $username, $body_message);
				}
				$body = str_replace("(file_link)", $url, $body);
				$body = preg_replace("[\\\]", '', $body);

				// To send HTML mail, the Content-type header must be set
				$headers  = 'MIME-Version: 1.0' . "\r\n";
				$headers .= 'Content-type: text/html; charset=iso-8859-1' . "\r\n";
				// Additional headers
				$headers .= "From: VWR Supplier Central <vwr@VWRsuppliercentral.com>" . "\r\n";
				$headers .= "Reply-To: VWR Supplier Central <vwr@VWRsuppliercentral.com>" . "\r\ng";
				//$headers .= "To: $username<$useremail>" . "\r\n";
				mail($useremail, $subject, $body, $headers);
			}
		}
	}

	function categorymanager_theme()
	{
		return array(
			'category_display_theme' => array(
				'arguments' => array('form' => NULL, 'data' => NULL),
				'template' => 'category-display',
			),
			'topic_display_theme' => array(
				'arguments' => array('form' => NULL, 'data' => NULL, 'level' => NULL),
				'template' => 'topic-display',
			),
			'subtopic_display_theme' => array(
				'arguments' => array('form' => NULL, 'data' => NULL, 'level' => NULL),
				'template' => 'subtopic-display',
			),
			'internaltopic_display_theme' => array(
				'arguments' => array('form' => NULL, 'data' => NULL, 'level' => NULL),
				'template' => 'internaltopic-display',
			),

			'category_upload_documents_theme' => array(
				'arguments' => array('form' => NULL, 'data' => NULL, 'level' => NULL),
				'template' => 'category-upload-documents',
			),
			'category_useraccess_theme' => array(
				'arguments' => array('form' => NULL, 'data' => NULL, 'level' => NULL),
				'template' => 'category-useraccess',
			),

			'simple_category_add_edit_theme' => array(
				'arguments' => array('form' => NULL, 'action' => NULL, 'level' => NULL),
				'template' => 'simple-category-add-edit',
			),
			'simple_topic_add_edit_theme' => array(
				'arguments' => array('form' => NULL, 'action' => NULL, 'level' => NULL),
				'template' => 'simple-topic-add-edit',
			),
			'simple_hyperlink_add_edit_theme' => array(
				'arguments' => array('form' => NULL, 'action' => NULL, 'level' => NULL),
				'template' => 'simple-hyperlink-add-edit',
			),
			'simple_subcategoryhyperlink_add_edit_theme' => array(
				'arguments' => array('form' => NULL, 'action' => NULL, 'level' => NULL),
				'template' => 'simple-subcategoryhyperlink-add-edit',
			),

			'simple_topichyperlink_add_edit_theme' => array(
				'arguments' => array('form' => NULL, 'action' => NULL, 'level' => NULL),
				'template' => 'simple-topichyperlink-add-edit',
			),
			'simple_subtopichyperlink_add_edit_theme' => array(
				'arguments' => array('form' => NULL, 'action' => NULL, 'level' => NULL),
				'template' => 'simple-subtopichyperlink-add-edit',
			),
			'simple_subtopic_add_edit_theme' => array(
				'arguments' => array('form' => NULL, 'action' => NULL, 'level' => NULL),
				'template' => 'simple-subtopic-add-edit',
			),
			'simple_internaltopic_add_edit_theme' => array(
				'arguments' => array('form' => NULL, 'action' => NULL, 'level' => NULL),
				'template' => 'simple-internaltopic-add-edit',
			),
			'noaccess_error_theme' => array(
				'arguments' => array('form' => NULL, 'action' => NULL, 'level' => NULL),
				'template' => 'noaccess-error',
			),
			'file_upload_dropbox' => array(
				'template' => 'file_upload_dropbox',
			),
			'workflow_email' => array(
				'variables' => array('dropbox' => NULL, 'submissions' => NULL),
				'template'	=> 'workflow-email'
			),
			'file_submissions_edit' => array(
				'arguments' => array('data' => NULL),
				'template' => 'file-submissions-edit',
			),
			'category_manage_regions' => array(
				'variables' => array('data' => NULL),
				'template' => 'manage-regions-list',
			),
		);
	}

	/**
	 * Triggering email to worklfow tool / dropbox owners
	 */
	function workflow_mail_triggering($dropbox_id, $dropbox_details, $messages, $submission_id, $owners, $euowners)
	{
		$reply_to = variable_get('submission_reply_to', '');
		$dropbox_files = db_query("SELECT * FROM {submission_files} WHERE submission_id=:submission_id", array(':submission_id' => $submission_id));
		foreach ($dropbox_files as $submission_files) {
			if ($submission_id < 34370) {
				$files[] = basename(realpath($_SERVER['DOCUMENT_ROOT'] . base_path() . conf_path() . '/files/docs_dropbox/' . $submission_id . '/' . $submission_files->file_name));
			} else {
				$files[] = basename(realpath($_SERVER['DOCUMENT_ROOT'] . base_path() . conf_path() . '/files/docs_dropbox2/' . $submission_id . '/' . $submission_files->file_name));
			}
			$file_name[] = $submission_files->file_name;
			$submission_id = $submission_files->submission_id;
			//infected file status per submission
			if ($submission_files->scan_file_status == "SCAN_FAILED")
				$infected_file_list[$submission_files->file_name] = $submission_files->scan_file_status;
		}
		$dropbox = $dropbox_details;
		$submissions = array_merge($messages, array('submission_id' => $submission_id, 'infected_file' => $infected_file_list));
		$workflow_email_id = $dropbox_details->workflow_email_id;
		$mail_content = theme('workflow_email', array('dropbox' => $dropbox, 'submissions' => $submissions));
		// mail structure
		$to = $workflow_email_id;
		$from = $submissions['email'];
		$supplier_org = $submissions['supplier_org'] ? $submissions['supplier_org'] : 'VWR';
		$subject = (trim($supplier_org) ? $supplier_org : 'N/A') . " - " . $dropbox->title . " - ID" . $submission_id;
		$message = $mail_content;
		$headers = "From: $from" . "\n";
		$headers .= "Reply-To: $reply_to" . "\n";

		// boundary
		$semi_rand = md5(time());
		$mime_boundary = "==Multipart_Boundary_x{$semi_rand}x";

		// headers for attachment	
		$headers .= "MIME-Version: 1.0\n" . "Content-Type: multipart/mixed;\n" . " boundary=\"{$mime_boundary}\"";

		// multipart boundary 
		$message = "This is a multi-part message in MIME format.\n\n" . "--{$mime_boundary}\n" . "Content-Type: text/html; charset=\"iso-8859-1\"\n" . "Content-Transfer-Encoding: 7bit\n\n" . $message . "\n\n";
		$message .= "--{$mime_boundary}\n";

		$all_file_size = 0;
		for ($x = 0; $x < count($files); $x++) {
			$all_file_size += filesize($files[$x]);
		}
		$check_filesizer = 1024 * 1024 * variable_get('max_email_file_size', 10); // 30MB : Email failure Prod issue;
		$email_message = $message;
		if ($all_file_size <= $check_filesizer) { // preparing attachments
			for ($x = 0; $x < count($files); $x++) {
				$fsize = filesize($files[$x]);
				if ($fsize) {
					$file = fopen($files[$x], "rb");
					$data = fread($file, filesize($files[$x]));
					fclose($file);
					$data = chunk_split(base64_encode($data));
					$name = $file_name[$x];
					$message .= "Content-Type: {\"application/octet-stream\"};\n" .
						"Content-Length: " . $fsize . "\n" .
						" name=\"$files[$x]\"\n" .
						"Content-Disposition: attachment;\n" . " filename=\"$name\"\n" .
						"Content-Transfer-Encoding: base64\n\n" . $data . "\n\n";
					$message .= "--{$mime_boundary}\n";
				}
			}
		}
		// triggering mail to dropbox owners only if mapped
		$log_msg = 'New Submission: ID' . $submission_id;
		$time = time();
		if (count($owners)) {
			foreach ($owners as $owner_name => $owner_mail) {
				if (email_notify_check($owner_mail)) {
					$mail = @mail($owner_mail, $subject, $message, $headers);
					if (!$mail && ($all_file_size > ($check_filesizer / 2))) { // memory_get_usage(); 
						$mail = @mail($owner_mail, $subject, $email_message, $headers);
					}
					$log_status = ($mail) ? 1 : 0;
					email_logs('submission', $owner_mail, $subject, $log_msg, $log_status, $time);
				}
			}
		}

		if (count($euowners)) {
			foreach ($euowners as $euowner_name => $euowner_mail) {
				if (email_notify_check($euowner_mail)) {
					$mail = @mail($euowner_mail, $subject, $message, $headers);
					if (!$mail && ($all_file_size > ($check_filesizer / 2))) { // memory_get_usage(); 
						$mail = @mail($euowner_mail, $subject, $email_message, $headers);
					}
					$log_status = ($mail) ? 1 : 0;
					email_logs('submission', $euowner_mail, $subject, $log_msg, $log_status, $time);
				}
			}
		}
		// triggering mail to workflow tool only if linked
		if ($dropbox_details->link_workflow_tool == 1) {
			if (email_notify_check($to)) { //check if need this if condition;
				$mail = @mail($to, $subject, $message, $headers);
				$log_status = ($mail) ? 1 : 0;
				email_logs('submission', $to, $subject, $log_msg, $log_status, $time);
			}
		}
		echo "success";
	}
	function getcontentregionaccess($category_id, $content_id, $content_type, $region_id = 0, $supplier_org_id)
	{

		if (empty($content_type)) {

			//$content_query = "select vwrc.category_id from vwr_category as vwrc INNER JOIN vwr_category_useraccess_mapping AS vwrcusm on vwrcusm.category_id = vwrc.category_id INNER JOIN vwr_vendor AS vwrv ON vwrv.vendor_id=vwrcusm.supplier_org_id where vwrcusm.topic_id=$content_id and vwrcusm.region_id=$region_id and vwrc.category_id=$category_id and vwrv.supplier_org_id=$supplier_org_id";
			//$resultset = db_query($content_query)->fetchObject();
			$content_query = "select vwrc.category_id from vwr_category as vwrc INNER JOIN vwr_category_useraccess_mapping AS vwrcusm on vwrcusm.category_id = vwrc.category_id INNER JOIN vwr_vendor AS vwrv ON vwrv.vendor_id=vwrcusm.supplier_org_id where vwrcusm.topic_id=:topic_id and vwrcusm.region_id=:region_id and vwrc.category_id=:category_id and vwrv.supplier_org_id=:supplier_org_id";
			$param_query = [':topic_id' => $content_id, ':region_id' => $region_id, ':category_id' => $category_id, ':supplier_org_id' => $supplier_org_id];
			$resultset = db_query($content_query, $param_query)->fetchObject();
		}
		if ($content_type == 1 || $content_type == 2 || $content_type == 3) {
			//$content_query = "select vwrc.category_id from vwr_topic as vwrc INNER JOIN vwr_category_useraccess_mapping AS vwrcusm on vwrcusm.category_id = vwrc.category_id INNER JOIN vwr_vendor AS vwrv ON vwrv.vendor_id=vwrcusm.supplier_org_id where vwrcusm.topic_id=$content_id and vwrcusm.region_id=$region_id and vwrc.category_id=$category_id and vwrv.supplier_org_id=$supplier_org_id";
			$content_query = "select vwrc.category_id from vwr_topic as vwrc INNER JOIN vwr_category_useraccess_mapping AS vwrcusm on vwrcusm.category_id = vwrc.category_id INNER JOIN vwr_vendor AS vwrv ON vwrv.vendor_id=vwrcusm.supplier_org_id where vwrcusm.topic_id=:topic_id and vwrcusm.region_id=:region_id and vwrc.category_id=:category_id and vwrv.supplier_org_id=:supplier_org_id";
			$param_query = [':topic_id' => $content_id, ':region_id' => $region_id, ':category_id' => $category_id, ':supplier_org_id' => $supplier_org_id];
			$resultset = db_query($content_query, $param_query)->fetchObject();
		}
		return $resultset->category_id;
	}
	function dropbox_file_upload_mail_trigger()
	{
		global $user;
		$submission_id = addslashes(htmlentities($_REQUEST["submission_id"]));
		if ($submission_id != '') {
			$dbid = strip_tags($_REQUEST["dbid"]);
			$subm_id = trim($submission_id);
			$select_user_name = db_query("SELECT ui.firstname, ui.lastname, u.mail, ui.supplier_org_name, u.status FROM {users} u, {users_info} ui where u.uid =:uid AND u.uid=ui.uid AND u.status=1", array(':uid' => $user->uid))->fetchObject();
			$supplier_name = $select_user_name->firstname . " " . $select_user_name->lastname;
			$supplier_org_name = getMasterSupplierOrgName($select_user_name->supplier_org_name);
			$dropbox_details = db_query("SELECT ownerseu_email_id,title, owners_email_id, link_workflow_tool, workflow_email_id, created_date FROM {dropbox} WHERE id=:dbid", array(':dbid' => $dbid))->fetchObject();
			$submission_details = db_query("SELECT title, message, vendor_no FROM {dropbox_files} WHERE submission_id=:subm_id", array(':subm_id' => $subm_id))->fetchObject();
			$expired_date = date('m/d/Y', $created_date + (30 * 86400));
			
			$others_email = explode(";", $dropbox_details->owners_email_id);
			$user_values = array();
			foreach ($others_email as $others_details) {
				$user_values[] = $others_details;
			}
			if ($dropbox_details->owners_email_id != $dropbox_details->ownerseu_email_id) {
				$others_email_eu = explode(";", $dropbox_details->ownerseu_email_id);
				$user_values_eu = array();
				foreach ($others_email_eu as $otherseu_details) {
					$user_values_eu[] = $otherseu_details;
				}
			} else {
				$user_values_eu[] = '';
			}
			$title = $submission_details->title;
			$message_desc = $submission_details->message;
			$vendor_no = $submission_details->vendor_no;
			$message_values = array(
				"subject_line" => $title,
				"supplier_org" => $supplier_org_name,
				"vendor_num" => $vendor_no,
				"supplier_name" => $supplier_name,
				"email" => $select_user_name->mail,
				"user_message" => $message_desc,
				"created_date" => $dropbox_details->created_date,
				"expiry_date" => $expired_date
			);
			$select_owners = db_query("SELECT do.owner_id, u.mail, ui.firstname, ui.lastname FROM {dropbox_owners} do, {users_info} ui, {users} u WHERE do.dropbox_id=:dbid AND do.owner_id=ui.uid AND u.uid=do.owner_id AND u.status=1", array(':dbid' => $dbid));
			foreach ($select_owners as $users_details) {
				$owner_name = $users_details->firstname . " " . $users_details->lastname;
				$user_values[$owner_name] = $users_details->mail;
			}
			// Mail triggering to workflow tool and drop box owners
			workflow_mail_triggering($dbid, $dropbox_details, $message_values, $submission_id, $user_values, $user_values_eu);
			echo 'success';
		}
	}

	/* Submission Edit, actions: Start*/
	function file_submissions_actions()
	{
		$sub_id = strip_tags(trim($_POST['sub_id']));
		if (has_submission_self_access($sub_id)) {
			if (arg(3) == 'update') {
				$auto_id = strip_tags(trim($_POST['id']));
				if ($sub_id && is_numeric($sub_id) && $auto_id && is_numeric($auto_id)) {
					$editFields = array();
					global $user;
					$editFields['title'] = strip_tags(trim($_POST['title']));
					//$editFields['message'] = strip_tags(trim($_POST['message_desc']));
					$editFields['message'] = preg_replace('#<script(.*?)>(.*?)</script>#is', '', $_POST['message_desc']);
					$editFields['modified_by'] = $user->uid;
					$editFields['modified_date'] = time();
					db_update('dropbox_files')->fields($editFields)->condition('id', $auto_id)->condition('submission_id', $sub_id)->execute();
					if (db_affected_rows) {
						echo 'success';
					}
				}
			} else {
				print theme('file_submissions_edit');
			}
		}
	}

	function categoryexecutestoreprocedure($parent_id, $contenttype, $iscategory)
	{

		global $databases;

		$dbname = $databases['default']['default']['database'];
		$username = $databases['default']['default']['username'];
		$password = $databases['default']['default']['password'];
		$host = $databases['default']['default']['host'];
		$dbh = new PDO('mysql:host=' . $host . ';dbname=' . $dbname, $username, $password);
		$dbh->setAttribute(PDO::ATTR_DEFAULT_FETCH_MODE, PDO::FETCH_OBJ);
		$stmt = $dbh->prepare("Call vwr_useraccess(?,?,?)");
		$stmt->execute(array($parent_id, $contenttype, $iscategory));
		foreach ($stmt as $row) {
			$result_supplier_org[] = $row;
		}


		return $result_supplier_org;
	}

	function executestoreproceduredropboxcategorymapping($dropbox_id, $topic_id)
	{
		global $databases;
		$dbname = $databases['default']['default']['database'];
		$username = $databases['default']['default']['username'];
		$password = $databases['default']['default']['password'];
		$host = $databases['default']['default']['host'];
		$dbh = new PDO('mysql:host=' . $host . ';dbname=' . $dbname, $username, $password);
		$dbh->setAttribute(PDO::ATTR_DEFAULT_FETCH_MODE, PDO::FETCH_OBJ);
		$stmt = $dbh->prepare("Call vwr_dropbox_categorymapping_check(?,?)");

		if ($stmt->execute(array($dropbox_id, $topic_id))) {
			while ($row = $stmt->fetch()) {
				$result_dropboxcategory_mapping[] = $row;
			}
		}

		return $result_dropboxcategory_mapping;
	}
	function executestoreproceduredropboxsuppliers($dropbox_id)
	{
		global $databases;
		$dbname = $databases['default']['default']['database'];
		$username = $databases['default']['default']['username'];
		$password = $databases['default']['default']['password'];
		$host = $databases['default']['default']['host'];
		$dbh = new PDO('mysql:host=' . $host . ';dbname=' . $dbname, $username, $password);
		$dbh->setAttribute(PDO::ATTR_DEFAULT_FETCH_MODE, PDO::FETCH_OBJ);
		$stmt = $dbh->prepare("Call vwr_dropbox_suppliermapping_check(?)");

		if ($stmt->execute(array($dropbox_id))) {
			while ($row = $stmt->fetch()) {
				$result_dropboxsupplier_mapping[] = $row;
			}
		}

		return $result_dropboxsupplier_mapping;
	}

	function executestoreprocedurevas($parent_id, $contenttype, $iscategory)
	{
		global $databases;
		$dbname = $databases['default']['default']['database'];
		$username = $databases['default']['default']['username'];
		$password = $databases['default']['default']['password'];
		$host = $databases['default']['default']['host'];
		$dbh = new PDO('mysql:host=' . $host . ';dbname=' . $dbname, $username, $password);
		$dbh->setAttribute(PDO::ATTR_DEFAULT_FETCH_MODE, PDO::FETCH_OBJ);
		$stmt = $dbh->prepare("Call vwr_useraccess_vas(?,?,?)");
		$stmt->execute(array($parent_id, $contenttype, $iscategory));
		foreach ($stmt as $row) {
			$result_supplier_org[] = $row;
		}

		return $result_supplier_org;
	}

	function executestoredproceduregetsupplierorgids($vas_name)
	{
		global $databases;
		$supplierorgids = '';
		$dbname = $databases['default']['default']['database'];
		$username = $databases['default']['default']['username'];
		$password = $databases['default']['default']['password'];
		$host = $databases['default']['default']['host'];
		$dbh = new PDO('mysql:host=' . $host . ';dbname=' . $dbname, $username, $password);
		$dbh->setAttribute(PDO::ATTR_DEFAULT_FETCH_MODE, PDO::FETCH_OBJ);
		$stmt = $dbh->prepare("Call vwr_vasaccess_supplierorgs(?)");

		if ($stmt->execute(array($vas_name))) {
			while ($row = $stmt->fetch()) {

				$result_supplier_org[] =  $row->supplier;
				$supplierorgids .=  $row->supplier;
			}
		}

		return $supplierorgids;
	}
	function executestoreprocedureselected_vas_values($region_id, $category_id, $topic_id)
	{
		global $databases;
		$dbname = $databases['default']['default']['database'];
		$username = $databases['default']['default']['username'];
		$password = $databases['default']['default']['password'];
		$host = $databases['default']['default']['host'];
		$dbh = new PDO('mysql:host=' . $host . ';dbname=' . $dbname, $username, $password);
		$dbh->setAttribute(PDO::ATTR_DEFAULT_FETCH_MODE, PDO::FETCH_OBJ);
		$stmt = $dbh->prepare("Call vwr_selected_vas_values(?,?,?)");
		$stmt->execute(array($region_id, $category_id, $topic_id));
		foreach ($stmt as $row) {
			$result_supplier_org[] = $row->vas_id;
		}

		return $result_supplier_org;
	}
	function executestoreprocedureis_global_supplier()
	{
		global $databases;
		$dbname = $databases['default']['default']['database'];
		$username = $databases['default']['default']['username'];
		$password = $databases['default']['default']['password'];
		$host = $databases['default']['default']['host'];
		$dbh = new PDO('mysql:host=' . $host . ';dbname=' . $dbname, $username, $password);
		$dbh->setAttribute(PDO::ATTR_DEFAULT_FETCH_MODE, PDO::FETCH_OBJ);
		$stmt = $dbh->prepare("Call vwr_is_global_supplier()");
		$stmt->execute();
		$isglobalsupplierslist = array();
		foreach ($stmt as $row) {
			$isglobalssup = array();
			$isglobalssup['isglobal'] = $row->isglobal;
			$isglobalssup['supplier_org_id'] = $row->supplier_org_id;
			$isglobalssup['region_id'] = $row->region_id;
			$isglobalsupplierslist[$row->supplier_org_id] = $isglobalssup;
		}

		return $isglobalsupplierslist;
	}
	function executestoreproceduresupplierslist()
	{
		global $databases;
		$dbname = $databases['default']['default']['database'];
		$username = $databases['default']['default']['username'];
		$password = $databases['default']['default']['password'];
		$host = $databases['default']['default']['host'];
		$dbh = new PDO('mysql:host=' . $host . ';dbname=' . $dbname, $username, $password);
		$dbh->setAttribute(PDO::ATTR_DEFAULT_FETCH_MODE, PDO::FETCH_OBJ);
		$stmt = $dbh->prepare("Call vwr_supplierslist()");
		$stmt->execute();
		$isglobalsupplierslist = array();
		foreach ($stmt as $row) {
			$isglobalssup = array();
			$isglobalssup['supplier_org_id'] = $row->supplier_org_id;
			$isglobalssup['supplier_org_name'] = $row->supplier_org_name;
			$isglobalssup['vendor_id'] = $row->vendor_id;
			$isglobalsupplierslist[$row->vendor_id] = $isglobalssup;
		}

		return $isglobalsupplierslist;
	}
	function executestoreprocedureselected_supplier_names($topic_id, $category_id, $region_id)
	{
		global $databases;
		$dbname = $databases['default']['default']['database'];
		$username = $databases['default']['default']['username'];
		$password = $databases['default']['default']['password'];
		$host = $databases['default']['default']['host'];
		$dbh = new PDO('mysql:host=' . $host . ';dbname=' . $dbname, $username, $password);
		$dbh->setAttribute(PDO::ATTR_DEFAULT_FETCH_MODE, PDO::FETCH_OBJ);
		$stmt = $dbh->prepare("Call vwr_selected_supplier_names(?,?,?)");
		$stmt->execute(array($topic_id, $category_id, $region_id));
		$isglobalsupplierslist = array();
		foreach ($stmt as $row) {
			$isglobalsupplierslist[] = $row->supplier_org_name;
		}

		return $isglobalsupplierslist;
	}
	function executestoreprocedureselected_supplier_values($topic_id, $category_id, $region_id)
	{
		global $databases;
		$dbname = $databases['default']['default']['database'];
		$username = $databases['default']['default']['username'];
		$password = $databases['default']['default']['password'];
		$host = $databases['default']['default']['host'];
		$dbh = new PDO('mysql:host=' . $host . ';dbname=' . $dbname, $username, $password);
		$dbh->setAttribute(PDO::ATTR_DEFAULT_FETCH_MODE, PDO::FETCH_OBJ);
		$stmt = $dbh->prepare("Call vwr_selected_supplier_values(?,?,?)");
		$stmt->execute([$topic_id, $category_id, $region_id]);
		$isglobalsupplierslist = [];
		foreach ($stmt as $row) {
			$isglobalsupplierslist[] = $row->supplier_org_id;
		}
		return $isglobalsupplierslist;
	}
	function executestoreprocedurevas_vendors($region_id)
	{
		global $databases;
		$dbname = $databases['default']['default']['database'];
		$username = $databases['default']['default']['username'];
		$password = $databases['default']['default']['password'];
		$host = $databases['default']['default']['host'];
		$dbh = new PDO('mysql:host=' . $host . ';dbname=' . $dbname, $username, $password);
		$dbh->setAttribute(PDO::ATTR_DEFAULT_FETCH_MODE, PDO::FETCH_OBJ);
		$stmt = $dbh->prepare("Call vwr_vas_vendors(?)");
		$stmt->execute(array($region_id));
		$isglobalsupplierslist = array();
		foreach ($stmt as $row) {
			$isglobalsupplierslist[$row->vas_tier_id] .= $row->supplier . '_';
		}

		return $isglobalsupplierslist;
	}
	/* Submission Edit, actions : End */